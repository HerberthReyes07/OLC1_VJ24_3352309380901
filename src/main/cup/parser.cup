package analysis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instruction;
import symbol.Type;
import symbol.DataType;
import symbol.Operators;
import symbol.MutabilityType;

//instrucciones
import instructions.Print;
import instructions.Declaration;
import instructions.VariableAssignment;
import instructions.If;
import instructions.Match;
import instructions.CaseMatch;
import instructions.While;
import instructions.For;
import instructions.DoWhile;
import instructions.Break;
import instructions.Continue;
import instructions.VectorDeclaration;
import instructions.VectorAssignment;
import instructions.DynamicListDeclaration;
import instructions.Append;
import instructions.StructDeclaration;
import instructions.StructField;
import instructions.StructInstantiation;
import instructions.StructValue;
import instructions.StructAssignment;
import instructions.Method;
import instructions.StartWith;

//expresiones
import expressions.Native;
import expressions.Arithmetic;
import expressions.Relational;
import expressions.Logical;
import expressions.VariableAccess;
import expressions.TypeCasting;
import expressions.Round;
import expressions.VectorAccess;
import expressions.Length;
import expressions.Remove;
import expressions.Find;
import expressions.ToString;
import expressions.StructAccess;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<exceptions.Error> parserErrors = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, CARACTER, ENTERO, DECIMAL, ID;
terminal UMENOS, POT, EQUALS, DIF, MENOR_IGUAL, MAYOR_IGUAL, CASTEO_PREC;
terminal KW_CONST, KW_VAR, KW_INT, KW_DOUBLE, KW_BOOL, KW_CHAR, KW_STRING, KW_VOID; 
terminal KW_IF, KW_ELSE, KW_MATCH, KW_WHILE, KW_FOR, KW_DO, KW_BREAK, KW_CONTINUE, KW_PRINTLN, KW_TRUE, KW_FALSE;
terminal KW_ROUND, KW_LENGTH, KW_FIND, KW_TO_STRING;
terminal KW_LIST, KW_NEW, KW_APPEND, KW_REMOVE;
terminal KW_STRUCT, KW_START_WITH;
terminal MAS, MENOS, MULT, DIV, MOD, IGUAL, MENOR_QUE, MAYOR_QUE, OR, AND, XOR, NOT;
terminal PAR_IZQ, PAR_DER, LLAVE_IZQ, LLAVE_DER, CORCHETE_IZQ, CORCHETE_DER, PUNTO, PUNTO_COMA, DOS_PUNTOS, GUION_BAJO, COMA;

//no terminales
nonterminal LinkedList<Instruction> INICIO, INSTRUCCIONES, DEFAULT_MATCH, LISTA_VALORES_V1D;
nonterminal LinkedList<CaseMatch> CASOS_MATCH;
nonterminal LinkedList<LinkedList<Instruction>> LISTA_VALORES_V2D;
nonterminal CaseMatch CASO_MATCH;
nonterminal LinkedList<StructField> LISTA_STRUCT;
nonterminal StructField CAMPO_STRUCT;
nonterminal LinkedList<StructValue> LISTA_VALORES_STRUCT;
nonterminal StructValue VALOR_STRUCT;
nonterminal Type TIPO;
nonterminal MutabilityType MUTABILIDAD;
nonterminal Instruction INSTRUCCION;
nonterminal Instruction EXPRESION;
nonterminal Instruction PRINTLN, DECLARACION, ASIGNACION, SENTENCIA_IF, SENTENCIA_MATCH, CASTEO, INCREMENTO_DECREMENTO;
nonterminal Instruction SENTENCIA_WHILE, SENTENCIA_DO_WHILE, SENTENCIA_FOR, ACTUALIZA_FOR, SENTENCIA_BREAK, SENTENCIA_CONTINUE;
nonterminal Instruction DECLARACION_VECTORES_1D, ASIGNACION_VECTORES_1D, DECLARACION_VECTORES_2D, ASIGNACION_VECTORES_2D;
nonterminal Instruction DECLARACION_LISTAS_DINAMICAS, AGREGAR_VALOR_LISTA, QUITAR_VALOR_LISTA;
nonterminal Instruction DECLARACION_STRUCT, INSTANCIACION_STRUCT, ASIGNACION_STRUCT;
nonterminal Instruction ROUND, LENGTH, FIND, TO_STRING;
nonterminal Instruction METODO;
nonterminal LinkedList<HashMap> PARAMETROS;
nonterminal Instruction START_WITH;
nonterminal LinkedList<Instruction> PARAMETROS_LLAMADA;

//precedencia
precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left EQUALS, DIF, MENOR_QUE, MENOR_IGUAL, MAYOR_QUE, MAYOR_IGUAL; 
precedence left MAS, MENOS;
precedence left MULT, DIV, MOD;
precedence nonassoc POT;
precedence right UMENOS, CASTEO_PREC;

start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                     {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= PRINTLN:a PUNTO_COMA        {:   RESULT = a;   :}
              | DECLARACION:a PUNTO_COMA    {:   RESULT = a;   :}
              | DECLARACION_VECTORES_1D:a PUNTO_COMA  {:   RESULT = a;   :}
              | DECLARACION_VECTORES_2D:a PUNTO_COMA  {:   RESULT = a;   :}
              | DECLARACION_LISTAS_DINAMICAS:a PUNTO_COMA   {:   RESULT = a;   :}
              | DECLARACION_STRUCT:a PUNTO_COMA      {:   RESULT = a;   :}
              | INSTANCIACION_STRUCT:a PUNTO_COMA    {:   RESULT = a;   :} 
              | ASIGNACION:a PUNTO_COMA     {:   RESULT = a;   :}
              | ASIGNACION_VECTORES_1D:a PUNTO_COMA   {:   RESULT = a;   :}
              | ASIGNACION_VECTORES_2D:a PUNTO_COMA   {:   RESULT = a;   :}
              | ASIGNACION_STRUCT:a PUNTO_COMA    {:   RESULT = a;   :}
              | AGREGAR_VALOR_LISTA:a PUNTO_COMA  {:   RESULT = a;   :}
              | INCREMENTO_DECREMENTO:a PUNTO_COMA    {:   RESULT = a;   :}
              | SENTENCIA_IF:a              {:   RESULT = a;   :}
              | SENTENCIA_MATCH:a           {:   RESULT = a;   :}
              | SENTENCIA_WHILE:a           {:   RESULT = a;   :}
              | SENTENCIA_FOR:a             {:   RESULT = a;   :}
              | SENTENCIA_DO_WHILE:a PUNTO_COMA       {:   RESULT = a;   :}
              | SENTENCIA_BREAK:a PUNTO_COMA          {:   RESULT = a;   :}
              | SENTENCIA_CONTINUE:a PUNTO_COMA       {:   RESULT = a;   :}
              | METODO:a                              {:   RESULT = a;   :}
              | START_WITH:a PUNTO_COMA               {:   RESULT = a;   :}
              | error PUNTO_COMA
              | error 
;

EXPRESION ::= MENOS EXPRESION:a               {:   RESULT = new Arithmetic(a, Operators.NEGACION, aleft, aright );   :}%prec UMENOS
            | EXPRESION:a IGUAL IGUAL EXPRESION:b   {:   RESULT = new Relational(a, b, Operators.IGUALACION, aleft, aright);   :}%prec EQUALS
            | CASTEO:a      {:   RESULT = a;  :}
            | EXPRESION:a MULT MULT EXPRESION:b  {:   RESULT = new Arithmetic(a, b, Operators.POTENCIA, aleft, aright );   :}%prec POT
            | EXPRESION:a MULT EXPRESION:b    {:   RESULT = new Arithmetic(a, b, Operators.MULTIPLICACION, aleft, aright );   :}
            | EXPRESION:a DIV EXPRESION:b     {:   RESULT = new Arithmetic(a, b, Operators.DIVISION, aleft, aright );   :}
            | EXPRESION:a MOD EXPRESION:b     {:   RESULT = new Arithmetic(a, b, Operators.MODULO, aleft, aright );   :}
            | EXPRESION:a MAS EXPRESION:b     {:   RESULT = new Arithmetic(a, b, Operators.SUMA, aleft, aright );   :}
            | EXPRESION:a MENOS EXPRESION:b   {:   RESULT = new Arithmetic(a, b, Operators.RESTA, aleft, aright );   :}
            | PAR_IZQ EXPRESION:a PAR_DER     {:   RESULT = a; :}
            | EXPRESION:a NOT IGUAL EXPRESION:b     {:   RESULT = new Relational(a, b, Operators.DIFERENCIACION, aleft, aright);   :}%prec DIF
            | EXPRESION:a MENOR_QUE EXPRESION:b     {:   RESULT = new Relational(a, b, Operators.MENOR_QUE, aleft, aright);   :}
            | EXPRESION:a MENOR_QUE IGUAL EXPRESION:b   {:   RESULT = new Relational(a, b, Operators.MENOR_IGUAL, aleft, aright);   :}%prec MENOR_IGUAL
            | EXPRESION:a MAYOR_QUE EXPRESION:b     {:   RESULT = new Relational(a, b, Operators.MAYOR_QUE, aleft, aright);   :}
            | EXPRESION:a MAYOR_QUE IGUAL EXPRESION:b   {:   RESULT = new Relational(a, b, Operators.MAYOR_IGUAL, aleft, aright);   :}%prec MAYOR_IGUAL
            | NOT EXPRESION:a   {:   RESULT = new Logical(a, Operators.NOT, aleft, aright);   :}
            | EXPRESION:a XOR EXPRESION:b   {:   RESULT = new Logical(a, b, Operators.XOR, aleft, aright);   :}
            | EXPRESION:a AND EXPRESION:b   {:   RESULT = new Logical(a, b, Operators.AND, aleft, aright);   :}
            | EXPRESION:a OR EXPRESION:b    {:   RESULT = new Logical(a, b, Operators.OR, aleft, aright);   :}
            | ENTERO:a      {:   RESULT = new Native(Integer.parseInt(a), new Type(DataType.ENTERO), aleft, aright);   :}
            | DECIMAL:a     {:   RESULT = new Native(new Double(a), new Type(DataType.DECIMAL), aleft, aright);   :}
            | CADENA:a      {:   RESULT = new Native(a, new Type(DataType.CADENA), aleft, aright);   :}
            | CARACTER:a    {:   RESULT = new Native(a, new Type(DataType.CARACTER), aleft, aright);   :}
            | KW_TRUE:a     {:   RESULT = new Native(true, new Type(DataType.BOOLEANO), aleft, aright);   :}
            | KW_FALSE:a    {:   RESULT = new Native(false, new Type(DataType.BOOLEANO), aleft, aright);   :}
            | ID:a          {:   RESULT = new VariableAccess(a, aleft, aright);   :}
            | ID:a CORCHETE_IZQ EXPRESION:b CORCHETE_DER {:   RESULT = new VectorAccess(a, b, aleft, aright);   :}
            | ID:a CORCHETE_IZQ EXPRESION:b CORCHETE_DER CORCHETE_IZQ EXPRESION:c CORCHETE_DER {:   RESULT = new VectorAccess(a, b, c, aleft, aright);   :}
            | QUITAR_VALOR_LISTA:a    {:  RESULT = a;   :}
            | ID:a PUNTO ID:b         {:   RESULT = new StructAccess(a, b, aleft, aright);   :}
            | ROUND:a       {:  RESULT = a;   :}
            | TO_STRING:a   {:  RESULT = a;   :}
            | LENGTH:a      {:  RESULT = a;   :}
            | FIND:a        {:  RESULT = a;   :}
;

TIPO ::= KW_INT         {:   RESULT = new Type(DataType.ENTERO);     :}
       | KW_DOUBLE      {:   RESULT = new Type(DataType.DECIMAL);    :}
       | KW_BOOL        {:   RESULT = new Type(DataType.BOOLEANO);   :}
       | KW_CHAR        {:   RESULT = new Type(DataType.CARACTER);   :}
       | KW_STRING      {:   RESULT = new Type(DataType.CADENA);     :}
       | KW_STRUCT      {:   RESULT = new Type(DataType.STRUCT);     :}
       | KW_VOID        {:   RESULT = new Type(DataType.VOID);       :}
;

MUTABILIDAD ::= KW_CONST         {:   RESULT = MutabilityType.CONST;   :}
              | KW_VAR           {:   RESULT = MutabilityType.VAR;   :}
;

DECLARACION ::= MUTABILIDAD:a ID:b DOS_PUNTOS TIPO:c    {:   RESULT = new Declaration(a, b, c, aleft, aright);   :}
              | MUTABILIDAD:a ID:b DOS_PUNTOS TIPO:c IGUAL EXPRESION:d    {:   RESULT = new Declaration(a, b, d, c, aleft, aright);   :}
;

DECLARACION_VECTORES_1D ::= MUTABILIDAD:a ID:b DOS_PUNTOS TIPO:c CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V1D:d CORCHETE_DER
{:   RESULT = new VectorDeclaration(a, b, c, d, aleft, aright );   :}
;

DECLARACION_VECTORES_2D ::= MUTABILIDAD:a ID:b DOS_PUNTOS TIPO:c CORCHETE_IZQ CORCHETE_DER CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V2D:d CORCHETE_DER
{:   RESULT = new VectorDeclaration(a, b, c, d, true, aleft, aright );   :}
;

DECLARACION_LISTAS_DINAMICAS ::= KW_LIST MENOR_QUE TIPO:a MAYOR_QUE ID:b IGUAL KW_NEW KW_LIST PAR_IZQ PAR_DER
{:   RESULT = new DynamicListDeclaration(b, a, aleft, aright );   :}
;

DECLARACION_STRUCT ::= KW_STRUCT LLAVE_IZQ LISTA_STRUCT:a LLAVE_DER ID:b      {:   RESULT = new StructDeclaration(a, b, aleft, aright );   :}
;

INSTANCIACION_STRUCT ::= MUTABILIDAD:a ID:b DOS_PUNTOS ID:c IGUAL LLAVE_IZQ LISTA_VALORES_STRUCT:d LLAVE_DER
{:   RESULT = new StructInstantiation(a, b, c, d, aleft, aright );   :}
;

LISTA_VALORES_V1D ::= LISTA_VALORES_V1D:a COMA EXPRESION:b  {:   RESULT = a; RESULT.add(b); :}
                   | EXPRESION:a                            {:   RESULT = new LinkedList<>(); RESULT.add(a);   :}
;

LISTA_VALORES_V2D ::= LISTA_VALORES_V2D:a COMA CORCHETE_IZQ LISTA_VALORES_V1D:b CORCHETE_DER    {:   RESULT = a; RESULT.add(b); :}
                    | CORCHETE_IZQ LISTA_VALORES_V1D:a CORCHETE_DER                             {:   RESULT = new LinkedList<>(); RESULT.add(a);   :}
;

LISTA_STRUCT ::= LISTA_STRUCT:a CAMPO_STRUCT:b PUNTO_COMA          {:   RESULT = a; RESULT.add(b); :}
               | CAMPO_STRUCT:a PUNTO_COMA                         {:   RESULT = new LinkedList<>(); RESULT.add(a);   :}
;

CAMPO_STRUCT ::= ID:a DOS_PUNTOS TIPO:b     {:   RESULT = new StructField(a, b, aleft, aright);   :}
            |    ID:a DOS_PUNTOS ID:b       {:   RESULT = new StructField(a, b, aleft, aright);   :}
;

LISTA_VALORES_STRUCT ::= LISTA_VALORES_STRUCT:a COMA VALOR_STRUCT:b     {:   RESULT = a; RESULT.add(b); :}
                       | VALOR_STRUCT:a                                 {:   RESULT = new LinkedList<>(); RESULT.add(a);   :}
;

VALOR_STRUCT ::= ID:a DOS_PUNTOS EXPRESION:b    {:   RESULT = new StructValue(a, b, aleft, aright);   :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b    {:   RESULT = new VariableAssignment(a, b, aleft, aright);   :}
;

ASIGNACION_VECTORES_1D ::= ID:a CORCHETE_IZQ EXPRESION:b CORCHETE_DER IGUAL EXPRESION:c    {:   RESULT = new VectorAssignment(a, b, c, aleft, aright);   :}
;

ASIGNACION_VECTORES_2D ::= ID:a CORCHETE_IZQ EXPRESION:b CORCHETE_DER CORCHETE_IZQ EXPRESION:c CORCHETE_DER IGUAL EXPRESION:d    {:   RESULT = new VectorAssignment(a, b, c, d, aleft, aright);   :}
;

ASIGNACION_STRUCT ::= ID:a PUNTO ID:b IGUAL EXPRESION:c {:   RESULT = new StructAssignment(a, b, c, aleft, aright);   :}
;

CASTEO ::= PAR_IZQ TIPO:a PAR_DER EXPRESION:b         {:   RESULT = new TypeCasting(a, b, aleft, aright);   :}%prec CASTEO_PREC
;

INCREMENTO_DECREMENTO ::= ID:a MAS MAS         {:   RESULT = new VariableAssignment(a, "Incremento", aleft, aright);   :}
                        | ID:a MENOS MENOS     {:   RESULT = new VariableAssignment(a, "Decremento", aleft, aright);   :}
;

AGREGAR_VALOR_LISTA ::= ID:a PUNTO KW_APPEND PAR_IZQ EXPRESION:b PAR_DER  {:   RESULT = new Append(a, b, aleft, aright);   :}
;

QUITAR_VALOR_LISTA ::= ID:a PUNTO KW_REMOVE PAR_IZQ EXPRESION:b PAR_DER  {:   RESULT = new Remove(a, b, aleft, aright);   :}
;

PRINTLN ::= KW_PRINTLN PAR_IZQ EXPRESION:a PAR_DER    {:   RESULT = new Print(a, aleft, aright);    :} 
;

ROUND ::= KW_ROUND PAR_IZQ EXPRESION:a PAR_DER        {:   RESULT = new Round(a, aleft, aright);    :}
;

LENGTH ::= KW_LENGTH PAR_IZQ EXPRESION:a PAR_DER      {:   RESULT = new Length(a, aleft, aright);    :}
;

TO_STRING ::= KW_TO_STRING PAR_IZQ EXPRESION:a PAR_DER           {:   RESULT = new ToString(a, aleft, aright);   :}
; 

FIND ::= ID:a PUNTO KW_FIND PAR_IZQ EXPRESION:b PAR_DER          {:   RESULT = new Find(a, b, aleft, aright);    :}
;

SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION:a PAR_DER LLAVE_IZQ INSTRUCCIONES:b LLAVE_DER  {:   RESULT = new If(a, b, aleft, aright);   :}
               | KW_IF PAR_IZQ EXPRESION:a PAR_DER LLAVE_IZQ INSTRUCCIONES:b LLAVE_DER KW_ELSE LLAVE_IZQ INSTRUCCIONES:c LLAVE_DER  {:   RESULT = new If(a, b, c, aleft, aright);   :}
               | KW_IF PAR_IZQ EXPRESION:a PAR_DER LLAVE_IZQ INSTRUCCIONES:b LLAVE_DER KW_ELSE SENTENCIA_IF:c  {:   RESULT = new If(a, b, c, aleft, aright);   :}
;

SENTENCIA_MATCH ::= KW_MATCH EXPRESION:a LLAVE_IZQ CASOS_MATCH:b DEFAULT_MATCH:c LLAVE_DER  {:   RESULT = new Match(a, b, c, aleft, aright);   :}
                  | KW_MATCH EXPRESION:a LLAVE_IZQ CASOS_MATCH:b LLAVE_DER  {:   RESULT = new Match(a, b, aleft, aright);   :}
                  | KW_MATCH EXPRESION:a LLAVE_IZQ DEFAULT_MATCH:b LLAVE_DER    {:   RESULT = new Match(a, b, true, aleft, aright);   :}
;

CASOS_MATCH ::= CASOS_MATCH:a CASO_MATCH:b  {:   RESULT = a; RESULT.add(b); :}
              | CASO_MATCH:a                {:   RESULT = new LinkedList<>(); RESULT.add(a);   :}
;

CASO_MATCH ::= EXPRESION:a IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES:b LLAVE_DER    {:   RESULT = new CaseMatch(a, b, aleft, aright);   :}
;

DEFAULT_MATCH ::= GUION_BAJO IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES:a LLAVE_DER  {:   RESULT = a;   :}
;

SENTENCIA_WHILE ::= KW_WHILE PAR_IZQ EXPRESION:a PAR_DER LLAVE_IZQ INSTRUCCIONES:b LLAVE_DER    {:   RESULT = new While(a, b, aleft, aright);   :}
;

SENTENCIA_FOR ::= KW_FOR PAR_IZQ ASIGNACION:a PUNTO_COMA EXPRESION:b PUNTO_COMA ACTUALIZA_FOR:c PAR_DER LLAVE_IZQ INSTRUCCIONES:d LLAVE_DER
{:   RESULT = new For(a, b, c, d, aleft, aright );   :}
;

ACTUALIZA_FOR ::= ASIGNACION:a                  {:   RESULT = a;  :}
                | INCREMENTO_DECREMENTO:a       {:   RESULT = a;  :}
;

SENTENCIA_DO_WHILE ::= KW_DO LLAVE_IZQ INSTRUCCIONES:a LLAVE_DER KW_WHILE PAR_IZQ EXPRESION:b PAR_DER    {:   RESULT = new DoWhile(a, b, aleft, aright);   :}
;

SENTENCIA_BREAK ::= KW_BREAK:a          {:   RESULT = new Break(aleft, aright);   :}
;

SENTENCIA_CONTINUE ::= KW_CONTINUE:a    {:   RESULT = new Continue(aleft, aright);   :}
;

METODO ::= TIPO:a ID:b PAR_IZQ PARAMETROS:p PAR_DER LLAVE_IZQ INSTRUCCIONES:c LLAVE_DER   {:   RESULT = new Method(b, p, c, a, aleft, aright);   :}
         | TIPO:a ID:b PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES:c LLAVE_DER                {:   RESULT = new Method(b, new LinkedList<HashMap>(), c, a, aleft, aright);   :}
;

PARAMETROS ::= PARAMETROS:a COMA TIPO:b ID:c   {:  
                                                    RESULT = a;
                                                    var hm2= new HashMap<String, Object>();
                                                    hm2.put("id", c);
                                                    hm2.put("tipo", b);
                                                    RESULT.add(hm2);
                                                :}
             | TIPO:a ID:b                      {:  
                                                    RESULT = new LinkedList<HashMap>(); 
                                                    var hm = new HashMap<String, Object>();
                                                    hm.put("id",b);
                                                    hm.put("tipo", a);
                                                    RESULT.add(hm);
                                                :}
;

START_WITH ::= KW_START_WITH ID:a PAR_IZQ PARAMETROS_LLAMADA:b PAR_DER     {:   RESULT = new StartWith(a, b, aleft, aright );   :}
             | KW_START_WITH ID:a PAR_IZQ PAR_DER                          {:   RESULT = new StartWith(a, new LinkedList<Instruction>(), aleft, aright );   :}
;

PARAMETROS_LLAMADA ::= PARAMETROS_LLAMADA:a COMA EXPRESION:e    {:  
                                                                    RESULT = a;
                                                                    RESULT.add(e);
                                                                :}
                     | EXPRESION:a                              {:  
                                                                    RESULT = new LinkedList<Instruction>(); 
                                                                    RESULT.add(a);
                                                                :}
;