
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruction;
import symbol.Type;
import symbol.DataType;
import symbol.Operators;
import symbol.MutabilityType;
import instructions.Print;
import instructions.Declaration;
import instructions.VariableAssignment;
import instructions.If;
import instructions.Match;
import instructions.CaseMatch;
import instructions.While;
import instructions.For;
import instructions.DoWhile;
import instructions.Break;
import instructions.Continue;
import instructions.VectorDeclaration;
import instructions.VectorAssignment;
import instructions.DynamicListDeclaration;
import instructions.Append;
import instructions.StructDeclaration;
import instructions.StructField;
import instructions.StructInstantiation;
import instructions.StructValue;
import instructions.StructAssignment;
import expressions.Native;
import expressions.Arithmetic;
import expressions.Relational;
import expressions.Logical;
import expressions.VariableAccess;
import expressions.TypeCasting;
import expressions.Round;
import expressions.VectorAccess;
import expressions.Length;
import expressions.Remove;
import expressions.Find;
import expressions.ToString;
import expressions.StructAccess;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\003\000\002\020\004\000\002\020\006\000\002\020" +
    "\003\000\002\020\006\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\006\000\002\020\005\000\002" +
    "\020\006\000\002\020\005\000\002\020\006\000\002\020" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\006\000\002\020\011\000\002\020" +
    "\003\000\002\020\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\022\006\000\002\022\010\000\002\036\014" +
    "\000\002\040\016\000\002\042\014\000\002\045\007\000" +
    "\002\046\012\000\002\005\005\000\002\005\003\000\002" +
    "\007\007\000\002\007\005\000\002\011\005\000\002\011" +
    "\004\000\002\012\005\000\002\012\005\000\002\013\005" +
    "\000\002\013\003\000\002\014\005\000\002\023\005\000" +
    "\002\037\010\000\002\041\013\000\002\047\007\000\002" +
    "\026\006\000\002\027\005\000\002\027\005\000\002\043" +
    "\010\000\002\044\010\000\002\021\006\000\002\050\006" +
    "\000\002\051\006\000\002\053\006\000\002\052\010\000" +
    "\002\024\011\000\002\024\015\000\002\024\013\000\002" +
    "\025\010\000\002\025\007\000\002\025\007\000\002\006" +
    "\004\000\002\006\003\000\002\010\010\000\002\004\010" +
    "\000\002\030\011\000\002\032\015\000\002\033\003\000" +
    "\002\033\003\000\002\031\012\000\002\034\003\000\002" +
    "\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\036\003\033\010\031\020\015\021\046\027" +
    "\036\031\026\032\050\033\010\034\011\035\043\036\032" +
    "\037\020\046\045\052\051\001\002\000\004\076\u0127\001" +
    "\002\000\004\076\u0126\001\002\000\042\002\uffef\003\uffef" +
    "\010\uffef\020\uffef\021\uffef\027\uffef\031\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\046\uffef\052\uffef" +
    "\072\uffef\001\002\000\042\002\ufff0\003\ufff0\010\ufff0\020" +
    "\ufff0\021\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\046\ufff0\052\ufff0\072\ufff0\001" +
    "\002\000\004\067\u0118\001\002\000\004\071\u0111\001\002" +
    "\000\004\076\u0110\001\002\000\042\002\ufffe\003\ufffe\010" +
    "\ufffe\020\ufffe\021\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\046\ufffe\052\ufffe\072" +
    "\ufffe\001\002\000\004\076\u010f\001\002\000\004\010\uffbf" +
    "\001\002\000\040\002\000\003\033\010\031\020\015\021" +
    "\046\027\036\031\026\032\050\033\010\034\011\035\043" +
    "\036\032\037\020\046\045\052\051\001\002\000\004\076" +
    "\u010e\001\002\000\004\067\u010b\001\002\000\004\076\u010a" +
    "\001\002\000\004\076\u0109\001\002\000\004\076\u0108\001" +
    "\002\000\004\076\u0107\001\002\000\004\010\341\001\002" +
    "\000\034\004\101\005\110\006\115\007\103\010\107\040" +
    "\102\041\077\042\116\043\100\045\075\054\076\066\104" +
    "\067\112\001\002\000\004\076\312\001\002\000\004\076" +
    "\311\001\002\000\014\053\262\054\264\060\263\073\265" +
    "\075\261\001\002\000\004\076\uff8d\001\002\000\044\002" +
    "\uffe8\003\uffe8\010\uffe8\020\uffe8\021\uffe8\027\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\046" +
    "\uffe8\052\uffe8\072\uffe8\076\260\001\002\000\042\002\uffee" +
    "\003\uffee\010\uffee\020\uffee\021\uffee\027\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\046\uffee" +
    "\052\uffee\072\uffee\001\002\000\004\076\257\001\002\000" +
    "\004\067\244\001\002\000\004\076\243\001\002\000\042" +
    "\002\uffed\003\uffed\010\uffed\020\uffed\021\uffed\027\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\046\uffed\052\uffed\072\uffed\001\002\000\004\076\242\001" +
    "\002\000\004\076\241\001\002\000\004\076\uff8e\001\002" +
    "\000\004\076\240\001\002\000\004\061\227\001\002\000" +
    "\004\010\uffbe\001\002\000\004\002\226\001\002\000\004" +
    "\067\074\001\002\000\004\071\052\001\002\000\004\010" +
    "\053\001\002\000\004\077\063\001\002\000\006\010\053" +
    "\072\057\001\002\000\004\076\056\001\002\000\006\010" +
    "\uffb1\072\uffb1\001\002\000\004\010\062\001\002\000\004" +
    "\076\061\001\002\000\006\010\uffb2\072\uffb2\001\002\000" +
    "\004\076\uffb8\001\002\000\020\010\064\022\073\023\065" +
    "\024\066\025\067\026\071\052\070\001\002\000\004\076" +
    "\uffaf\001\002\000\014\060\uffc4\062\uffc4\070\uffc4\073\uffc4" +
    "\076\uffc4\001\002\000\014\060\uffc3\062\uffc3\070\uffc3\073" +
    "\uffc3\076\uffc3\001\002\000\014\060\uffc2\062\uffc2\070\uffc2" +
    "\073\uffc2\076\uffc2\001\002\000\014\060\uffc0\062\uffc0\070" +
    "\uffc0\073\uffc0\076\uffc0\001\002\000\014\060\uffc1\062\uffc1" +
    "\070\uffc1\073\uffc1\076\uffc1\001\002\000\004\076\uffb0\001" +
    "\002\000\014\060\uffc5\062\uffc5\070\uffc5\073\uffc5\076\uffc5" +
    "\001\002\000\034\004\101\005\110\006\115\007\103\010" +
    "\107\040\102\041\077\042\116\043\100\045\075\054\076" +
    "\066\104\067\112\001\002\000\004\067\223\001\002\000" +
    "\034\004\101\005\110\006\115\007\103\010\107\040\102" +
    "\041\077\042\116\043\100\045\075\054\076\066\104\067" +
    "\112\001\002\000\046\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\070\uffcf\071\uffcf\072\uffcf\074\uffcf\076\uffcf" +
    "\101\uffcf\001\002\000\004\067\217\001\002\000\046\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\074\uffd2\076\uffd2\101\uffd2\001\002\000\046" +
    "\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\074\uffd0\076\uffd0\101\uffd0\001\002\000" +
    "\046\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\074\uffd3\076\uffd3\101\uffd3\001\002" +
    "\000\034\004\101\005\110\006\115\007\103\010\107\040" +
    "\102\041\077\042\116\043\100\045\075\054\076\066\104" +
    "\067\112\001\002\000\046\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\070\uffe5\071\uffe5\072\uffe5\074\uffe5\076" +
    "\uffe5\101\uffe5\001\002\000\046\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\070\uffcb\071\uffcb\072\uffcb\074\uffcb" +
    "\076\uffcb\101\uffcb\001\002\000\052\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\064\uffce\065\uffce\066\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\177\074\uffce\075\176\076\uffce\101\uffce\001\002\000\046" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\074\uffd1\076\uffd1\101\uffd1\001\002\000" +
    "\046\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\074\uffc9\076\uffc9\101\uffc9\001\002" +
    "\000\050\004\101\005\110\006\115\007\103\010\107\022" +
    "\073\023\065\024\066\025\067\026\071\040\102\041\077" +
    "\042\116\043\100\045\075\052\070\054\076\066\104\067" +
    "\112\001\002\000\046\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\070\uffc7\071\uffc7\072\uffc7\074\uffc7\076\uffc7" +
    "\101\uffc7\001\002\000\046\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\070\uffc8\071\uffc8\072\uffc8\074\uffc8\076" +
    "\uffc8\101\uffc8\001\002\000\046\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\070\uffd4\071\uffd4\072\uffd4\074\uffd4" +
    "\076\uffd4\101\uffd4\001\002\000\004\067\166\001\002\000" +
    "\046\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\074\uffc6\076\uffc6\101\uffc6\001\002" +
    "\000\034\053\130\054\123\055\126\056\132\057\125\060" +
    "\133\061\131\062\124\063\135\064\121\065\122\066\134" +
    "\070\127\001\002\000\034\004\101\005\110\006\115\007" +
    "\103\010\107\040\102\041\077\042\116\043\100\045\075" +
    "\054\076\066\104\067\112\001\002\000\034\004\101\005" +
    "\110\006\115\007\103\010\107\040\102\041\077\042\116" +
    "\043\100\045\075\054\076\066\104\067\112\001\002\000" +
    "\034\004\101\005\110\006\115\007\103\010\107\040\102" +
    "\041\077\042\116\043\100\045\075\054\076\066\104\067" +
    "\112\001\002\000\036\004\101\005\110\006\115\007\103" +
    "\010\107\040\102\041\077\042\116\043\100\045\075\054" +
    "\076\060\160\066\104\067\112\001\002\000\034\004\101" +
    "\005\110\006\115\007\103\010\107\040\102\041\077\042" +
    "\116\043\100\045\075\054\076\066\104\067\112\001\002" +
    "\000\036\004\101\005\110\006\115\007\103\010\107\040" +
    "\102\041\077\042\116\043\100\045\075\054\076\055\154" +
    "\066\104\067\112\001\002\000\004\071\150\001\002\000" +
    "\034\004\101\005\110\006\115\007\103\010\107\040\102" +
    "\041\077\042\116\043\100\045\075\054\076\066\104\067" +
    "\112\001\002\000\036\004\101\005\110\006\115\007\103" +
    "\010\107\040\102\041\077\042\116\043\100\045\075\054" +
    "\076\060\144\066\104\067\112\001\002\000\034\004\101" +
    "\005\110\006\115\007\103\010\107\040\102\041\077\042" +
    "\116\043\100\045\075\054\076\066\104\067\112\001\002" +
    "\000\004\060\141\001\002\000\004\060\137\001\002\000" +
    "\034\004\101\005\110\006\115\007\103\010\107\040\102" +
    "\041\077\042\116\043\100\045\075\054\076\066\104\067" +
    "\112\001\002\000\046\053\130\054\123\055\126\056\132" +
    "\057\125\060\uffd5\061\131\062\124\063\uffd5\064\121\065" +
    "\122\066\134\070\uffd5\071\uffd5\072\uffd5\074\uffd5\076\uffd5" +
    "\101\uffd5\001\002\000\034\004\101\005\110\006\115\007" +
    "\103\010\107\040\102\041\077\042\116\043\100\045\075" +
    "\054\076\066\104\067\112\001\002\000\046\053\130\054" +
    "\123\055\126\056\132\057\125\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\071\uffdd\072" +
    "\uffdd\074\uffdd\076\uffdd\101\uffdd\001\002\000\034\004\101" +
    "\005\110\006\115\007\103\010\107\040\102\041\077\042" +
    "\116\043\100\045\075\054\076\066\104\067\112\001\002" +
    "\000\046\053\130\054\123\055\126\056\132\057\125\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\070\uffe6\071\uffe6\072\uffe6\074\uffe6\076\uffe6\101\uffe6\001" +
    "\002\000\046\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2" +
    "\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\074\uffe2\076\uffe2\101\uffe2" +
    "\001\002\000\034\004\101\005\110\006\115\007\103\010" +
    "\107\040\102\041\077\042\116\043\100\045\075\054\076" +
    "\066\104\067\112\001\002\000\046\053\130\054\123\055" +
    "\126\056\132\057\125\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\070\uffdc\071\uffdc\072\uffdc\074" +
    "\uffdc\076\uffdc\101\uffdc\001\002\000\046\053\130\054\123" +
    "\055\126\056\132\057\125\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\074\uffdb\076\uffdb\101\uffdb\001\002\000\046\053\uffe0\054" +
    "\uffe0\055\126\056\132\057\125\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\065\uffe0\066\uffe0\070\uffe0\071\uffe0\072" +
    "\uffe0\074\uffe0\076\uffe0\101\uffe0\001\002\000\036\003\033" +
    "\010\031\020\015\021\046\027\036\031\026\032\050\033" +
    "\010\034\011\035\043\036\032\037\020\046\045\052\051" +
    "\001\002\000\040\003\033\010\031\020\015\021\046\027" +
    "\036\031\026\032\050\033\010\034\011\035\043\036\032" +
    "\037\020\046\045\052\051\072\153\001\002\000\042\002" +
    "\uffff\003\uffff\010\uffff\020\uffff\021\uffff\027\uffff\031\uffff" +
    "\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\046" +
    "\uffff\052\uffff\072\uffff\001\002\000\042\002\uff93\003\uff93" +
    "\010\uff93\020\uff93\021\uff93\027\uff93\031\uff93\032\uff93\033" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\046\uff93\052\uff93" +
    "\072\uff93\001\002\000\034\004\101\005\110\006\115\007" +
    "\103\010\107\040\102\041\077\042\116\043\100\045\075" +
    "\054\076\066\104\067\112\001\002\000\046\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3\071\uffe3\072" +
    "\uffe3\074\uffe3\076\uffe3\101\uffe3\001\002\000\046\053\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\074\uffe4\076\uffe4\101\uffe4\001\002\000\046\053" +
    "\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\070\uffe1\071" +
    "\uffe1\072\uffe1\074\uffe1\076\uffe1\101\uffe1\001\002\000\034" +
    "\004\101\005\110\006\115\007\103\010\107\040\102\041" +
    "\077\042\116\043\100\045\075\054\076\066\104\067\112" +
    "\001\002\000\046\053\130\054\123\055\126\056\132\057" +
    "\125\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\065\uffda" +
    "\066\uffda\070\uffda\071\uffda\072\uffda\074\uffda\076\uffda\101" +
    "\uffda\001\002\000\046\053\130\054\123\055\126\056\132" +
    "\057\125\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\070\uffd9\071\uffd9\072\uffd9\074\uffd9\076\uffd9" +
    "\101\uffd9\001\002\000\046\053\uffdf\054\uffdf\055\126\056" +
    "\132\057\125\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf" +
    "\065\uffdf\066\uffdf\070\uffdf\071\uffdf\072\uffdf\074\uffdf\076" +
    "\uffdf\101\uffdf\001\002\000\046\053\130\054\123\055\126" +
    "\056\132\057\125\060\uffd7\061\131\062\124\063\uffd7\064" +
    "\uffd7\065\uffd7\066\134\070\uffd7\071\uffd7\072\uffd7\074\uffd7" +
    "\076\uffd7\101\uffd7\001\002\000\046\053\130\054\123\055" +
    "\126\056\132\057\125\060\uffd6\061\131\062\124\063\uffd6" +
    "\064\uffd6\065\122\066\134\070\uffd6\071\uffd6\072\uffd6\074" +
    "\uffd6\076\uffd6\101\uffd6\001\002\000\034\004\101\005\110" +
    "\006\115\007\103\010\107\040\102\041\077\042\116\043" +
    "\100\045\075\054\076\066\104\067\112\001\002\000\034" +
    "\053\130\054\123\055\126\056\132\057\125\060\133\061" +
    "\131\062\124\063\135\064\121\065\122\066\134\070\170" +
    "\001\002\000\046\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\070\uffa1\071\uffa1\072\uffa1\074\uffa1\076\uffa1\101" +
    "\uffa1\001\002\000\004\070\174\001\002\000\034\053\130" +
    "\054\123\055\126\056\132\057\125\060\133\061\131\062" +
    "\124\063\135\064\121\065\122\066\134\070\173\001\002" +
    "\000\046\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\070\uffde\071\uffde\072\uffde\074\uffde\076\uffde\101\uffde\001" +
    "\002\000\034\004\101\005\110\006\115\007\103\010\107" +
    "\040\102\041\077\042\116\043\100\045\075\054\076\066" +
    "\104\067\112\001\002\000\046\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\070\uffa7\071\uffa7\072\uffa7\074\uffa7" +
    "\076\uffa7\101\uffa7\001\002\000\010\010\205\044\207\051" +
    "\206\001\002\000\034\004\101\005\110\006\115\007\103" +
    "\010\107\040\102\041\077\042\116\043\100\045\075\054" +
    "\076\066\104\067\112\001\002\000\034\053\130\054\123" +
    "\055\126\056\132\057\125\060\133\061\131\062\124\063" +
    "\135\064\121\065\122\066\134\074\201\001\002\000\050" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd" +
    "\071\uffcd\072\uffcd\073\202\074\uffcd\076\uffcd\101\uffcd\001" +
    "\002\000\034\004\101\005\110\006\115\007\103\010\107" +
    "\040\102\041\077\042\116\043\100\045\075\054\076\066" +
    "\104\067\112\001\002\000\034\053\130\054\123\055\126" +
    "\056\132\057\125\060\133\061\131\062\124\063\135\064" +
    "\121\065\122\066\134\074\204\001\002\000\046\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\070\uffcc\071\uffcc" +
    "\072\uffcc\074\uffcc\076\uffcc\101\uffcc\001\002\000\046\053" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\070\uffca\071" +
    "\uffca\072\uffca\074\uffca\076\uffca\101\uffca\001\002\000\004" +
    "\067\213\001\002\000\004\067\210\001\002\000\034\004" +
    "\101\005\110\006\115\007\103\010\107\040\102\041\077" +
    "\042\116\043\100\045\075\054\076\066\104\067\112\001" +
    "\002\000\034\053\130\054\123\055\126\056\132\057\125" +
    "\060\133\061\131\062\124\063\135\064\121\065\122\066" +
    "\134\070\212\001\002\000\046\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\070\uff9e\071\uff9e\072\uff9e\074\uff9e" +
    "\076\uff9e\101\uff9e\001\002\000\034\004\101\005\110\006" +
    "\115\007\103\010\107\040\102\041\077\042\116\043\100" +
    "\045\075\054\076\066\104\067\112\001\002\000\034\053" +
    "\130\054\123\055\126\056\132\057\125\060\133\061\131" +
    "\062\124\063\135\064\121\065\122\066\134\070\215\001" +
    "\002\000\046\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\074\uffa3\076\uffa3\101\uffa3" +
    "\001\002\000\046\053\130\054\123\055\126\056\132\057" +
    "\125\060\uffd8\061\131\062\124\063\uffd8\064\uffd8\065\uffd8" +
    "\066\134\070\uffd8\071\uffd8\072\uffd8\074\uffd8\076\uffd8\101" +
    "\uffd8\001\002\000\034\004\101\005\110\006\115\007\103" +
    "\010\107\040\102\041\077\042\116\043\100\045\075\054" +
    "\076\066\104\067\112\001\002\000\034\053\130\054\123" +
    "\055\126\056\132\057\125\060\133\061\131\062\124\063" +
    "\135\064\121\065\122\066\134\070\221\001\002\000\046" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\070\uffa0" +
    "\071\uffa0\072\uffa0\074\uffa0\076\uffa0\101\uffa0\001\002\000" +
    "\046\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\070" +
    "\uffe7\071\uffe7\072\uffe7\074\uffe7\076\uffe7\101\uffe7\001\002" +
    "\000\034\004\101\005\110\006\115\007\103\010\107\040" +
    "\102\041\077\042\116\043\100\045\075\054\076\066\104" +
    "\067\112\001\002\000\034\053\130\054\123\055\126\056" +
    "\132\057\125\060\133\061\131\062\124\063\135\064\121" +
    "\065\122\066\134\070\225\001\002\000\046\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\070\uff9f\071\uff9f\072" +
    "\uff9f\074\uff9f\076\uff9f\101\uff9f\001\002\000\004\002\001" +
    "\001\002\000\016\022\073\023\065\024\066\025\067\026" +
    "\071\052\070\001\002\000\004\062\231\001\002\000\004" +
    "\010\232\001\002\000\004\060\233\001\002\000\004\047" +
    "\234\001\002\000\004\046\235\001\002\000\004\067\236" +
    "\001\002\000\004\070\237\001\002\000\004\076\uffb9\001" +
    "\002\000\042\002\ufff9\003\ufff9\010\ufff9\020\ufff9\021\ufff9" +
    "\027\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\046\ufff9\052\ufff9\072\ufff9\001\002\000\042" +
    "\002\ufffc\003\ufffc\010\ufffc\020\ufffc\021\ufffc\027\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc" +
    "\046\ufffc\052\ufffc\072\ufffc\001\002\000\042\002\ufff5\003" +
    "\ufff5\010\ufff5\020\ufff5\021\ufff5\027\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\046\ufff5\052" +
    "\ufff5\072\ufff5\001\002\000\042\002\ufff6\003\ufff6\010\ufff6" +
    "\020\ufff6\021\ufff6\027\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\046\ufff6\052\ufff6\072\ufff6" +
    "\001\002\000\034\004\101\005\110\006\115\007\103\010" +
    "\107\040\102\041\077\042\116\043\100\045\075\054\076" +
    "\066\104\067\112\001\002\000\034\053\130\054\123\055" +
    "\126\056\132\057\125\060\133\061\131\062\124\063\135" +
    "\064\121\065\122\066\134\070\246\001\002\000\004\071" +
    "\247\001\002\000\036\003\033\010\031\020\015\021\046" +
    "\027\036\031\026\032\050\033\010\034\011\035\043\036" +
    "\032\037\020\046\045\052\051\001\002\000\040\003\033" +
    "\010\031\020\015\021\046\027\036\031\026\032\050\033" +
    "\010\034\011\035\043\036\032\037\020\046\045\052\051" +
    "\072\251\001\002\000\044\002\uff9d\003\uff9d\010\uff9d\020" +
    "\uff9d\021\uff9d\027\uff9d\030\252\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\046\uff9d\052\uff9d\072" +
    "\uff9d\001\002\000\006\027\036\071\254\001\002\000\042" +
    "\002\uff9b\003\uff9b\010\uff9b\020\uff9b\021\uff9b\027\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b" +
    "\046\uff9b\052\uff9b\072\uff9b\001\002\000\036\003\033\010" +
    "\031\020\015\021\046\027\036\031\026\032\050\033\010" +
    "\034\011\035\043\036\032\037\020\046\045\052\051\001" +
    "\002\000\040\003\033\010\031\020\015\021\046\027\036" +
    "\031\026\032\050\033\010\034\011\035\043\036\032\037" +
    "\020\046\045\052\051\072\256\001\002\000\042\002\uff9c" +
    "\003\uff9c\010\uff9c\020\uff9c\021\uff9c\027\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\046\uff9c" +
    "\052\uff9c\072\uff9c\001\002\000\042\002\ufffb\003\ufffb\010" +
    "\ufffb\020\ufffb\021\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\046\ufffb\052\ufffb\072" +
    "\ufffb\001\002\000\042\002\uffe9\003\uffe9\010\uffe9\020\uffe9" +
    "\021\uffe9\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\046\uffe9\052\uffe9\072\uffe9\001\002" +
    "\000\006\010\302\050\303\001\002\000\004\053\301\001" +
    "\002\000\034\004\101\005\110\006\115\007\103\010\107" +
    "\040\102\041\077\042\116\043\100\045\075\054\076\066" +
    "\104\067\112\001\002\000\004\054\277\001\002\000\034" +
    "\004\101\005\110\006\115\007\103\010\107\040\102\041" +
    "\077\042\116\043\100\045\075\054\076\066\104\067\112" +
    "\001\002\000\034\053\130\054\123\055\126\056\132\057" +
    "\125\060\133\061\131\062\124\063\135\064\121\065\122" +
    "\066\134\074\267\001\002\000\006\060\270\073\271\001" +
    "\002\000\034\004\101\005\110\006\115\007\103\010\107" +
    "\040\102\041\077\042\116\043\100\045\075\054\076\066" +
    "\104\067\112\001\002\000\034\004\101\005\110\006\115" +
    "\007\103\010\107\040\102\041\077\042\116\043\100\045" +
    "\075\054\076\066\104\067\112\001\002\000\034\053\130" +
    "\054\123\055\126\056\132\057\125\060\133\061\131\062" +
    "\124\063\135\064\121\065\122\066\134\074\273\001\002" +
    "\000\004\060\274\001\002\000\034\004\101\005\110\006" +
    "\115\007\103\010\107\040\102\041\077\042\116\043\100" +
    "\045\075\054\076\066\104\067\112\001\002\000\034\053" +
    "\130\054\123\055\126\056\132\057\125\060\133\061\131" +
    "\062\124\063\135\064\121\065\122\066\134\076\uffa9\001" +
    "\002\000\034\053\130\054\123\055\126\056\132\057\125" +
    "\060\133\061\131\062\124\063\135\064\121\065\122\066" +
    "\134\076\uffaa\001\002\000\006\070\uffa5\076\uffa5\001\002" +
    "\000\036\053\130\054\123\055\126\056\132\057\125\060" +
    "\133\061\131\062\124\063\135\064\121\065\122\066\134" +
    "\070\uffab\076\uffab\001\002\000\006\070\uffa6\076\uffa6\001" +
    "\002\000\004\060\307\001\002\000\004\067\304\001\002" +
    "\000\034\004\101\005\110\006\115\007\103\010\107\040" +
    "\102\041\077\042\116\043\100\045\075\054\076\066\104" +
    "\067\112\001\002\000\034\053\130\054\123\055\126\056" +
    "\132\057\125\060\133\061\131\062\124\063\135\064\121" +
    "\065\122\066\134\070\306\001\002\000\004\076\uffa4\001" +
    "\002\000\034\004\101\005\110\006\115\007\103\010\107" +
    "\040\102\041\077\042\116\043\100\045\075\054\076\066" +
    "\104\067\112\001\002\000\034\053\130\054\123\055\126" +
    "\056\132\057\125\060\133\061\131\062\124\063\135\064" +
    "\121\065\122\066\134\076\uffa8\001\002\000\042\002\ufff3" +
    "\003\ufff3\010\ufff3\020\ufff3\021\ufff3\027\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\046\ufff3" +
    "\052\ufff3\072\ufff3\001\002\000\042\002\uffeb\003\uffeb\010" +
    "\uffeb\020\uffeb\021\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\046\uffeb\052\uffeb\072" +
    "\uffeb\001\002\000\034\053\130\054\123\055\126\056\132" +
    "\057\125\060\133\061\131\062\124\063\135\064\121\065" +
    "\122\066\134\071\314\001\002\000\036\004\101\005\110" +
    "\006\115\007\103\010\107\040\102\041\077\042\116\043" +
    "\100\045\075\054\076\066\104\067\112\100\316\001\002" +
    "\000\040\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\045\uff96\054\uff96\066\uff96" +
    "\067\uff96\072\uff96\100\uff96\001\002\000\004\060\334\001" +
    "\002\000\040\004\101\005\110\006\115\007\103\010\107" +
    "\040\102\041\077\042\116\043\100\045\075\054\076\066" +
    "\104\067\112\072\331\100\316\001\002\000\004\072\327" +
    "\001\002\000\032\053\130\054\123\055\126\056\132\057" +
    "\125\060\322\061\131\062\124\063\135\064\121\065\122" +
    "\066\134\001\002\000\006\060\141\062\323\001\002\000" +
    "\004\071\324\001\002\000\036\003\033\010\031\020\015" +
    "\021\046\027\036\031\026\032\050\033\010\034\011\035" +
    "\043\036\032\037\020\046\045\052\051\001\002\000\040" +
    "\003\033\010\031\020\015\021\046\027\036\031\026\032" +
    "\050\033\010\034\011\035\043\036\032\037\020\046\045" +
    "\052\051\072\326\001\002\000\040\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\045\uff95\054\uff95\066\uff95\067\uff95\072\uff95\100\uff95\001" +
    "\002\000\042\002\uff98\003\uff98\010\uff98\020\uff98\021\uff98" +
    "\027\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\046\uff98\052\uff98\072\uff98\001\002\000\040" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\045\uff97\054\uff97\066\uff97\067\uff97" +
    "\072\uff97\100\uff97\001\002\000\042\002\uff99\003\uff99\010" +
    "\uff99\020\uff99\021\uff99\027\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\036\uff99\037\uff99\046\uff99\052\uff99\072" +
    "\uff99\001\002\000\004\072\333\001\002\000\042\002\uff9a" +
    "\003\uff9a\010\uff9a\020\uff9a\021\uff9a\027\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\046\uff9a" +
    "\052\uff9a\072\uff9a\001\002\000\004\062\335\001\002\000" +
    "\004\071\336\001\002\000\036\003\033\010\031\020\015" +
    "\021\046\027\036\031\026\032\050\033\010\034\011\035" +
    "\043\036\032\037\020\046\045\052\051\001\002\000\040" +
    "\003\033\010\031\020\015\021\046\027\036\031\026\032" +
    "\050\033\010\034\011\035\043\036\032\037\020\046\045" +
    "\052\051\072\340\001\002\000\004\072\uff94\001\002\000" +
    "\004\077\342\001\002\000\020\010\343\022\073\023\065" +
    "\024\066\025\067\026\071\052\070\001\002\000\004\060" +
    "\375\001\002\000\010\060\345\073\346\076\uffbd\001\002" +
    "\000\034\004\101\005\110\006\115\007\103\010\107\040" +
    "\102\041\077\042\116\043\100\045\075\054\076\066\104" +
    "\067\112\001\002\000\004\074\347\001\002\000\006\060" +
    "\350\073\351\001\002\000\004\073\371\001\002\000\004" +
    "\074\352\001\002\000\004\060\353\001\002\000\004\073" +
    "\354\001\002\000\004\073\355\001\002\000\034\004\101" +
    "\005\110\006\115\007\103\010\107\040\102\041\077\042" +
    "\116\043\100\045\075\054\076\066\104\067\112\001\002" +
    "\000\006\074\360\101\357\001\002\000\004\073\361\001" +
    "\002\000\004\076\uffba\001\002\000\034\004\101\005\110" +
    "\006\115\007\103\010\107\040\102\041\077\042\116\043" +
    "\100\045\075\054\076\066\104\067\112\001\002\000\006" +
    "\074\365\101\364\001\002\000\036\053\130\054\123\055" +
    "\126\056\132\057\125\060\133\061\131\062\124\063\135" +
    "\064\121\065\122\066\134\074\uffb5\101\uffb5\001\002\000" +
    "\034\004\101\005\110\006\115\007\103\010\107\040\102" +
    "\041\077\042\116\043\100\045\075\054\076\066\104\067" +
    "\112\001\002\000\006\074\uffb4\101\uffb4\001\002\000\036" +
    "\053\130\054\123\055\126\056\132\057\125\060\133\061" +
    "\131\062\124\063\135\064\121\065\122\066\134\074\uffb6" +
    "\101\uffb6\001\002\000\006\074\370\101\364\001\002\000" +
    "\006\074\uffb3\101\uffb3\001\002\000\034\004\101\005\110" +
    "\006\115\007\103\010\107\040\102\041\077\042\116\043" +
    "\100\045\075\054\076\066\104\067\112\001\002\000\006" +
    "\074\373\101\364\001\002\000\004\076\uffbb\001\002\000" +
    "\034\053\130\054\123\055\126\056\132\057\125\060\133" +
    "\061\131\062\124\063\135\064\121\065\122\066\134\076" +
    "\uffbc\001\002\000\004\071\376\001\002\000\004\010\377" +
    "\001\002\000\004\077\u0105\001\002\000\006\072\u0103\101" +
    "\u0102\001\002\000\006\072\uffad\101\uffad\001\002\000\004" +
    "\010\377\001\002\000\004\076\uffb7\001\002\000\006\072" +
    "\uffae\101\uffae\001\002\000\034\004\101\005\110\006\115" +
    "\007\103\010\107\040\102\041\077\042\116\043\100\045" +
    "\075\054\076\066\104\067\112\001\002\000\036\053\130" +
    "\054\123\055\126\056\132\057\125\060\133\061\131\062" +
    "\124\063\135\064\121\065\122\066\134\072\uffac\101\uffac" +
    "\001\002\000\042\002\ufff2\003\ufff2\010\ufff2\020\ufff2\021" +
    "\ufff2\027\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\046\ufff2\052\ufff2\072\ufff2\001\002\000" +
    "\042\002\ufff4\003\ufff4\010\ufff4\020\ufff4\021\ufff4\027\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\046\ufff4\052\ufff4\072\ufff4\001\002\000\042\002\uffec" +
    "\003\uffec\010\uffec\020\uffec\021\uffec\027\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\046\uffec" +
    "\052\uffec\072\uffec\001\002\000\042\002\ufff8\003\ufff8\010" +
    "\ufff8\020\ufff8\021\ufff8\027\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\046\ufff8\052\ufff8\072" +
    "\ufff8\001\002\000\034\004\101\005\110\006\115\007\103" +
    "\010\107\040\102\041\077\042\116\043\100\045\075\054" +
    "\076\066\104\067\112\001\002\000\034\053\130\054\123" +
    "\055\126\056\132\057\125\060\133\061\131\062\124\063" +
    "\135\064\121\065\122\066\134\070\u010d\001\002\000\004" +
    "\076\uffa2\001\002\000\042\002\ufffa\003\ufffa\010\ufffa\020" +
    "\ufffa\021\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\046\ufffa\052\ufffa\072\ufffa\001" +
    "\002\000\042\002\ufffd\003\ufffd\010\ufffd\020\ufffd\021\ufffd" +
    "\027\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\046\ufffd\052\ufffd\072\ufffd\001\002\000\042" +
    "\002\uffea\003\uffea\010\uffea\020\uffea\021\uffea\027\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\046\uffea\052\uffea\072\uffea\001\002\000\036\003\033\010" +
    "\031\020\015\021\046\027\036\031\026\032\050\033\010" +
    "\034\011\035\043\036\032\037\020\046\045\052\051\001" +
    "\002\000\040\003\033\010\031\020\015\021\046\027\036" +
    "\031\026\032\050\033\010\034\011\035\043\036\032\037" +
    "\020\046\045\052\051\072\u0113\001\002\000\004\032\u0114" +
    "\001\002\000\004\067\u0115\001\002\000\034\004\101\005" +
    "\110\006\115\007\103\010\107\040\102\041\077\042\116" +
    "\043\100\045\075\054\076\066\104\067\112\001\002\000" +
    "\034\053\130\054\123\055\126\056\132\057\125\060\133" +
    "\061\131\062\124\063\135\064\121\065\122\066\134\070" +
    "\u0117\001\002\000\004\076\uff8f\001\002\000\004\010\u0119" +
    "\001\002\000\004\060\263\001\002\000\004\076\u011b\001" +
    "\002\000\034\004\101\005\110\006\115\007\103\010\107" +
    "\040\102\041\077\042\116\043\100\045\075\054\076\066" +
    "\104\067\112\001\002\000\034\053\130\054\123\055\126" +
    "\056\132\057\125\060\133\061\131\062\124\063\135\064" +
    "\121\065\122\066\134\076\u011d\001\002\000\004\010\u011e" +
    "\001\002\000\010\053\262\054\264\060\263\001\002\000" +
    "\004\070\uff91\001\002\000\004\070\u0122\001\002\000\004" +
    "\070\uff90\001\002\000\004\071\u0123\001\002\000\036\003" +
    "\033\010\031\020\015\021\046\027\036\031\026\032\050" +
    "\033\010\034\011\035\043\036\032\037\020\046\045\052" +
    "\051\001\002\000\040\003\033\010\031\020\015\021\046" +
    "\027\036\031\026\032\050\033\010\034\011\035\043\036" +
    "\032\037\020\046\045\052\051\072\u0125\001\002\000\042" +
    "\002\uff92\003\uff92\010\uff92\020\uff92\021\uff92\027\uff92\031" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\046\uff92\052\uff92\072\uff92\001\002\000\042\002\ufff1\003" +
    "\ufff1\010\ufff1\020\ufff1\021\ufff1\027\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\046\ufff1\052" +
    "\ufff1\072\ufff1\001\002\000\042\002\ufff7\003\ufff7\010\ufff7" +
    "\020\ufff7\021\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\035\ufff7\036\ufff7\037\ufff7\046\ufff7\052\ufff7\072\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0125\000\062\002\046\003\015\016\024\017\012\021" +
    "\013\022\041\023\036\024\006\025\005\027\004\030\033" +
    "\031\021\032\037\034\026\035\011\036\034\037\040\040" +
    "\016\041\022\042\043\043\023\045\020\046\003\047\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\016\024\017\151\021\013\022\041" +
    "\023\036\024\006\025\005\027\004\030\033\031\021\032" +
    "\037\034\026\035\011\036\034\037\040\040\016\041\022" +
    "\042\043\043\023\045\020\046\003\047\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\312\026\104\044\105\050\110\051\112" +
    "\052\116\053\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\053\012\054\001\001\000" +
    "\002\001\001\000\004\012\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\117\026\104\044" +
    "\105\050\110\051\112\052\116\053\113\001\001\000\002" +
    "\001\001\000\020\020\221\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\215\026\104\044\105\050\110\051\112" +
    "\052\116\053\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\015\170\020\171\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\164\026\104\044\105" +
    "\050\110\051\112\052\116\053\113\001\001\000\020\020" +
    "\163\026\104\044\105\050\110\051\112\052\116\053\113" +
    "\001\001\000\020\020\162\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\020\020\160\026\104" +
    "\044\105\050\110\051\112\052\116\053\113\001\001\000" +
    "\020\020\156\026\104\044\105\050\110\051\112\052\116" +
    "\053\113\001\001\000\020\020\154\026\104\044\105\050" +
    "\110\051\112\052\116\053\113\001\001\000\002\001\001" +
    "\000\020\020\146\026\104\044\105\050\110\051\112\052" +
    "\116\053\113\001\001\000\020\020\144\026\104\044\105" +
    "\050\110\051\112\052\116\053\113\001\001\000\020\020" +
    "\142\026\104\044\105\050\110\051\112\052\116\053\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\135\026\104\044\105\050\110\051\112\052\116\053\113" +
    "\001\001\000\002\001\001\000\020\020\137\026\104\044" +
    "\105\050\110\051\112\052\116\053\113\001\001\000\002" +
    "\001\001\000\020\020\141\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\145\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\150\016\024\017" +
    "\012\021\013\022\041\023\036\024\006\025\005\027\004" +
    "\030\033\031\021\032\037\034\026\035\011\036\034\037" +
    "\040\040\016\041\022\042\043\043\023\045\020\046\003" +
    "\047\027\001\001\000\056\016\024\017\151\021\013\022" +
    "\041\023\036\024\006\025\005\027\004\030\033\031\021" +
    "\032\037\034\026\035\011\036\034\037\040\040\016\041" +
    "\022\042\043\043\023\045\020\046\003\047\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\155\026" +
    "\104\044\105\050\110\051\112\052\116\053\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\161\026\104\044\105\050\110\051\112\052\116" +
    "\053\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\166\026\104\044\105\050\110\051\112\052\116\053" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\174\026\104\044\105\050\110\051\112\052\116\053\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\177\026\104\044\105\050\110\051\112\052\116\053\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\202\026\104\044\105\050\110\051\112\052\116\053\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\210" +
    "\026\104\044\105\050\110\051\112\052\116\053\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\213" +
    "\026\104\044\105\050\110\051\112\052\116\053\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\217\026\104\044\105\050\110\051\112\052" +
    "\116\053\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\223\026\104\044\105\050" +
    "\110\051\112\052\116\053\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\244\026\104\044\105\050\110\051\112\052\116\053\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\247\016\024\017\012\021\013\022\041\023\036\024\006" +
    "\025\005\027\004\030\033\031\021\032\037\034\026\035" +
    "\011\036\034\037\040\040\016\041\022\042\043\043\023" +
    "\045\020\046\003\047\027\001\001\000\056\016\024\017" +
    "\151\021\013\022\041\023\036\024\006\025\005\027\004" +
    "\030\033\031\021\032\037\034\026\035\011\036\034\037" +
    "\040\040\016\041\022\042\043\043\023\045\020\046\003" +
    "\047\027\001\001\000\002\001\001\000\004\024\252\001" +
    "\001\000\002\001\001\000\060\003\254\016\024\017\012" +
    "\021\013\022\041\023\036\024\006\025\005\027\004\030" +
    "\033\031\021\032\037\034\026\035\011\036\034\037\040" +
    "\040\016\041\022\042\043\043\023\045\020\046\003\047" +
    "\027\001\001\000\056\016\024\017\151\021\013\022\041" +
    "\023\036\024\006\025\005\027\004\030\033\031\021\032" +
    "\037\034\026\035\011\036\034\037\040\040\016\041\022" +
    "\042\043\043\023\045\020\046\003\047\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\277\026\104\044" +
    "\105\050\110\051\112\052\116\053\113\001\001\000\002" +
    "\001\001\000\020\020\265\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\275\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\020\020\271\026\104" +
    "\044\105\050\110\051\112\052\116\053\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\274\026\104" +
    "\044\105\050\110\051\112\052\116\053\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\304\026\104\044\105\050\110\051\112" +
    "\052\116\053\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\307\026\104\044\105\050\110\051\112" +
    "\052\116\053\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\317" +
    "\006\316\010\314\020\320\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\331\010\327\020\320\026\104\044" +
    "\105\050\110\051\112\052\116\053\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\324\016\024\017\012\021\013\022\041" +
    "\023\036\024\006\025\005\027\004\030\033\031\021\032" +
    "\037\034\026\035\011\036\034\037\040\040\016\041\022" +
    "\042\043\043\023\045\020\046\003\047\027\001\001\000" +
    "\056\016\024\017\151\021\013\022\041\023\036\024\006" +
    "\025\005\027\004\030\033\031\021\032\037\034\026\035" +
    "\011\036\034\037\040\040\016\041\022\042\043\043\023" +
    "\045\020\046\003\047\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\336\016\024\017\012\021\013\022\041" +
    "\023\036\024\006\025\005\027\004\030\033\031\021\032" +
    "\037\034\026\035\011\036\034\037\040\040\016\041\022" +
    "\042\043\043\023\045\020\046\003\047\027\001\001\000" +
    "\056\016\024\017\151\021\013\022\041\023\036\024\006" +
    "\025\005\027\004\030\033\031\021\032\037\034\026\035" +
    "\011\036\034\037\040\040\016\041\022\042\043\043\023" +
    "\045\020\046\003\047\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\343\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\373\026\104\044\105\050" +
    "\110\051\112\052\116\053\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\355\001\001" +
    "\000\022\005\366\020\362\026\104\044\105\050\110\051" +
    "\112\052\116\053\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\361\020\362\026" +
    "\104\044\105\050\110\051\112\052\116\053\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\365\026" +
    "\104\044\105\050\110\051\112\052\116\053\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\371\020\362\026\104\044\105" +
    "\050\110\051\112\052\116\053\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\377\014\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\u0105\026" +
    "\104\044\105\050\110\051\112\052\116\053\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\u010b\026\104" +
    "\044\105\050\110\051\112\052\116\053\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\u0111\016\024\017" +
    "\012\021\013\022\041\023\036\024\006\025\005\027\004" +
    "\030\033\031\021\032\037\034\026\035\011\036\034\037" +
    "\040\040\016\041\022\042\043\043\023\045\020\046\003" +
    "\047\027\001\001\000\056\016\024\017\151\021\013\022" +
    "\041\023\036\024\006\025\005\027\004\030\033\031\021" +
    "\032\037\034\026\035\011\036\034\037\040\040\016\041" +
    "\022\042\043\043\023\045\020\046\003\047\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\u0115\026" +
    "\104\044\105\050\110\051\112\052\116\053\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\u011b" +
    "\026\104\044\105\050\110\051\112\052\116\053\113\001" +
    "\001\000\002\001\001\000\010\023\u011e\027\u0120\033\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\u0123" +
    "\016\024\017\012\021\013\022\041\023\036\024\006\025" +
    "\005\027\004\030\033\031\021\032\037\034\026\035\011" +
    "\036\034\037\040\040\016\041\022\042\043\043\023\045" +
    "\020\046\003\047\027\001\001\000\056\016\024\017\151" +
    "\021\013\022\041\023\036\024\006\025\005\027\004\030" +
    "\033\031\021\032\037\034\026\035\011\036\034\037\040" +
    "\040\016\041\022\042\043\043\023\045\020\046\003\047" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<exceptions.Error> parserErrors = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECLARACION_LISTAS_DINAMICAS PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DECLARACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTANCIACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= ASIGNACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ASIGNACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= ASIGNACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= AGREGAR_VALOR_LISTA PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= INCREMENTO_DECREMENTO PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= SENTENCIA_MATCH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= SENTENCIA_DO_WHILE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= SENTENCIA_BREAK PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= SENTENCIA_CONTINUE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= error PUNTO_COMA 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, Operators.NEGACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= CASTEO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION MULT MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.POTENCIA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MULTIPLICACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.DIVISION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MODULO, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.SUMA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.RESTA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION NOT IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.DIFERENCIACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MENOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MAYOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, Operators.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(Integer.parseInt(a), new Type(DataType.ENTERO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(new Double(a), new Type(DataType.DECIMAL), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CADENA), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= CARACTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= KW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(true, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= KW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(false, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAccess(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= QUITAR_VALOR_LISTA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ID PUNTO ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructAccess(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= ROUND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= TO_STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= LENGTH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= FIND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= KW_INT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= KW_DOUBLE 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= KW_BOOL 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= KW_CHAR 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= KW_STRING 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= KW_STRUCT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.STRUCT);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MUTABILIDAD ::= KW_CONST 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.CONST;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MUTABILIDAD ::= KW_VAR 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.VAR;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, d, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_VECTORES_1D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_1D",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_VECTORES_2D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V2D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, true, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_2D",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_LISTAS_DINAMICAS ::= KW_LIST MENOR_QUE TIPO MAYOR_QUE ID IGUAL KW_NEW KW_LIST PAR_IZQ PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		   RESULT = new DynamicListDeclaration(b, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTAS_DINAMICAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_STRUCT ::= KW_STRUCT LLAVE_IZQ LISTA_STRUCT LLAVE_DER ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructDeclaration(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTANCIACION_STRUCT ::= MUTABILIDAD ID DOS_PUNTOS ID IGUAL LLAVE_IZQ LISTA_VALORES_STRUCT LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<StructValue> d = (LinkedList<StructValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new StructInstantiation(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_STRUCT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_VALORES_V1D ::= LISTA_VALORES_V1D COMA EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_VALORES_V1D ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_VALORES_V2D ::= LISTA_VALORES_V2D COMA CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_VALORES_V2D ::= CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_STRUCT ::= LISTA_STRUCT CAMPO_STRUCT PUNTO_COMA 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StructField b = (StructField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_STRUCT ::= CAMPO_STRUCT PUNTO_COMA 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StructField a = (StructField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CAMPO_STRUCT ::= ID DOS_PUNTOS TIPO 
            {
              StructField RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructField(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CAMPO_STRUCT ::= ID DOS_PUNTOS ID 
            {
              StructField RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructField(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_VALORES_STRUCT ::= LISTA_VALORES_STRUCT COMA VALOR_STRUCT 
            {
              LinkedList<StructValue> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructValue> a = (LinkedList<StructValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructValue b = (StructValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_STRUCT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_VALORES_STRUCT ::= VALOR_STRUCT 
            {
              LinkedList<StructValue> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructValue a = (StructValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_STRUCT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALOR_STRUCT ::= ID DOS_PUNTOS EXPRESION 
            {
              StructValue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructValue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_STRUCT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAssignment(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNACION_VECTORES_1D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_1D",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNACION_VECTORES_2D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_2D",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNACION_STRUCT ::= ID PUNTO ID IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructAssignment(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASTEO ::= PAR_IZQ TIPO PAR_DER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new TypeCasting(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INCREMENTO_DECREMENTO ::= ID MAS MAS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Incremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INCREMENTO_DECREMENTO ::= ID MENOS MENOS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Decremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AGREGAR_VALOR_LISTA ::= ID PUNTO KW_APPEND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Append(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGREGAR_VALOR_LISTA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // QUITAR_VALOR_LISTA ::= ID PUNTO KW_REMOVE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Remove(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUITAR_VALOR_LISTA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PRINTLN ::= KW_PRINTLN PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Print(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ROUND ::= KW_ROUND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROUND",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LENGTH ::= KW_LENGTH PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Length(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LENGTH",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TO_STRING ::= KW_TO_STRING PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TO_STRING",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FIND ::= ID PUNTO KW_FIND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Find(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASOS_MATCH ::= CASOS_MATCH CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> a = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch b = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASOS_MATCH ::= CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASO_MATCH ::= EXPRESION IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CaseMatch(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_MATCH",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DEFAULT_MATCH ::= GUION_BAJO IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_MATCH",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_WHILE ::= KW_WHILE PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_FOR ::= KW_FOR PAR_IZQ ASIGNACION PUNTO_COMA EXPRESION PUNTO_COMA ACTUALIZA_FOR PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ACTUALIZA_FOR ::= ASIGNACION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ACTUALIZA_FOR ::= INCREMENTO_DECREMENTO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_DO_WHILE ::= KW_DO LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_WHILE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_BREAK ::= KW_BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_CONTINUE ::= KW_CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONTINUE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
