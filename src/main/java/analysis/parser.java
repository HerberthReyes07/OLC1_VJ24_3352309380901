
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruction;
import symbol.Type;
import symbol.DataType;
import symbol.Operators;
import symbol.MutabilityType;
import instructions.Print;
import instructions.Declaration;
import instructions.VariableAssignment;
import instructions.If;
import instructions.Match;
import instructions.CaseMatch;
import instructions.While;
import instructions.For;
import instructions.DoWhile;
import instructions.Break;
import instructions.Continue;
import expressions.Native;
import expressions.Arithmetic;
import expressions.Relational;
import expressions.Logical;
import expressions.VariableAccess;
import expressions.TypeCasting;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\012\004\000\002\012\006" +
    "\000\002\012\003\000\002\012\006\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\006\000\002\012" +
    "\005\000\002\012\006\000\002\012\005\000\002\012\006" +
    "\000\002\012\004\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\014\006\000\002" +
    "\014\010\000\002\015\005\000\002\020\006\000\002\021" +
    "\005\000\002\021\005\000\002\013\006\000\002\016\011" +
    "\000\002\016\015\000\002\016\013\000\002\017\010\000" +
    "\002\017\007\000\002\017\007\000\002\005\004\000\002" +
    "\005\003\000\002\006\010\000\002\004\010\000\002\022" +
    "\011\000\002\024\015\000\002\025\003\000\002\025\003" +
    "\000\002\023\012\000\002\026\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\032\003\033\010\023\022\012\023\035\031" +
    "\014\033\020\034\026\035\032\036\015\037\004\040\027" +
    "\041\007\001\002\000\004\066\uffb9\001\002\000\036\002" +
    "\ufffe\003\ufffe\010\ufffe\022\ufffe\023\ufffe\031\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\063" +
    "\ufffe\001\002\000\004\066\250\001\002\000\004\060\245" +
    "\001\002\000\004\066\244\001\002\000\004\066\243\001" +
    "\002\000\004\010\uffd1\001\002\000\036\002\ufff6\003\ufff6" +
    "\010\ufff6\022\ufff6\023\ufff6\031\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\063\ufff6\001\002" +
    "\000\004\060\230\001\002\000\004\062\221\001\002\000" +
    "\004\066\220\001\002\000\034\002\000\003\033\010\023" +
    "\022\012\023\035\031\014\033\020\034\026\035\032\036" +
    "\015\037\004\040\027\041\007\001\002\000\026\004\051" +
    "\005\064\006\055\007\052\010\060\042\056\043\057\045" +
    "\053\057\061\060\054\001\002\000\036\002\ufff8\003\ufff8" +
    "\010\ufff8\022\ufff8\023\ufff8\031\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\063\ufff8\001\002" +
    "\000\036\002\ufff9\003\ufff9\010\ufff9\022\ufff9\023\ufff9\031" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\063\ufff9\001\002\000\010\044\166\045\167\051" +
    "\153\001\002\000\004\066\165\001\002\000\004\066\164" +
    "\001\002\000\004\060\156\001\002\000\004\066\uffb8\001" +
    "\002\000\004\066\155\001\002\000\036\002\ufff7\003\ufff7" +
    "\010\ufff7\022\ufff7\023\ufff7\031\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\063\ufff7\001\002" +
    "\000\004\060\135\001\002\000\040\002\ufff1\003\ufff1\010" +
    "\ufff1\022\ufff1\023\ufff1\031\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\063\ufff1\066\134\001" +
    "\002\000\004\010\040\001\002\000\004\010\uffd0\001\002" +
    "\000\004\002\037\001\002\000\004\002\001\001\002\000" +
    "\004\067\041\001\002\000\014\024\046\025\042\026\043" +
    "\027\044\030\045\001\002\000\010\051\uffd5\061\uffd5\066" +
    "\uffd5\001\002\000\010\051\uffd4\061\uffd4\066\uffd4\001\002" +
    "\000\010\051\uffd3\061\uffd3\066\uffd3\001\002\000\010\051" +
    "\uffd2\061\uffd2\066\uffd2\001\002\000\010\051\uffd6\061\uffd6" +
    "\066\uffd6\001\002\000\006\051\050\066\uffcf\001\002\000" +
    "\026\004\051\005\064\006\055\007\052\010\060\042\056" +
    "\043\057\045\053\057\061\060\054\001\002\000\040\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\061\uffdb\062" +
    "\uffdb\066\uffdb\001\002\000\040\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\061\uffdc\062\uffdc\066\uffdc\001\002" +
    "\000\026\004\051\005\064\006\055\007\052\010\060\042" +
    "\056\043\057\045\053\057\061\060\054\001\002\000\040" +
    "\004\051\005\064\006\055\007\052\010\060\024\046\025" +
    "\042\026\043\027\044\030\045\042\056\043\057\045\053" +
    "\057\061\060\054\001\002\000\040\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\061\uffdd\062\uffdd\066\uffdd\001" +
    "\002\000\040\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\061\uffd9\062\uffd9\066\uffd9\001\002\000\040\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\061\uffd8\062\uffd8" +
    "\066\uffd8\001\002\000\040\044\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\061\uffd7\062\uffd7\066\uffd7\001\002\000" +
    "\026\004\051\005\064\006\055\007\052\010\060\042\056" +
    "\043\057\045\053\057\061\060\054\001\002\000\034\044" +
    "\073\045\067\046\072\047\075\050\071\051\076\052\074" +
    "\053\070\054\100\055\065\056\066\057\077\066\uffce\001" +
    "\002\000\040\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\061\uffee\062\uffee\066\uffee\001\002\000\040\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\061\uffda\062\uffda" +
    "\066\uffda\001\002\000\026\004\051\005\064\006\055\007" +
    "\052\010\060\042\056\043\057\045\053\057\061\060\054" +
    "\001\002\000\026\004\051\005\064\006\055\007\052\010" +
    "\060\042\056\043\057\045\053\057\061\060\054\001\002" +
    "\000\026\004\051\005\064\006\055\007\052\010\060\042" +
    "\056\043\057\045\053\057\061\060\054\001\002\000\030" +
    "\004\051\005\064\006\055\007\052\010\060\042\056\043" +
    "\057\045\053\051\117\057\061\060\054\001\002\000\026" +
    "\004\051\005\064\006\055\007\052\010\060\042\056\043" +
    "\057\045\053\057\061\060\054\001\002\000\030\004\051" +
    "\005\064\006\055\007\052\010\060\042\056\043\057\045" +
    "\053\046\113\057\061\060\054\001\002\000\026\004\051" +
    "\005\064\006\055\007\052\010\060\042\056\043\057\045" +
    "\053\057\061\060\054\001\002\000\030\004\051\005\064" +
    "\006\055\007\052\010\060\042\056\043\057\045\053\051" +
    "\107\057\061\060\054\001\002\000\026\004\051\005\064" +
    "\006\055\007\052\010\060\042\056\043\057\045\053\057" +
    "\061\060\054\001\002\000\004\051\104\001\002\000\004" +
    "\051\102\001\002\000\026\004\051\005\064\006\055\007" +
    "\052\010\060\042\056\043\057\045\053\057\061\060\054" +
    "\001\002\000\040\044\073\045\067\046\072\047\075\050" +
    "\071\051\uffde\052\074\053\070\054\uffde\055\065\056\066" +
    "\057\077\061\uffde\062\uffde\066\uffde\001\002\000\026\004" +
    "\051\005\064\006\055\007\052\010\060\042\056\043\057" +
    "\045\053\057\061\060\054\001\002\000\040\044\073\045" +
    "\067\046\072\047\075\050\071\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\057\uffe6\061\uffe6\062\uffe6\066" +
    "\uffe6\001\002\000\026\004\051\005\064\006\055\007\052" +
    "\010\060\042\056\043\057\045\053\057\061\060\054\001" +
    "\002\000\040\044\073\045\067\046\072\047\075\050\071" +
    "\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057" +
    "\uffef\061\uffef\062\uffef\066\uffef\001\002\000\040\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\061\uffeb\062\uffeb" +
    "\066\uffeb\001\002\000\026\004\051\005\064\006\055\007" +
    "\052\010\060\042\056\043\057\045\053\057\061\060\054" +
    "\001\002\000\040\044\073\045\067\046\072\047\075\050" +
    "\071\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5" +
    "\057\uffe5\061\uffe5\062\uffe5\066\uffe5\001\002\000\040\044" +
    "\073\045\067\046\072\047\075\050\071\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\061\uffe4\062" +
    "\uffe4\066\uffe4\001\002\000\040\044\uffe9\045\uffe9\046\072" +
    "\047\075\050\071\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\061\uffe9\062\uffe9\066\uffe9\001\002" +
    "\000\026\004\051\005\064\006\055\007\052\010\060\042" +
    "\056\043\057\045\053\057\061\060\054\001\002\000\040" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\061\uffec" +
    "\062\uffec\066\uffec\001\002\000\040\044\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\057\uffed\061\uffed\062\uffed\066\uffed\001" +
    "\002\000\040\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\061\uffea\062\uffea\066\uffea\001\002\000\026\004\051" +
    "\005\064\006\055\007\052\010\060\042\056\043\057\045" +
    "\053\057\061\060\054\001\002\000\040\044\073\045\067" +
    "\046\072\047\075\050\071\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\061\uffe3\062\uffe3\066\uffe3" +
    "\001\002\000\040\044\073\045\067\046\072\047\075\050" +
    "\071\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2" +
    "\057\uffe2\061\uffe2\062\uffe2\066\uffe2\001\002\000\040\044" +
    "\uffe8\045\uffe8\046\072\047\075\050\071\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\061\uffe8\062" +
    "\uffe8\066\uffe8\001\002\000\040\044\073\045\067\046\072" +
    "\047\075\050\071\051\uffe0\052\074\053\070\054\uffe0\055" +
    "\uffe0\056\uffe0\057\077\061\uffe0\062\uffe0\066\uffe0\001\002" +
    "\000\040\044\073\045\067\046\072\047\075\050\071\051" +
    "\uffdf\052\074\053\070\054\uffdf\055\uffdf\056\066\057\077" +
    "\061\uffdf\062\uffdf\066\uffdf\001\002\000\040\044\073\045" +
    "\067\046\072\047\075\050\071\051\uffe1\052\074\053\070" +
    "\054\uffe1\055\uffe1\056\uffe1\057\077\061\uffe1\062\uffe1\066" +
    "\uffe1\001\002\000\004\061\131\001\002\000\034\044\073" +
    "\045\067\046\072\047\075\050\071\051\076\052\074\053" +
    "\070\054\100\055\065\056\066\057\077\061\130\001\002" +
    "\000\040\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\061\uffe7\062\uffe7\066\uffe7\001\002\000\026\004\051\005" +
    "\064\006\055\007\052\010\060\042\056\043\057\045\053" +
    "\057\061\060\054\001\002\000\040\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\061\uffcc\062\uffcc\066\uffcc\001" +
    "\002\000\040\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\061\ufff0\062\ufff0\066\ufff0\001\002\000\036\002\ufff2" +
    "\003\ufff2\010\ufff2\022\ufff2\023\ufff2\031\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\063\ufff2" +
    "\001\002\000\004\010\136\001\002\000\004\051\153\001" +
    "\002\000\004\066\140\001\002\000\026\004\051\005\064" +
    "\006\055\007\052\010\060\042\056\043\057\045\053\057" +
    "\061\060\054\001\002\000\034\044\073\045\067\046\072" +
    "\047\075\050\071\051\076\052\074\053\070\054\100\055" +
    "\065\056\066\057\077\066\142\001\002\000\004\010\023" +
    "\001\002\000\004\061\uffbc\001\002\000\004\061\146\001" +
    "\002\000\004\061\uffbb\001\002\000\004\062\147\001\002" +
    "\000\032\003\033\010\023\022\012\023\035\031\014\033" +
    "\020\034\026\035\032\036\015\037\004\040\027\041\007" +
    "\001\002\000\034\003\033\010\023\022\012\023\035\031" +
    "\014\033\020\034\026\035\032\036\015\037\004\040\027" +
    "\041\007\063\152\001\002\000\036\002\uffff\003\uffff\010" +
    "\uffff\022\uffff\023\uffff\031\uffff\033\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\040\uffff\041\uffff\063\uffff\001\002\000" +
    "\036\002\uffbd\003\uffbd\010\uffbd\022\uffbd\023\uffbd\031\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\063\uffbd\001\002\000\026\004\051\005\064\006\055" +
    "\007\052\010\060\042\056\043\057\045\053\057\061\060" +
    "\054\001\002\000\036\044\073\045\067\046\072\047\075" +
    "\050\071\051\076\052\074\053\070\054\100\055\065\056" +
    "\066\057\077\061\uffcd\066\uffcd\001\002\000\036\002\ufff5" +
    "\003\ufff5\010\ufff5\022\ufff5\023\ufff5\031\ufff5\033\ufff5\034" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\063\ufff5" +
    "\001\002\000\026\004\051\005\064\006\055\007\052\010" +
    "\060\042\056\043\057\045\053\057\061\060\054\001\002" +
    "\000\034\044\073\045\067\046\072\047\075\050\071\051" +
    "\076\052\074\053\070\054\100\055\065\056\066\057\077" +
    "\061\160\001\002\000\004\062\161\001\002\000\032\003" +
    "\033\010\023\022\012\023\035\031\014\033\020\034\026" +
    "\035\032\036\015\037\004\040\027\041\007\001\002\000" +
    "\034\003\033\010\023\022\012\023\035\031\014\033\020" +
    "\034\026\035\032\036\015\037\004\040\027\041\007\063" +
    "\163\001\002\000\036\002\uffbe\003\uffbe\010\uffbe\022\uffbe" +
    "\023\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\063\uffbe\001\002\000\036\002\ufffd" +
    "\003\ufffd\010\ufffd\022\ufffd\023\ufffd\031\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\063\ufffd" +
    "\001\002\000\036\002\ufffb\003\ufffb\010\ufffb\022\ufffb\023" +
    "\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\063\ufffb\001\002\000\004\044\171\001" +
    "\002\000\004\045\170\001\002\000\006\061\uffca\066\uffca" +
    "\001\002\000\006\061\uffcb\066\uffcb\001\002\000\034\044" +
    "\073\045\067\046\072\047\075\050\071\051\076\052\074" +
    "\053\070\054\100\055\065\056\066\057\077\062\173\001" +
    "\002\000\030\004\051\005\064\006\055\007\052\010\060" +
    "\042\056\043\057\045\053\057\061\060\054\070\200\001" +
    "\002\000\032\004\051\005\064\006\055\007\052\010\060" +
    "\042\056\043\057\045\053\057\061\060\054\063\214\070" +
    "\200\001\002\000\004\063\213\001\002\000\032\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\042\uffc1\043\uffc1\045" +
    "\uffc1\057\uffc1\060\uffc1\063\uffc1\070\uffc1\001\002\000\032" +
    "\044\073\045\067\046\072\047\075\050\071\051\206\052" +
    "\074\053\070\054\100\055\065\056\066\057\077\001\002" +
    "\000\004\051\201\001\002\000\004\053\202\001\002\000" +
    "\004\062\203\001\002\000\032\003\033\010\023\022\012" +
    "\023\035\031\014\033\020\034\026\035\032\036\015\037" +
    "\004\040\027\041\007\001\002\000\034\003\033\010\023" +
    "\022\012\023\035\031\014\033\020\034\026\035\032\036" +
    "\015\037\004\040\027\041\007\063\205\001\002\000\004" +
    "\063\uffbf\001\002\000\006\051\104\053\207\001\002\000" +
    "\004\062\210\001\002\000\032\003\033\010\023\022\012" +
    "\023\035\031\014\033\020\034\026\035\032\036\015\037" +
    "\004\040\027\041\007\001\002\000\034\003\033\010\023" +
    "\022\012\023\035\031\014\033\020\034\026\035\032\036" +
    "\015\037\004\040\027\041\007\063\212\001\002\000\032" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\042\uffc0\043" +
    "\uffc0\045\uffc0\057\uffc0\060\uffc0\063\uffc0\070\uffc0\001\002" +
    "\000\036\002\uffc3\003\uffc3\010\uffc3\022\uffc3\023\uffc3\031" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\063\uffc3\001\002\000\036\002\uffc4\003\uffc4\010" +
    "\uffc4\022\uffc4\023\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\063\uffc4\001\002\000" +
    "\004\063\217\001\002\000\032\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\042\uffc2\043\uffc2\045\uffc2\057\uffc2\060" +
    "\uffc2\063\uffc2\070\uffc2\001\002\000\036\002\uffc5\003\uffc5" +
    "\010\uffc5\022\uffc5\023\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\063\uffc5\001\002" +
    "\000\036\002\ufffc\003\ufffc\010\ufffc\022\ufffc\023\ufffc\031" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\063\ufffc\001\002\000\032\003\033\010\023\022" +
    "\012\023\035\031\014\033\020\034\026\035\032\036\015" +
    "\037\004\040\027\041\007\001\002\000\034\003\033\010" +
    "\023\022\012\023\035\031\014\033\020\034\026\035\032" +
    "\036\015\037\004\040\027\041\007\063\223\001\002\000" +
    "\004\034\224\001\002\000\004\060\225\001\002\000\026" +
    "\004\051\005\064\006\055\007\052\010\060\042\056\043" +
    "\057\045\053\057\061\060\054\001\002\000\034\044\073" +
    "\045\067\046\072\047\075\050\071\051\076\052\074\053" +
    "\070\054\100\055\065\056\066\057\077\061\227\001\002" +
    "\000\004\066\uffba\001\002\000\026\004\051\005\064\006" +
    "\055\007\052\010\060\042\056\043\057\045\053\057\061" +
    "\060\054\001\002\000\034\044\073\045\067\046\072\047" +
    "\075\050\071\051\076\052\074\053\070\054\100\055\065" +
    "\056\066\057\077\061\232\001\002\000\004\062\233\001" +
    "\002\000\032\003\033\010\023\022\012\023\035\031\014" +
    "\033\020\034\026\035\032\036\015\037\004\040\027\041" +
    "\007\001\002\000\034\003\033\010\023\022\012\023\035" +
    "\031\014\033\020\034\026\035\032\036\015\037\004\040" +
    "\027\041\007\063\235\001\002\000\040\002\uffc8\003\uffc8" +
    "\010\uffc8\022\uffc8\023\uffc8\031\uffc8\032\236\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\063\uffc8" +
    "\001\002\000\006\031\014\062\240\001\002\000\036\002" +
    "\uffc6\003\uffc6\010\uffc6\022\uffc6\023\uffc6\031\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\063" +
    "\uffc6\001\002\000\032\003\033\010\023\022\012\023\035" +
    "\031\014\033\020\034\026\035\032\036\015\037\004\040" +
    "\027\041\007\001\002\000\034\003\033\010\023\022\012" +
    "\023\035\031\014\033\020\034\026\035\032\036\015\037" +
    "\004\040\027\041\007\063\242\001\002\000\036\002\uffc7" +
    "\003\uffc7\010\uffc7\022\uffc7\023\uffc7\031\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\063\uffc7" +
    "\001\002\000\036\002\ufff4\003\ufff4\010\ufff4\022\ufff4\023" +
    "\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\063\ufff4\001\002\000\036\002\ufffa\003" +
    "\ufffa\010\ufffa\022\ufffa\023\ufffa\031\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\063\ufffa\001" +
    "\002\000\026\004\051\005\064\006\055\007\052\010\060" +
    "\042\056\043\057\045\053\057\061\060\054\001\002\000" +
    "\034\044\073\045\067\046\072\047\075\050\071\051\076" +
    "\052\074\053\070\054\100\055\065\056\066\057\077\061" +
    "\247\001\002\000\004\066\uffc9\001\002\000\036\002\ufff3" +
    "\003\ufff3\010\ufff3\022\ufff3\023\ufff3\031\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\063\ufff3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\040\002\035\003\016\010\033\011\004\013" +
    "\024\014\015\015\023\016\021\017\020\021\007\022\030" +
    "\023\027\024\012\026\010\027\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\010\033\011\150\013\024\014\015\015" +
    "\023\016\021\017\020\021\007\022\030\023\027\024\012" +
    "\026\010\027\005\001\001\000\006\012\171\020\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\061\020\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\132\020\062" +
    "\001\001\000\010\007\125\012\126\020\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\124\020\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\123" +
    "\020\062\001\001\000\006\012\122\020\062\001\001\000" +
    "\006\012\121\020\062\001\001\000\006\012\117\020\062" +
    "\001\001\000\006\012\115\020\062\001\001\000\006\012" +
    "\113\020\062\001\001\000\006\012\111\020\062\001\001" +
    "\000\006\012\107\020\062\001\001\000\006\012\105\020" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\100\020\062\001\001\000\002\001\001\000\006\012" +
    "\102\020\062\001\001\000\002\001\001\000\006\012\104" +
    "\020\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\110\020\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\114\020\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\120\020\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\131\020\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\140\020\062\001\001\000\002\001\001\000" +
    "\010\015\142\021\144\025\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\147\010\033\011\004\013\024\014\015\015\023" +
    "\016\021\017\020\021\007\022\030\023\027\024\012\026" +
    "\010\027\005\001\001\000\034\010\033\011\150\013\024" +
    "\014\015\015\023\016\021\017\020\021\007\022\030\023" +
    "\027\024\012\026\010\027\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\153\020\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\156\020\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\161\010\033\011\004\013\024\014\015\015\023\016\021" +
    "\017\020\021\007\022\030\023\027\024\012\026\010\027" +
    "\005\001\001\000\034\010\033\011\150\013\024\014\015" +
    "\015\023\016\021\017\020\021\007\022\030\023\027\024" +
    "\012\026\010\027\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\174\005\173\006\175\012\176\020\062\001" +
    "\001\000\012\004\214\006\215\012\176\020\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\203\010\033\011\004\013\024\014\015\015\023\016" +
    "\021\017\020\021\007\022\030\023\027\024\012\026\010" +
    "\027\005\001\001\000\034\010\033\011\150\013\024\014" +
    "\015\015\023\016\021\017\020\021\007\022\030\023\027" +
    "\024\012\026\010\027\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\210\010\033" +
    "\011\004\013\024\014\015\015\023\016\021\017\020\021" +
    "\007\022\030\023\027\024\012\026\010\027\005\001\001" +
    "\000\034\010\033\011\150\013\024\014\015\015\023\016" +
    "\021\017\020\021\007\022\030\023\027\024\012\026\010" +
    "\027\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\221\010\033\011" +
    "\004\013\024\014\015\015\023\016\021\017\020\021\007" +
    "\022\030\023\027\024\012\026\010\027\005\001\001\000" +
    "\034\010\033\011\150\013\024\014\015\015\023\016\021" +
    "\017\020\021\007\022\030\023\027\024\012\026\010\027" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\225\020\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\230\020\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\233\010\033\011\004\013" +
    "\024\014\015\015\023\016\021\017\020\021\007\022\030" +
    "\023\027\024\012\026\010\027\005\001\001\000\034\010" +
    "\033\011\150\013\024\014\015\015\023\016\021\017\020" +
    "\021\007\022\030\023\027\024\012\026\010\027\005\001" +
    "\001\000\002\001\001\000\004\016\236\001\001\000\002" +
    "\001\001\000\036\003\240\010\033\011\004\013\024\014" +
    "\015\015\023\016\021\017\020\021\007\022\030\023\027" +
    "\024\012\026\010\027\005\001\001\000\034\010\033\011" +
    "\150\013\024\014\015\015\023\016\021\017\020\021\007" +
    "\022\030\023\027\024\012\026\010\027\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\245\020\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<exceptions.Error> parserErrors = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= ASIGNACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= INCREMENTO_DECREMENTO PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SENTENCIA_MATCH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SENTENCIA_DO_WHILE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SENTENCIA_BREAK PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SENTENCIA_CONTINUE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= error PUNTO_COMA 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, Operators.NEGACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= CASTEO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= EXPRESION MULT MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.POTENCIA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MULTIPLICACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.DIVISION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MODULO, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.SUMA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.RESTA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION NOT IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.DIFERENCIACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION MENOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION MAYOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, Operators.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(Integer.parseInt(a), new Type(DataType.ENTERO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(new Double(a), new Type(DataType.DECIMAL), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CADENA), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= CARACTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= KW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(true, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= KW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(false, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAccess(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= KW_INT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= KW_DOUBLE 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= KW_BOOL 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= KW_CHAR 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= KW_STRING 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MUTABILIDAD ::= KW_CONST 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.CONST;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MUTABILIDAD ::= KW_VAR 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.VAR;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, d, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAssignment(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASTEO ::= PAR_IZQ TIPO PAR_DER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new TypeCasting(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INCREMENTO_DECREMENTO ::= ID MAS MAS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Incremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INCREMENTO_DECREMENTO ::= ID MENOS MENOS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Decremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PRINTLN ::= KW_PRINTLN PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Print(a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASOS_MATCH ::= CASOS_MATCH CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> a = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch b = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASOS_MATCH ::= CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASO_MATCH ::= EXPRESION IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CaseMatch(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DEFAULT_MATCH ::= GUION_BAJO IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_MATCH",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_WHILE ::= KW_WHILE PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_FOR ::= KW_FOR PAR_IZQ ASIGNACION PUNTO_COMA EXPRESION PUNTO_COMA ACTUALIZA_FOR PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ACTUALIZA_FOR ::= ASIGNACION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ACTUALIZA_FOR ::= INCREMENTO_DECREMENTO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_DO_WHILE ::= KW_DO LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_WHILE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BREAK ::= KW_BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_CONTINUE ::= KW_CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONTINUE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
