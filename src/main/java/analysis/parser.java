
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instruction;
import symbol.Type;
import symbol.DataType;
import symbol.Operators;
import symbol.MutabilityType;
import instructions.Print;
import instructions.Declaration;
import instructions.VariableAssignment;
import instructions.If;
import instructions.Match;
import instructions.CaseMatch;
import instructions.While;
import instructions.For;
import instructions.DoWhile;
import instructions.Break;
import instructions.Continue;
import instructions.VectorDeclaration;
import instructions.VectorAssignment;
import instructions.DynamicListDeclaration;
import instructions.Append;
import instructions.StructDeclaration;
import instructions.StructField;
import instructions.StructInstantiation;
import instructions.StructValue;
import instructions.StructAssignment;
import instructions.Method;
import instructions.StartWith;
import expressions.Native;
import expressions.Arithmetic;
import expressions.Relational;
import expressions.Logical;
import expressions.VariableAccess;
import expressions.TypeCasting;
import expressions.Round;
import expressions.VectorAccess;
import expressions.Length;
import expressions.Remove;
import expressions.Find;
import expressions.ToString;
import expressions.StructAccess;
import expressions.MethodCall;
import expressions.Return;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\003\000\002\020\004\000\002\020\006" +
    "\000\002\020\003\000\002\020\006\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\006\000\002\020" +
    "\005\000\002\020\006\000\002\020\005\000\002\020\006" +
    "\000\002\020\004\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\006\000\002\020\011" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\022\006\000\002\022\010\000\002\036\014\000\002" +
    "\040\016\000\002\042\014\000\002\045\007\000\002\046" +
    "\012\000\002\005\005\000\002\005\003\000\002\007\007" +
    "\000\002\007\005\000\002\011\005\000\002\011\004\000" +
    "\002\012\005\000\002\012\005\000\002\013\005\000\002" +
    "\013\003\000\002\014\005\000\002\014\007\000\002\023" +
    "\005\000\002\037\010\000\002\041\013\000\002\047\005" +
    "\000\002\062\005\000\002\062\005\000\002\026\006\000" +
    "\002\027\005\000\002\027\005\000\002\043\010\000\002" +
    "\044\010\000\002\021\006\000\002\050\006\000\002\051" +
    "\006\000\002\053\006\000\002\052\010\000\002\024\011" +
    "\000\002\024\015\000\002\024\013\000\002\025\010\000" +
    "\002\025\007\000\002\025\007\000\002\006\004\000\002" +
    "\006\003\000\002\010\010\000\002\004\010\000\002\030" +
    "\011\000\002\032\015\000\002\033\003\000\002\033\003" +
    "\000\002\031\012\000\002\034\003\000\002\035\003\000" +
    "\002\060\004\000\002\060\003\000\002\054\012\000\002" +
    "\054\011\000\002\055\006\000\002\055\004\000\002\056" +
    "\007\000\002\056\006\000\002\057\006\000\002\057\005" +
    "\000\002\061\005\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\056\003\042\010\037\020\022\021\063\022" +
    "\010\023\016\024\035\025\015\026\061\027\053\030\045" +
    "\032\033\033\065\034\012\035\013\036\025\041\054\042" +
    "\040\043\041\050\062\054\066\055\051\001\002\000\004" +
    "\101\u0156\001\002\000\004\101\u0155\001\002\000\062\002" +
    "\uffef\003\uffef\010\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\041\uffef\042\uffef\043\uffef" +
    "\050\uffef\054\uffef\055\uffef\075\uffef\001\002\000\004\010" +
    "\u0145\001\002\000\016\010\uffc0\063\uffc0\065\uffc0\073\uffc0" +
    "\076\uffc0\101\uffc0\001\002\000\062\002\ufff0\003\ufff0\010" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\041\ufff0\042\ufff0\043\ufff0\050\ufff0\054\ufff0" +
    "\055\ufff0\075\ufff0\001\002\000\004\072\u0137\001\002\000" +
    "\004\074\u0130\001\002\000\062\002\uffe9\003\uffe9\010\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\041\uffe9\042\uffe9\043\uffe9\050\uffe9\054\uffe9\055" +
    "\uffe9\075\uffe9\001\002\000\016\010\uffbd\063\uffbd\065\uffbd" +
    "\073\uffbd\076\uffbd\101\uffbd\001\002\000\016\010\uffbf\063" +
    "\uffbf\065\uffbf\073\uffbf\076\uffbf\101\uffbf\001\002\000\004" +
    "\101\u012f\001\002\000\062\002\ufffe\003\ufffe\010\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\050\ufffe\054\ufffe\055\ufffe" +
    "\075\ufffe\001\002\000\004\101\u012e\001\002\000\004\010" +
    "\uffb9\001\002\000\060\002\000\003\042\010\037\020\022" +
    "\021\063\022\010\023\016\024\035\025\015\026\061\027" +
    "\053\030\045\032\033\033\065\034\012\035\013\036\025" +
    "\041\054\042\040\043\041\050\062\054\066\055\051\001" +
    "\002\000\004\101\u012d\001\002\000\004\072\u012a\001\002" +
    "\000\004\101\u0129\001\002\000\004\101\u0128\001\002\000" +
    "\004\101\u0127\001\002\000\004\101\u0126\001\002\000\004" +
    "\010\375\001\002\000\034\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\001\002\000\004\101\346\001" +
    "\002\000\016\010\uffbe\063\uffbe\065\uffbe\073\uffbe\076\uffbe" +
    "\101\uffbe\001\002\000\004\101\345\001\002\000\016\056" +
    "\321\057\323\063\322\072\173\076\324\100\320\001\002" +
    "\000\004\101\uff84\001\002\000\036\004\100\005\107\006" +
    "\114\007\102\010\106\037\101\040\076\044\115\045\077" +
    "\047\072\057\074\071\103\072\111\101\uff82\001\002\000" +
    "\064\002\uffe4\003\uffe4\010\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\050\uffe4\054\uffe4\055\uffe4\075\uffe4\101\316\001" +
    "\002\000\062\002\uffee\003\uffee\010\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\041\uffee" +
    "\042\uffee\043\uffee\050\uffee\054\uffee\055\uffee\075\uffee\001" +
    "\002\000\004\101\315\001\002\000\004\072\302\001\002" +
    "\000\004\101\301\001\002\000\062\002\uffed\003\uffed\010" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\041\uffed\042\uffed\043\uffed\050\uffed\054\uffed" +
    "\055\uffed\075\uffed\001\002\000\004\101\300\001\002\000" +
    "\004\010\273\001\002\000\004\101\272\001\002\000\016" +
    "\010\uffba\063\uffba\065\uffba\073\uffba\076\uffba\101\uffba\001" +
    "\002\000\004\101\uff85\001\002\000\004\101\271\001\002" +
    "\000\004\101\270\001\002\000\004\101\267\001\002\000" +
    "\004\101\266\001\002\000\016\010\uffbc\063\uffbc\065\uffbc" +
    "\073\uffbc\076\uffbc\101\uffbc\001\002\000\004\064\255\001" +
    "\002\000\004\010\uffb8\001\002\000\004\002\254\001\002" +
    "\000\004\072\245\001\002\000\006\010\uffbb\074\231\001" +
    "\002\000\006\063\071\100\070\001\002\000\004\010\230" +
    "\001\002\000\034\004\100\005\107\006\114\007\102\010" +
    "\106\037\101\040\076\044\115\045\077\047\072\057\074" +
    "\071\103\072\111\001\002\000\004\072\225\001\002\000" +
    "\046\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1\073" +
    "\uffc1\074\uffc1\075\uffc1\077\uffc1\101\uffc1\104\uffc1\001\002" +
    "\000\034\004\100\005\107\006\114\007\102\010\106\037" +
    "\101\040\076\044\115\045\077\047\072\057\074\071\103" +
    "\072\111\001\002\000\050\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\071\uffc6\073\uffc6\074\uffc6\075\uffc6\077\uffc6\100" +
    "\070\101\uffc6\104\uffc6\001\002\000\046\056\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066" +
    "\uffcb\067\uffcb\070\uffcb\071\uffcb\073\uffcb\074\uffcb\075\uffcb" +
    "\077\uffcb\101\uffcb\104\uffcb\001\002\000\004\072\221\001" +
    "\002\000\046\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\073\uffce\074\uffce\075\uffce\077\uffce\101\uffce\104\uffce" +
    "\001\002\000\046\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc" +
    "\071\uffcc\073\uffcc\074\uffcc\075\uffcc\077\uffcc\101\uffcc\104" +
    "\uffcc\001\002\000\046\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\073\uffcf\074\uffcf\075\uffcf\077\uffcf\101\uffcf" +
    "\104\uffcf\001\002\000\034\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\001\002\000\046\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\071\uffe1\073\uffe1\074\uffe1\075" +
    "\uffe1\077\uffe1\101\uffe1\104\uffe1\001\002\000\046\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\077\uffc7\101\uffc7\104\uffc7\001\002\000\054\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca" +
    "\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\173\073" +
    "\uffca\074\uffca\075\uffca\076\172\077\uffca\100\171\101\uffca" +
    "\104\uffca\001\002\000\046\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd" +
    "\070\uffcd\071\uffcd\073\uffcd\074\uffcd\075\uffcd\077\uffcd\101" +
    "\uffcd\104\uffcd\001\002\000\046\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\073\uffc5\074\uffc5\075\uffc5\077\uffc5" +
    "\101\uffc5\104\uffc5\001\002\000\052\004\100\005\107\006" +
    "\114\007\102\010\106\022\010\023\016\024\035\025\015" +
    "\026\061\027\053\037\101\040\076\044\115\045\077\047" +
    "\072\054\164\057\074\071\103\072\111\001\002\000\046" +
    "\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\077\uffc3\101\uffc3\104\uffc3\001\002\000" +
    "\046\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\077\uffc4\101\uffc4\104\uffc4\001\002" +
    "\000\046\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\077\uffd0\101\uffd0\104\uffd0\001" +
    "\002\000\004\072\160\001\002\000\046\056\uffc2\057\uffc2" +
    "\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066" +
    "\uffc2\067\uffc2\070\uffc2\071\uffc2\073\uffc2\074\uffc2\075\uffc2" +
    "\077\uffc2\101\uffc2\104\uffc2\001\002\000\034\056\126\057" +
    "\122\060\124\061\130\062\125\063\131\064\127\065\123" +
    "\066\133\067\120\070\121\071\132\101\uffa1\001\002\000" +
    "\034\004\100\005\107\006\114\007\102\010\106\037\101" +
    "\040\076\044\115\045\077\047\072\057\074\071\103\072" +
    "\111\001\002\000\034\004\100\005\107\006\114\007\102" +
    "\010\106\037\101\040\076\044\115\045\077\047\072\057" +
    "\074\071\103\072\111\001\002\000\034\004\100\005\107" +
    "\006\114\007\102\010\106\037\101\040\076\044\115\045" +
    "\077\047\072\057\074\071\103\072\111\001\002\000\036" +
    "\004\100\005\107\006\114\007\102\010\106\037\101\040" +
    "\076\044\115\045\077\047\072\057\074\063\152\071\103" +
    "\072\111\001\002\000\036\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\060\147\071\103\072\111\001\002\000\034\004" +
    "\100\005\107\006\114\007\102\010\106\037\101\040\076" +
    "\044\115\045\077\047\072\057\074\071\103\072\111\001" +
    "\002\000\034\004\100\005\107\006\114\007\102\010\106" +
    "\037\101\040\076\044\115\045\077\047\072\057\074\071" +
    "\103\072\111\001\002\000\036\004\100\005\107\006\114" +
    "\007\102\010\106\037\101\040\076\044\115\045\077\047" +
    "\072\057\074\063\142\071\103\072\111\001\002\000\034" +
    "\004\100\005\107\006\114\007\102\010\106\037\101\040" +
    "\076\044\115\045\077\047\072\057\074\071\103\072\111" +
    "\001\002\000\004\063\137\001\002\000\004\063\135\001" +
    "\002\000\034\004\100\005\107\006\114\007\102\010\106" +
    "\037\101\040\076\044\115\045\077\047\072\057\074\071" +
    "\103\072\111\001\002\000\046\056\126\057\122\060\124" +
    "\061\130\062\125\063\uffd1\064\127\065\123\066\uffd1\067" +
    "\120\070\121\071\132\073\uffd1\074\uffd1\075\uffd1\077\uffd1" +
    "\101\uffd1\104\uffd1\001\002\000\034\004\100\005\107\006" +
    "\114\007\102\010\106\037\101\040\076\044\115\045\077" +
    "\047\072\057\074\071\103\072\111\001\002\000\046\056" +
    "\126\057\122\060\124\061\130\062\125\063\uffd9\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\073\uffd9\074" +
    "\uffd9\075\uffd9\077\uffd9\101\uffd9\104\uffd9\001\002\000\034" +
    "\004\100\005\107\006\114\007\102\010\106\037\101\040" +
    "\076\044\115\045\077\047\072\057\074\071\103\072\111" +
    "\001\002\000\046\056\126\057\122\060\124\061\130\062" +
    "\125\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\071\uffe2\073\uffe2\074\uffe2\075\uffe2\077\uffe2\101\uffe2\104" +
    "\uffe2\001\002\000\046\056\uffde\057\uffde\060\uffde\061\uffde" +
    "\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070" +
    "\uffde\071\uffde\073\uffde\074\uffde\075\uffde\077\uffde\101\uffde" +
    "\104\uffde\001\002\000\034\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\001\002\000\046\056\126\057" +
    "\122\060\124\061\130\062\125\063\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\070\uffd8\071\uffd8\073\uffd8\074\uffd8\075" +
    "\uffd8\077\uffd8\101\uffd8\104\uffd8\001\002\000\046\056\126" +
    "\057\122\060\124\061\130\062\125\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\073\uffd7\074\uffd7" +
    "\075\uffd7\077\uffd7\101\uffd7\104\uffd7\001\002\000\046\056" +
    "\uffdc\057\uffdc\060\124\061\130\062\125\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\077\uffdc\101\uffdc\104\uffdc\001\002\000\046" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\077\uffdd\101\uffdd\104\uffdd\001\002\000" +
    "\034\004\100\005\107\006\114\007\102\010\106\037\101" +
    "\040\076\044\115\045\077\047\072\057\074\071\103\072" +
    "\111\001\002\000\046\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\073\uffdf\074\uffdf\075\uffdf\077\uffdf\101\uffdf" +
    "\104\uffdf\001\002\000\046\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\070\uffe0\071\uffe0\073\uffe0\074\uffe0\075\uffe0\077\uffe0\101" +
    "\uffe0\104\uffe0\001\002\000\034\004\100\005\107\006\114" +
    "\007\102\010\106\037\101\040\076\044\115\045\077\047" +
    "\072\057\074\071\103\072\111\001\002\000\046\056\126" +
    "\057\122\060\124\061\130\062\125\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\073\uffd6\074\uffd6" +
    "\075\uffd6\077\uffd6\101\uffd6\104\uffd6\001\002\000\046\056" +
    "\126\057\122\060\124\061\130\062\125\063\uffd5\064\uffd5" +
    "\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\073\uffd5\074" +
    "\uffd5\075\uffd5\077\uffd5\101\uffd5\104\uffd5\001\002\000\046" +
    "\056\uffdb\057\uffdb\060\124\061\130\062\125\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\073\uffdb" +
    "\074\uffdb\075\uffdb\077\uffdb\101\uffdb\104\uffdb\001\002\000" +
    "\046\056\126\057\122\060\124\061\130\062\125\063\uffd3" +
    "\064\127\065\123\066\uffd3\067\uffd3\070\uffd3\071\132\073" +
    "\uffd3\074\uffd3\075\uffd3\077\uffd3\101\uffd3\104\uffd3\001\002" +
    "\000\046\056\126\057\122\060\124\061\130\062\125\063" +
    "\uffd2\064\127\065\123\066\uffd2\067\uffd2\070\121\071\132" +
    "\073\uffd2\074\uffd2\075\uffd2\077\uffd2\101\uffd2\104\uffd2\001" +
    "\002\000\034\004\100\005\107\006\114\007\102\010\106" +
    "\037\101\040\076\044\115\045\077\047\072\057\074\071" +
    "\103\072\111\001\002\000\034\056\126\057\122\060\124" +
    "\061\130\062\125\063\131\064\127\065\123\066\133\067" +
    "\120\070\121\071\132\073\162\001\002\000\046\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\066\uff98\067\uff98\070\uff98\071\uff98\073\uff98\074\uff98" +
    "\075\uff98\077\uff98\101\uff98\104\uff98\001\002\000\004\073" +
    "\167\001\002\000\016\010\uffbb\063\uffbb\065\uffbb\073\uffbb" +
    "\076\uffbb\101\uffbb\001\002\000\034\056\126\057\122\060" +
    "\124\061\130\062\125\063\131\064\127\065\123\066\133" +
    "\067\120\070\121\071\132\073\166\001\002\000\046\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\066\uffda\067\uffda\070\uffda\071\uffda\073\uffda\074" +
    "\uffda\075\uffda\077\uffda\101\uffda\104\uffda\001\002\000\034" +
    "\004\100\005\107\006\114\007\102\010\106\037\101\040" +
    "\076\044\115\045\077\047\072\057\074\071\103\072\111" +
    "\001\002\000\046\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e" +
    "\071\uff9e\073\uff9e\074\uff9e\075\uff9e\077\uff9e\101\uff9e\104" +
    "\uff9e\001\002\000\010\010\207\046\211\053\210\001\002" +
    "\000\034\004\100\005\107\006\114\007\102\010\106\037" +
    "\101\040\076\044\115\045\077\047\072\057\074\071\103" +
    "\072\111\001\002\000\036\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\073\175\001\002\000\006\073" +
    "\200\104\177\001\002\000\046\056\uff7a\057\uff7a\060\uff7a" +
    "\061\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067" +
    "\uff7a\070\uff7a\071\uff7a\073\uff7a\074\uff7a\075\uff7a\077\uff7a" +
    "\101\uff7a\104\uff7a\001\002\000\036\056\126\057\122\060" +
    "\124\061\130\062\125\063\131\064\127\065\123\066\133" +
    "\067\120\070\121\071\132\073\uff78\104\uff78\001\002\000" +
    "\034\004\100\005\107\006\114\007\102\010\106\037\101" +
    "\040\076\044\115\045\077\047\072\057\074\071\103\072" +
    "\111\001\002\000\046\056\uff7b\057\uff7b\060\uff7b\061\uff7b" +
    "\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070" +
    "\uff7b\071\uff7b\073\uff7b\074\uff7b\075\uff7b\077\uff7b\101\uff7b" +
    "\104\uff7b\001\002\000\036\056\126\057\122\060\124\061" +
    "\130\062\125\063\131\064\127\065\123\066\133\067\120" +
    "\070\121\071\132\073\uff79\104\uff79\001\002\000\034\056" +
    "\126\057\122\060\124\061\130\062\125\063\131\064\127" +
    "\065\123\066\133\067\120\070\121\071\132\077\203\001" +
    "\002\000\050\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\076\204\077\uffc9\101\uffc9" +
    "\104\uffc9\001\002\000\034\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\001\002\000\034\056\126\057" +
    "\122\060\124\061\130\062\125\063\131\064\127\065\123" +
    "\066\133\067\120\070\121\071\132\077\206\001\002\000" +
    "\046\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\073" +
    "\uffc8\074\uffc8\075\uffc8\077\uffc8\101\uffc8\104\uffc8\001\002" +
    "\000\050\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063" +
    "\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\077\uff9f\100\uff9f\101\uff9f\104" +
    "\uff9f\001\002\000\004\072\215\001\002\000\004\072\212" +
    "\001\002\000\034\004\100\005\107\006\114\007\102\010" +
    "\106\037\101\040\076\044\115\045\077\047\072\057\074" +
    "\071\103\072\111\001\002\000\034\056\126\057\122\060" +
    "\124\061\130\062\125\063\131\064\127\065\123\066\133" +
    "\067\120\070\121\071\132\073\214\001\002\000\046\056" +
    "\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\073\uff95\074" +
    "\uff95\075\uff95\077\uff95\101\uff95\104\uff95\001\002\000\034" +
    "\004\100\005\107\006\114\007\102\010\106\037\101\040" +
    "\076\044\115\045\077\047\072\057\074\071\103\072\111" +
    "\001\002\000\034\056\126\057\122\060\124\061\130\062" +
    "\125\063\131\064\127\065\123\066\133\067\120\070\121" +
    "\071\132\073\217\001\002\000\046\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a" +
    "\067\uff9a\070\uff9a\071\uff9a\073\uff9a\074\uff9a\075\uff9a\077" +
    "\uff9a\101\uff9a\104\uff9a\001\002\000\046\056\126\057\122" +
    "\060\124\061\130\062\125\063\uffd4\064\127\065\123\066" +
    "\uffd4\067\uffd4\070\uffd4\071\132\073\uffd4\074\uffd4\075\uffd4" +
    "\077\uffd4\101\uffd4\104\uffd4\001\002\000\034\004\100\005" +
    "\107\006\114\007\102\010\106\037\101\040\076\044\115" +
    "\045\077\047\072\057\074\071\103\072\111\001\002\000" +
    "\034\056\126\057\122\060\124\061\130\062\125\063\131" +
    "\064\127\065\123\066\133\067\120\070\121\071\132\073" +
    "\223\001\002\000\046\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070" +
    "\uff97\071\uff97\073\uff97\074\uff97\075\uff97\077\uff97\101\uff97" +
    "\104\uff97\001\002\000\046\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\073\uffe3\074\uffe3\075\uffe3\077\uffe3\101" +
    "\uffe3\104\uffe3\001\002\000\034\004\100\005\107\006\114" +
    "\007\102\010\106\037\101\040\076\044\115\045\077\047" +
    "\072\057\074\071\103\072\111\001\002\000\034\056\126" +
    "\057\122\060\124\061\130\062\125\063\131\064\127\065" +
    "\123\066\133\067\120\070\121\071\132\073\227\001\002" +
    "\000\046\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063" +
    "\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96" +
    "\073\uff96\074\uff96\075\uff96\077\uff96\101\uff96\104\uff96\001" +
    "\002\000\050\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\073\uffa0\074\uffa0\075\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\104\uffa0\001\002\000\004\010\232\001\002\000\004\102" +
    "\242\001\002\000\006\010\232\075\236\001\002\000\004" +
    "\101\235\001\002\000\006\010\uffab\075\uffab\001\002\000" +
    "\004\010\241\001\002\000\004\101\240\001\002\000\006" +
    "\010\uffac\075\uffac\001\002\000\004\101\uffb2\001\002\000" +
    "\022\010\243\022\010\023\016\024\035\025\015\026\061" +
    "\027\053\054\164\001\002\000\004\101\uffa9\001\002\000" +
    "\004\101\uffaa\001\002\000\034\004\100\005\107\006\114" +
    "\007\102\010\106\037\101\040\076\044\115\045\077\047" +
    "\072\057\074\071\103\072\111\001\002\000\034\056\126" +
    "\057\122\060\124\061\130\062\125\063\131\064\127\065" +
    "\123\066\133\067\120\070\121\071\132\073\247\001\002" +
    "\000\004\074\250\001\002\000\056\003\042\010\037\020" +
    "\022\021\063\022\010\023\016\024\035\025\015\026\061" +
    "\027\053\030\045\032\033\033\065\034\012\035\013\036" +
    "\025\041\054\042\040\043\041\050\062\054\066\055\051" +
    "\001\002\000\060\003\042\010\037\020\022\021\063\022" +
    "\010\023\016\024\035\025\015\026\061\027\053\030\045" +
    "\032\033\033\065\034\012\035\013\036\025\041\054\042" +
    "\040\043\041\050\062\054\066\055\051\075\253\001\002" +
    "\000\062\002\uffff\003\uffff\010\uffff\020\uffff\021\uffff\022" +
    "\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\041\uffff\042" +
    "\uffff\043\uffff\050\uffff\054\uffff\055\uffff\075\uffff\001\002" +
    "\000\062\002\uff8a\003\uff8a\010\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\041\uff8a\042" +
    "\uff8a\043\uff8a\050\uff8a\054\uff8a\055\uff8a\075\uff8a\001\002" +
    "\000\004\002\001\001\002\000\020\022\010\023\016\024" +
    "\035\025\015\026\061\027\053\054\164\001\002\000\004" +
    "\065\257\001\002\000\004\010\260\001\002\000\004\063" +
    "\261\001\002\000\004\051\262\001\002\000\004\050\263" +
    "\001\002\000\004\072\264\001\002\000\004\073\265\001" +
    "\002\000\004\101\uffb3\001\002\000\062\002\uffe8\003\uffe8" +
    "\010\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\041\uffe8\042\uffe8\043\uffe8\050\uffe8\054" +
    "\uffe8\055\uffe8\075\uffe8\001\002\000\062\002\ufff9\003\ufff9" +
    "\010\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9" +
    "\035\ufff9\036\ufff9\041\ufff9\042\ufff9\043\ufff9\050\ufff9\054" +
    "\ufff9\055\ufff9\075\ufff9\001\002\000\062\002\uffe7\003\uffe7" +
    "\010\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\041\uffe7\042\uffe7\043\uffe7\050\uffe7\054" +
    "\uffe7\055\uffe7\075\uffe7\001\002\000\062\002\uffe6\003\uffe6" +
    "\010\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\041\uffe6\042\uffe6\043\uffe6\050\uffe6\054" +
    "\uffe6\055\uffe6\075\uffe6\001\002\000\062\002\ufffc\003\ufffc" +
    "\010\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\041\ufffc\042\ufffc\043\ufffc\050\ufffc\054" +
    "\ufffc\055\ufffc\075\ufffc\001\002\000\004\072\274\001\002" +
    "\000\036\004\100\005\107\006\114\007\102\010\106\037" +
    "\101\040\076\044\115\045\077\047\072\057\074\071\103" +
    "\072\111\073\276\001\002\000\006\073\277\104\177\001" +
    "\002\000\004\101\uff7c\001\002\000\004\101\uff7d\001\002" +
    "\000\062\002\ufff5\003\ufff5\010\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\050\ufff5\054\ufff5\055\ufff5\075\ufff5\001\002" +
    "\000\062\002\ufff6\003\ufff6\010\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\050\ufff6\054\ufff6\055\ufff6\075\ufff6\001\002" +
    "\000\034\004\100\005\107\006\114\007\102\010\106\037" +
    "\101\040\076\044\115\045\077\047\072\057\074\071\103" +
    "\072\111\001\002\000\034\056\126\057\122\060\124\061" +
    "\130\062\125\063\131\064\127\065\123\066\133\067\120" +
    "\070\121\071\132\073\304\001\002\000\004\074\305\001" +
    "\002\000\056\003\042\010\037\020\022\021\063\022\010" +
    "\023\016\024\035\025\015\026\061\027\053\030\045\032" +
    "\033\033\065\034\012\035\013\036\025\041\054\042\040" +
    "\043\041\050\062\054\066\055\051\001\002\000\060\003" +
    "\042\010\037\020\022\021\063\022\010\023\016\024\035" +
    "\025\015\026\061\027\053\030\045\032\033\033\065\034" +
    "\012\035\013\036\025\041\054\042\040\043\041\050\062" +
    "\054\066\055\051\075\307\001\002\000\064\002\uff94\003" +
    "\uff94\010\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\uff94\030\uff94\031\310\032\uff94\033" +
    "\uff94\034\uff94\035\uff94\036\uff94\041\uff94\042\uff94\043\uff94" +
    "\050\uff94\054\uff94\055\uff94\075\uff94\001\002\000\006\030" +
    "\045\074\312\001\002\000\062\002\uff92\003\uff92\010\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\036\uff92\041\uff92\042\uff92\043\uff92\050\uff92\054\uff92\055" +
    "\uff92\075\uff92\001\002\000\056\003\042\010\037\020\022" +
    "\021\063\022\010\023\016\024\035\025\015\026\061\027" +
    "\053\030\045\032\033\033\065\034\012\035\013\036\025" +
    "\041\054\042\040\043\041\050\062\054\066\055\051\001" +
    "\002\000\060\003\042\010\037\020\022\021\063\022\010" +
    "\023\016\024\035\025\015\026\061\027\053\030\045\032" +
    "\033\033\065\034\012\035\013\036\025\041\054\042\040" +
    "\043\041\050\062\054\066\055\051\075\314\001\002\000" +
    "\062\002\uff93\003\uff93\010\uff93\020\uff93\021\uff93\022\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\041\uff93\042\uff93" +
    "\043\uff93\050\uff93\054\uff93\055\uff93\075\uff93\001\002\000" +
    "\062\002\ufffb\003\ufffb\010\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\050\ufffb\054\ufffb\055\ufffb\075\ufffb\001\002\000" +
    "\062\002\uffe5\003\uffe5\010\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\050\uffe5\054\uffe5\055\uffe5\075\uffe5\001\002\000" +
    "\034\056\126\057\122\060\124\061\130\062\125\063\131" +
    "\064\127\065\123\066\133\067\120\070\121\071\132\101" +
    "\uff83\001\002\000\006\010\207\052\341\001\002\000\004" +
    "\056\340\001\002\000\034\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\001\002\000\004\057\336\001" +
    "\002\000\034\004\100\005\107\006\114\007\102\010\106" +
    "\037\101\040\076\044\115\045\077\047\072\057\074\071" +
    "\103\072\111\001\002\000\034\056\126\057\122\060\124" +
    "\061\130\062\125\063\131\064\127\065\123\066\133\067" +
    "\120\070\121\071\132\077\326\001\002\000\006\063\327" +
    "\076\330\001\002\000\034\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\001\002\000\034\004\100\005" +
    "\107\006\114\007\102\010\106\037\101\040\076\044\115" +
    "\045\077\047\072\057\074\071\103\072\111\001\002\000" +
    "\034\056\126\057\122\060\124\061\130\062\125\063\131" +
    "\064\127\065\123\066\133\067\120\070\121\071\132\077" +
    "\332\001\002\000\004\063\333\001\002\000\034\004\100" +
    "\005\107\006\114\007\102\010\106\037\101\040\076\044" +
    "\115\045\077\047\072\057\074\071\103\072\111\001\002" +
    "\000\034\056\126\057\122\060\124\061\130\062\125\063" +
    "\131\064\127\065\123\066\133\067\120\070\121\071\132" +
    "\101\uffa2\001\002\000\034\056\126\057\122\060\124\061" +
    "\130\062\125\063\131\064\127\065\123\066\133\067\120" +
    "\070\121\071\132\101\uffa3\001\002\000\006\073\uff9c\101" +
    "\uff9c\001\002\000\036\056\126\057\122\060\124\061\130" +
    "\062\125\063\131\064\127\065\123\066\133\067\120\070" +
    "\121\071\132\073\uffa4\101\uffa4\001\002\000\006\073\uff9d" +
    "\101\uff9d\001\002\000\004\072\342\001\002\000\034\004" +
    "\100\005\107\006\114\007\102\010\106\037\101\040\076" +
    "\044\115\045\077\047\072\057\074\071\103\072\111\001" +
    "\002\000\034\056\126\057\122\060\124\061\130\062\125" +
    "\063\131\064\127\065\123\066\133\067\120\070\121\071" +
    "\132\073\344\001\002\000\004\101\uff9b\001\002\000\062" +
    "\002\ufff3\003\ufff3\010\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\050\ufff3\054\ufff3\055\ufff3\075\ufff3\001\002\000\062" +
    "\002\uffeb\003\uffeb\010\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\050\uffeb\054\uffeb\055\uffeb\075\uffeb\001\002\000\034" +
    "\056\126\057\122\060\124\061\130\062\125\063\131\064" +
    "\127\065\123\066\133\067\120\070\121\071\132\074\350" +
    "\001\002\000\036\004\100\005\107\006\114\007\102\010" +
    "\106\037\101\040\076\044\115\045\077\047\072\057\074" +
    "\071\103\072\111\103\352\001\002\000\040\004\uff8d\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\037\uff8d\040\uff8d\044\uff8d" +
    "\045\uff8d\047\uff8d\057\uff8d\071\uff8d\072\uff8d\075\uff8d\103" +
    "\uff8d\001\002\000\004\063\370\001\002\000\040\004\100" +
    "\005\107\006\114\007\102\010\106\037\101\040\076\044" +
    "\115\045\077\047\072\057\074\071\103\072\111\075\365" +
    "\103\352\001\002\000\004\075\363\001\002\000\032\056" +
    "\126\057\122\060\124\061\130\062\125\063\356\064\127" +
    "\065\123\066\133\067\120\070\121\071\132\001\002\000" +
    "\006\063\137\065\357\001\002\000\004\074\360\001\002" +
    "\000\056\003\042\010\037\020\022\021\063\022\010\023" +
    "\016\024\035\025\015\026\061\027\053\030\045\032\033" +
    "\033\065\034\012\035\013\036\025\041\054\042\040\043" +
    "\041\050\062\054\066\055\051\001\002\000\060\003\042" +
    "\010\037\020\022\021\063\022\010\023\016\024\035\025" +
    "\015\026\061\027\053\030\045\032\033\033\065\034\012" +
    "\035\013\036\025\041\054\042\040\043\041\050\062\054" +
    "\066\055\051\075\362\001\002\000\040\004\uff8c\005\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\037\uff8c\040\uff8c\044\uff8c\045" +
    "\uff8c\047\uff8c\057\uff8c\071\uff8c\072\uff8c\075\uff8c\103\uff8c" +
    "\001\002\000\062\002\uff8f\003\uff8f\010\uff8f\020\uff8f\021" +
    "\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f" +
    "\030\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\050\uff8f\054\uff8f\055\uff8f\075\uff8f" +
    "\001\002\000\040\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\037\uff8e\040\uff8e\044\uff8e\045\uff8e\047\uff8e\057\uff8e" +
    "\071\uff8e\072\uff8e\075\uff8e\103\uff8e\001\002\000\062\002" +
    "\uff90\003\uff90\010\uff90\020\uff90\021\uff90\022\uff90\023\uff90" +
    "\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\041\uff90\042\uff90\043\uff90" +
    "\050\uff90\054\uff90\055\uff90\075\uff90\001\002\000\004\075" +
    "\367\001\002\000\062\002\uff91\003\uff91\010\uff91\020\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91" +
    "\041\uff91\042\uff91\043\uff91\050\uff91\054\uff91\055\uff91\075" +
    "\uff91\001\002\000\004\065\371\001\002\000\004\074\372" +
    "\001\002\000\056\003\042\010\037\020\022\021\063\022" +
    "\010\023\016\024\035\025\015\026\061\027\053\030\045" +
    "\032\033\033\065\034\012\035\013\036\025\041\054\042" +
    "\040\043\041\050\062\054\066\055\051\001\002\000\060" +
    "\003\042\010\037\020\022\021\063\022\010\023\016\024" +
    "\035\025\015\026\061\027\053\030\045\032\033\033\065" +
    "\034\012\035\013\036\025\041\054\042\040\043\041\050" +
    "\062\054\066\055\051\075\374\001\002\000\004\075\uff8b" +
    "\001\002\000\004\102\376\001\002\000\022\010\377\022" +
    "\010\023\016\024\035\025\015\026\061\027\053\054\164" +
    "\001\002\000\004\063\u0119\001\002\000\010\063\u0101\076" +
    "\u0102\101\uffb7\001\002\000\034\004\100\005\107\006\114" +
    "\007\102\010\106\037\101\040\076\044\115\045\077\047" +
    "\072\057\074\071\103\072\111\001\002\000\004\077\u0103" +
    "\001\002\000\006\063\u0104\076\u0105\001\002\000\004\076" +
    "\u0115\001\002\000\004\077\u0106\001\002\000\004\063\u0107" +
    "\001\002\000\004\076\u0108\001\002\000\004\076\u0109\001" +
    "\002\000\034\004\100\005\107\006\114\007\102\010\106" +
    "\037\101\040\076\044\115\045\077\047\072\057\074\071" +
    "\103\072\111\001\002\000\006\077\u010c\104\u010b\001\002" +
    "\000\004\076\u010d\001\002\000\004\101\uffb4\001\002\000" +
    "\034\004\100\005\107\006\114\007\102\010\106\037\101" +
    "\040\076\044\115\045\077\047\072\057\074\071\103\072" +
    "\111\001\002\000\006\077\u0111\104\u0110\001\002\000\036" +
    "\056\126\057\122\060\124\061\130\062\125\063\131\064" +
    "\127\065\123\066\133\067\120\070\121\071\132\077\uffaf" +
    "\104\uffaf\001\002\000\034\004\100\005\107\006\114\007" +
    "\102\010\106\037\101\040\076\044\115\045\077\047\072" +
    "\057\074\071\103\072\111\001\002\000\006\077\uffae\104" +
    "\uffae\001\002\000\036\056\126\057\122\060\124\061\130" +
    "\062\125\063\131\064\127\065\123\066\133\067\120\070" +
    "\121\071\132\077\uffb0\104\uffb0\001\002\000\006\077\u0114" +
    "\104\u0110\001\002\000\006\077\uffad\104\uffad\001\002\000" +
    "\034\004\100\005\107\006\114\007\102\010\106\037\101" +
    "\040\076\044\115\045\077\047\072\057\074\071\103\072" +
    "\111\001\002\000\006\077\u0117\104\u0110\001\002\000\004" +
    "\101\uffb5\001\002\000\034\056\126\057\122\060\124\061" +
    "\130\062\125\063\131\064\127\065\123\066\133\067\120" +
    "\070\121\071\132\101\uffb6\001\002\000\004\074\u011a\001" +
    "\002\000\004\010\u011b\001\002\000\004\102\u0121\001\002" +
    "\000\006\075\u011f\104\u011e\001\002\000\006\075\uffa7\104" +
    "\uffa7\001\002\000\004\010\u011b\001\002\000\004\101\uffb1" +
    "\001\002\000\006\075\uffa8\104\uffa8\001\002\000\036\004" +
    "\100\005\107\006\114\007\102\010\106\037\101\040\076" +
    "\044\115\045\077\047\072\057\074\071\103\072\111\074" +
    "\u0122\001\002\000\004\010\u011b\001\002\000\036\056\126" +
    "\057\122\060\124\061\130\062\125\063\131\064\127\065" +
    "\123\066\133\067\120\070\121\071\132\075\uffa6\104\uffa6" +
    "\001\002\000\006\075\u0125\104\u011e\001\002\000\006\075" +
    "\uffa5\104\uffa5\001\002\000\062\002\ufff2\003\ufff2\010\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\041\ufff2\042\ufff2\043\ufff2\050\ufff2\054\ufff2\055" +
    "\ufff2\075\ufff2\001\002\000\062\002\ufff4\003\ufff4\010\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4" +
    "\036\ufff4\041\ufff4\042\ufff4\043\ufff4\050\ufff4\054\ufff4\055" +
    "\ufff4\075\ufff4\001\002\000\062\002\uffec\003\uffec\010\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\041\uffec\042\uffec\043\uffec\050\uffec\054\uffec\055" +
    "\uffec\075\uffec\001\002\000\062\002\ufff8\003\ufff8\010\ufff8" +
    "\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\036\ufff8\041\ufff8\042\ufff8\043\ufff8\050\ufff8\054\ufff8\055" +
    "\ufff8\075\ufff8\001\002\000\034\004\100\005\107\006\114" +
    "\007\102\010\106\037\101\040\076\044\115\045\077\047" +
    "\072\057\074\071\103\072\111\001\002\000\034\056\126" +
    "\057\122\060\124\061\130\062\125\063\131\064\127\065" +
    "\123\066\133\067\120\070\121\071\132\073\u012c\001\002" +
    "\000\004\101\uff99\001\002\000\062\002\ufffa\003\ufffa\010" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\041\ufffa\042\ufffa\043\ufffa\050\ufffa\054\ufffa" +
    "\055\ufffa\075\ufffa\001\002\000\062\002\ufffd\003\ufffd\010" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\041\ufffd\042\ufffd\043\ufffd\050\ufffd\054\ufffd" +
    "\055\ufffd\075\ufffd\001\002\000\062\002\uffea\003\uffea\010" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\041\uffea\042\uffea\043\uffea\050\uffea\054\uffea" +
    "\055\uffea\075\uffea\001\002\000\056\003\042\010\037\020" +
    "\022\021\063\022\010\023\016\024\035\025\015\026\061" +
    "\027\053\030\045\032\033\033\065\034\012\035\013\036" +
    "\025\041\054\042\040\043\041\050\062\054\066\055\051" +
    "\001\002\000\060\003\042\010\037\020\022\021\063\022" +
    "\010\023\016\024\035\025\015\026\061\027\053\030\045" +
    "\032\033\033\065\034\012\035\013\036\025\041\054\042" +
    "\040\043\041\050\062\054\066\055\051\075\u0132\001\002" +
    "\000\004\033\u0133\001\002\000\004\072\u0134\001\002\000" +
    "\034\004\100\005\107\006\114\007\102\010\106\037\101" +
    "\040\076\044\115\045\077\047\072\057\074\071\103\072" +
    "\111\001\002\000\034\056\126\057\122\060\124\061\130" +
    "\062\125\063\131\064\127\065\123\066\133\067\120\070" +
    "\121\071\132\073\u0136\001\002\000\004\101\uff86\001\002" +
    "\000\004\010\u0138\001\002\000\004\063\322\001\002\000" +
    "\004\101\u013a\001\002\000\034\004\100\005\107\006\114" +
    "\007\102\010\106\037\101\040\076\044\115\045\077\047" +
    "\072\057\074\071\103\072\111\001\002\000\034\056\126" +
    "\057\122\060\124\061\130\062\125\063\131\064\127\065" +
    "\123\066\133\067\120\070\121\071\132\101\u013c\001\002" +
    "\000\004\010\u013d\001\002\000\010\056\321\057\323\063" +
    "\322\001\002\000\004\073\uff88\001\002\000\004\073\u0141" +
    "\001\002\000\004\073\uff87\001\002\000\004\074\u0142\001" +
    "\002\000\056\003\042\010\037\020\022\021\063\022\010" +
    "\023\016\024\035\025\015\026\061\027\053\030\045\032" +
    "\033\033\065\034\012\035\013\036\025\041\054\042\040" +
    "\043\041\050\062\054\066\055\051\001\002\000\060\003" +
    "\042\010\037\020\022\021\063\022\010\023\016\024\035" +
    "\025\015\026\061\027\053\030\045\032\033\033\065\034" +
    "\012\035\013\036\025\041\054\042\040\043\041\050\062" +
    "\054\066\055\051\075\u0144\001\002\000\062\002\uff89\003" +
    "\uff89\010\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89" +
    "\025\uff89\026\uff89\027\uff89\030\uff89\032\uff89\033\uff89\034" +
    "\uff89\035\uff89\036\uff89\041\uff89\042\uff89\043\uff89\050\uff89" +
    "\054\uff89\055\uff89\075\uff89\001\002\000\004\072\u0146\001" +
    "\002\000\022\022\010\023\016\024\035\025\015\026\061" +
    "\027\053\054\164\073\u0147\001\002\000\004\074\u0152\001" +
    "\002\000\004\010\u0151\001\002\000\006\073\u014b\104\u014a" +
    "\001\002\000\020\022\010\023\016\024\035\025\015\026" +
    "\061\027\053\054\164\001\002\000\004\074\u014c\001\002" +
    "\000\056\003\042\010\037\020\022\021\063\022\010\023" +
    "\016\024\035\025\015\026\061\027\053\030\045\032\033" +
    "\033\065\034\012\035\013\036\025\041\054\042\040\043" +
    "\041\050\062\054\066\055\051\001\002\000\060\003\042" +
    "\010\037\020\022\021\063\022\010\023\016\024\035\025" +
    "\015\026\061\027\053\030\045\032\033\033\065\034\012" +
    "\035\013\036\025\041\054\042\040\043\041\050\062\054" +
    "\066\055\051\075\u014e\001\002\000\062\002\uff81\003\uff81" +
    "\010\uff81\020\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025" +
    "\uff81\026\uff81\027\uff81\030\uff81\032\uff81\033\uff81\034\uff81" +
    "\035\uff81\036\uff81\041\uff81\042\uff81\043\uff81\050\uff81\054" +
    "\uff81\055\uff81\075\uff81\001\002\000\004\010\u0150\001\002" +
    "\000\006\073\uff7f\104\uff7f\001\002\000\006\073\uff7e\104" +
    "\uff7e\001\002\000\056\003\042\010\037\020\022\021\063" +
    "\022\010\023\016\024\035\025\015\026\061\027\053\030" +
    "\045\032\033\033\065\034\012\035\013\036\025\041\054" +
    "\042\040\043\041\050\062\054\066\055\051\001\002\000" +
    "\060\003\042\010\037\020\022\021\063\022\010\023\016" +
    "\024\035\025\015\026\061\027\053\030\045\032\033\033" +
    "\065\034\012\035\013\036\025\041\054\042\040\043\041" +
    "\050\062\054\066\055\051\075\u0154\001\002\000\062\002" +
    "\uff80\003\uff80\010\uff80\020\uff80\021\uff80\022\uff80\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\041\uff80\042\uff80\043\uff80" +
    "\050\uff80\054\uff80\055\uff80\075\uff80\001\002\000\062\002" +
    "\ufff1\003\ufff1\010\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\050\ufff1\054\ufff1\055\ufff1\075\ufff1\001\002\000\062\002" +
    "\ufff7\003\ufff7\010\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\050\ufff7\054\ufff7\055\ufff7\075\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\076\002\063\003\022\015\006\016\031\017" +
    "\017\021\020\022\051\023\045\024\010\025\005\027\004" +
    "\030\042\031\026\032\046\034\033\035\016\036\043\037" +
    "\047\040\023\041\027\042\056\043\030\045\025\046\003" +
    "\047\035\054\013\056\054\057\057\060\055\062\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\015\006" +
    "\016\031\017\251\021\020\022\051\023\045\024\010\025" +
    "\005\027\004\030\042\031\026\032\046\034\033\035\016" +
    "\036\043\037\047\040\023\041\027\042\056\043\030\045" +
    "\025\046\003\047\035\054\013\056\054\057\057\060\055" +
    "\062\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\020\346\026\103\044" +
    "\104\050\107\051\111\052\115\053\112\057\072\062\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\020\316" +
    "\026\103\044\104\050\107\051\111\052\115\053\112\057" +
    "\072\062\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\020\116\026\103\044" +
    "\104\050\107\051\111\052\115\053\112\057\072\062\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\020" +
    "\223\026\103\044\104\050\107\051\111\052\115\053\112" +
    "\057\072\062\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\020\217\026\103\044\104\050" +
    "\107\051\111\052\115\053\112\057\072\062\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\015\162\020\164" +
    "\026\103\044\104\050\107\051\111\052\115\053\112\057" +
    "\072\062\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\020\156\026\103\044\104\050\107" +
    "\051\111\052\115\053\112\057\072\062\074\001\001\000" +
    "\024\020\155\026\103\044\104\050\107\051\111\052\115" +
    "\053\112\057\072\062\074\001\001\000\024\020\154\026" +
    "\103\044\104\050\107\051\111\052\115\053\112\057\072" +
    "\062\074\001\001\000\024\020\152\026\103\044\104\050" +
    "\107\051\111\052\115\053\112\057\072\062\074\001\001" +
    "\000\024\020\147\026\103\044\104\050\107\051\111\052" +
    "\115\053\112\057\072\062\074\001\001\000\024\020\145" +
    "\026\103\044\104\050\107\051\111\052\115\053\112\057" +
    "\072\062\074\001\001\000\024\020\144\026\103\044\104" +
    "\050\107\051\111\052\115\053\112\057\072\062\074\001" +
    "\001\000\024\020\142\026\103\044\104\050\107\051\111" +
    "\052\115\053\112\057\072\062\074\001\001\000\024\020" +
    "\140\026\103\044\104\050\107\051\111\052\115\053\112" +
    "\057\072\062\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\020\133\026\103\044\104\050\107\051\111" +
    "\052\115\053\112\057\072\062\074\001\001\000\002\001" +
    "\001\000\024\020\135\026\103\044\104\050\107\051\111" +
    "\052\115\053\112\057\072\062\074\001\001\000\002\001" +
    "\001\000\024\020\137\026\103\044\104\050\107\051\111" +
    "\052\115\053\112\057\072\062\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\020\143\026\103\044\104" +
    "\050\107\051\111\052\115\053\112\057\072\062\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\020\150\026\103\044\104\050" +
    "\107\051\111\052\115\053\112\057\072\062\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\020\153\026" +
    "\103\044\104\050\107\051\111\052\115\053\112\057\072" +
    "\062\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\020\160\026\103\044\104\050\107\051\111\052\115\053" +
    "\112\057\072\062\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\020\167\026\103\044\104" +
    "\050\107\051\111\052\115\053\112\057\072\062\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\020\201" +
    "\026\103\044\104\050\107\051\111\052\115\053\112\057" +
    "\072\062\074\001\001\000\026\020\175\026\103\044\104" +
    "\050\107\051\111\052\115\053\112\057\072\061\173\062" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\020\200\026\103\044\104\050\107\051" +
    "\111\052\115\053\112\057\072\062\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\020\204\026\103\044\104\050\107\051\111" +
    "\052\115\053\112\057\072\062\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\020\212\026\103\044\104\050" +
    "\107\051\111\052\115\053\112\057\072\062\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\020\215\026" +
    "\103\044\104\050\107\051\111\052\115\053\112\057\072" +
    "\062\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\020\221\026\103\044\104\050\107" +
    "\051\111\052\115\053\112\057\072\062\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\020\225\026\103\044\104\050\107\051\111\052\115\053" +
    "\112\057\072\062\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\232\012\233\001" +
    "\001\000\002\001\001\000\004\012\236\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\020" +
    "\245\026\103\044\104\050\107\051\111\052\115\053\112" +
    "\057\072\062\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\250\015\006\016\031\017\017\021\020" +
    "\022\051\023\045\024\010\025\005\027\004\030\042\031" +
    "\026\032\046\034\033\035\016\036\043\037\047\040\023" +
    "\041\027\042\056\043\030\045\025\046\003\047\035\054" +
    "\013\056\054\057\057\060\055\062\066\001\001\000\072" +
    "\015\006\016\031\017\251\021\020\022\051\023\045\024" +
    "\010\025\005\027\004\030\042\031\026\032\046\034\033" +
    "\035\016\036\043\037\047\040\023\041\027\042\056\043" +
    "\030\045\025\046\003\047\035\054\013\056\054\057\057" +
    "\060\055\062\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\175\026\103\044\104\050\107\051" +
    "\111\052\115\053\112\057\072\061\274\062\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\020\302\026\103" +
    "\044\104\050\107\051\111\052\115\053\112\057\072\062" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\003\305\015\006\016\031\017\017\021\020\022\051\023" +
    "\045\024\010\025\005\027\004\030\042\031\026\032\046" +
    "\034\033\035\016\036\043\037\047\040\023\041\027\042" +
    "\056\043\030\045\025\046\003\047\035\054\013\056\054" +
    "\057\057\060\055\062\066\001\001\000\072\015\006\016" +
    "\031\017\251\021\020\022\051\023\045\024\010\025\005" +
    "\027\004\030\042\031\026\032\046\034\033\035\016\036" +
    "\043\037\047\040\023\041\027\042\056\043\030\045\025" +
    "\046\003\047\035\054\013\056\054\057\057\060\055\062" +
    "\066\001\001\000\002\001\001\000\004\024\310\001\001" +
    "\000\002\001\001\000\074\003\312\015\006\016\031\017" +
    "\017\021\020\022\051\023\045\024\010\025\005\027\004" +
    "\030\042\031\026\032\046\034\033\035\016\036\043\037" +
    "\047\040\023\041\027\042\056\043\030\045\025\046\003" +
    "\047\035\054\013\056\054\057\057\060\055\062\066\001" +
    "\001\000\072\015\006\016\031\017\251\021\020\022\051" +
    "\023\045\024\010\025\005\027\004\030\042\031\026\032" +
    "\046\034\033\035\016\036\043\037\047\040\023\041\027" +
    "\042\056\043\030\045\025\046\003\047\035\054\013\056" +
    "\054\057\057\060\055\062\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\020\336\026\103" +
    "\044\104\050\107\051\111\052\115\053\112\057\072\062" +
    "\074\001\001\000\002\001\001\000\024\020\324\026\103" +
    "\044\104\050\107\051\111\052\115\053\112\057\072\062" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\020\334\026\103\044\104\050\107\051\111\052\115\053" +
    "\112\057\072\062\074\001\001\000\024\020\330\026\103" +
    "\044\104\050\107\051\111\052\115\053\112\057\072\062" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\020\333\026\103\044\104\050\107\051\111\052\115\053" +
    "\112\057\072\062\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\020\342\026\103\044\104" +
    "\050\107\051\111\052\115\053\112\057\072\062\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\004\353\006" +
    "\352\010\350\020\354\026\103\044\104\050\107\051\111" +
    "\052\115\053\112\057\072\062\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\365\010\363\020\354" +
    "\026\103\044\104\050\107\051\111\052\115\053\112\057" +
    "\072\062\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\003\360\015" +
    "\006\016\031\017\017\021\020\022\051\023\045\024\010" +
    "\025\005\027\004\030\042\031\026\032\046\034\033\035" +
    "\016\036\043\037\047\040\023\041\027\042\056\043\030" +
    "\045\025\046\003\047\035\054\013\056\054\057\057\060" +
    "\055\062\066\001\001\000\072\015\006\016\031\017\251" +
    "\021\020\022\051\023\045\024\010\025\005\027\004\030" +
    "\042\031\026\032\046\034\033\035\016\036\043\037\047" +
    "\040\023\041\027\042\056\043\030\045\025\046\003\047" +
    "\035\054\013\056\054\057\057\060\055\062\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\003\372\015\006\016" +
    "\031\017\017\021\020\022\051\023\045\024\010\025\005" +
    "\027\004\030\042\031\026\032\046\034\033\035\016\036" +
    "\043\037\047\040\023\041\027\042\056\043\030\045\025" +
    "\046\003\047\035\054\013\056\054\057\057\060\055\062" +
    "\066\001\001\000\072\015\006\016\031\017\251\021\020" +
    "\022\051\023\045\024\010\025\005\027\004\030\042\031" +
    "\026\032\046\034\033\035\016\036\043\037\047\040\023" +
    "\041\027\042\056\043\030\045\025\046\003\047\035\054" +
    "\013\056\054\057\057\060\055\062\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\020\u0117\026\103" +
    "\044\104\050\107\051\111\052\115\053\112\057\072\062" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u0109\001\001\000\026\005\u0112\020\u010e" +
    "\026\103\044\104\050\107\051\111\052\115\053\112\057" +
    "\072\062\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\u010d\020\u010e\026\103\044" +
    "\104\050\107\051\111\052\115\053\112\057\072\062\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\020" +
    "\u0111\026\103\044\104\050\107\051\111\052\115\053\112" +
    "\057\072\062\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\u0115" +
    "\020\u010e\026\103\044\104\050\107\051\111\052\115\053" +
    "\112\057\072\062\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\u011b\014\u011c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\020\u0122\026\103\044\104" +
    "\050\107\051\111\052\115\053\112\057\072\062\074\001" +
    "\001\000\006\013\u0123\014\u011c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\020\u012a\026\103\044\104\050\107\051\111\052\115\053" +
    "\112\057\072\062\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\u0130\015\006\016\031\017\017\021\020" +
    "\022\051\023\045\024\010\025\005\027\004\030\042\031" +
    "\026\032\046\034\033\035\016\036\043\037\047\040\023" +
    "\041\027\042\056\043\030\045\025\046\003\047\035\054" +
    "\013\056\054\057\057\060\055\062\066\001\001\000\072" +
    "\015\006\016\031\017\251\021\020\022\051\023\045\024" +
    "\010\025\005\027\004\030\042\031\026\032\046\034\033" +
    "\035\016\036\043\037\047\040\023\041\027\042\056\043" +
    "\030\045\025\046\003\047\035\054\013\056\054\057\057" +
    "\060\055\062\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\020\u0134\026\103\044\104\050\107\051\111" +
    "\052\115\053\112\057\072\062\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\020\u013a\026\103\044" +
    "\104\050\107\051\111\052\115\053\112\057\072\062\074" +
    "\001\001\000\002\001\001\000\010\023\u013d\027\u013f\033" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
    "\u0142\015\006\016\031\017\017\021\020\022\051\023\045" +
    "\024\010\025\005\027\004\030\042\031\026\032\046\034" +
    "\033\035\016\036\043\037\047\040\023\041\027\042\056" +
    "\043\030\045\025\046\003\047\035\054\013\056\054\057" +
    "\057\060\055\062\066\001\001\000\072\015\006\016\031" +
    "\017\251\021\020\022\051\023\045\024\010\025\005\027" +
    "\004\030\042\031\026\032\046\034\033\035\016\036\043" +
    "\037\047\040\023\041\027\042\056\043\030\045\025\046" +
    "\003\047\035\054\013\056\054\057\057\060\055\062\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\u0147\055\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u014e\001\001\000\002\001" +
    "\001\000\074\003\u014c\015\006\016\031\017\017\021\020" +
    "\022\051\023\045\024\010\025\005\027\004\030\042\031" +
    "\026\032\046\034\033\035\016\036\043\037\047\040\023" +
    "\041\027\042\056\043\030\045\025\046\003\047\035\054" +
    "\013\056\054\057\057\060\055\062\066\001\001\000\072" +
    "\015\006\016\031\017\251\021\020\022\051\023\045\024" +
    "\010\025\005\027\004\030\042\031\026\032\046\034\033" +
    "\035\016\036\043\037\047\040\023\041\027\042\056\043" +
    "\030\045\025\046\003\047\035\054\013\056\054\057\057" +
    "\060\055\062\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\003\u0152" +
    "\015\006\016\031\017\017\021\020\022\051\023\045\024" +
    "\010\025\005\027\004\030\042\031\026\032\046\034\033" +
    "\035\016\036\043\037\047\040\023\041\027\042\056\043" +
    "\030\045\025\046\003\047\035\054\013\056\054\057\057" +
    "\060\055\062\066\001\001\000\072\015\006\016\031\017" +
    "\251\021\020\022\051\023\045\024\010\025\005\027\004" +
    "\030\042\031\026\032\046\034\033\035\016\036\043\037" +
    "\047\040\023\041\027\042\056\043\030\045\025\046\003" +
    "\047\035\054\013\056\054\057\057\060\055\062\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<exceptions.Error> parserErrors = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECLARACION_LISTAS_DINAMICAS PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DECLARACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTANCIACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= ASIGNACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ASIGNACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= ASIGNACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= AGREGAR_VALOR_LISTA PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= INCREMENTO_DECREMENTO PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= SENTENCIA_MATCH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= SENTENCIA_DO_WHILE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= SENTENCIA_BREAK PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= SENTENCIA_CONTINUE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= METODO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= LLAMADA PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= SENTENCIA_RETURN PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= START_WITH PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= error PUNTO_COMA 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, Operators.NEGACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= CASTEO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION MULT MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.POTENCIA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MULTIPLICACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.DIVISION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MODULO, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.SUMA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.RESTA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION NOT IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.DIFERENCIACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION MENOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION MAYOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, Operators.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(Integer.parseInt(a), new Type(DataType.ENTERO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(new Double(a), new Type(DataType.DECIMAL), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CADENA), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= CARACTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= KW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(true, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= KW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(false, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAccess(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= QUITAR_VALOR_LISTA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= ACCESO_STRUCT 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new StructAccess(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= ROUND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= TO_STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= LENGTH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= FIND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= LLAMADA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= KW_INT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= KW_DOUBLE 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= KW_BOOL 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= KW_CHAR 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= KW_STRING 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= KW_STRUCT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.STRUCT);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= KW_VOID 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.VOID);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MUTABILIDAD ::= KW_CONST 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.CONST;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MUTABILIDAD ::= KW_VAR 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.VAR;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, d, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_VECTORES_1D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_1D",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_VECTORES_2D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V2D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, true, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_2D",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_LISTAS_DINAMICAS ::= KW_LIST MENOR_QUE TIPO MAYOR_QUE ID IGUAL KW_NEW KW_LIST PAR_IZQ PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		   RESULT = new DynamicListDeclaration(b, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTAS_DINAMICAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION_STRUCT ::= KW_STRUCT LLAVE_IZQ LISTA_STRUCT LLAVE_DER ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructDeclaration(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTANCIACION_STRUCT ::= MUTABILIDAD ID DOS_PUNTOS ID IGUAL LLAVE_IZQ LISTA_VALORES_STRUCT LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<StructValue> d = (LinkedList<StructValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new StructInstantiation(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_STRUCT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_VALORES_V1D ::= LISTA_VALORES_V1D COMA EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_VALORES_V1D ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_VALORES_V2D ::= LISTA_VALORES_V2D COMA CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_VALORES_V2D ::= CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_STRUCT ::= LISTA_STRUCT CAMPO_STRUCT PUNTO_COMA 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StructField b = (StructField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_STRUCT ::= CAMPO_STRUCT PUNTO_COMA 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StructField a = (StructField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CAMPO_STRUCT ::= ID DOS_PUNTOS TIPO 
            {
              StructField RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructField(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CAMPO_STRUCT ::= ID DOS_PUNTOS ID 
            {
              StructField RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructField(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_VALORES_STRUCT ::= LISTA_VALORES_STRUCT COMA VALOR_STRUCT 
            {
              LinkedList<StructValue> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructValue> a = (LinkedList<StructValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructValue b = (StructValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_STRUCT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTA_VALORES_STRUCT ::= VALOR_STRUCT 
            {
              LinkedList<StructValue> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructValue a = (StructValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_STRUCT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALOR_STRUCT ::= ID DOS_PUNTOS EXPRESION 
            {
              StructValue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructValue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_STRUCT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALOR_STRUCT ::= ID DOS_PUNTOS LLAVE_IZQ LISTA_VALORES_STRUCT LLAVE_DER 
            {
              StructValue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<StructValue> b = (LinkedList<StructValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new StructValue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_STRUCT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAssignment(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ASIGNACION_VECTORES_1D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_1D",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ASIGNACION_VECTORES_2D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_2D",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ASIGNACION_STRUCT ::= ACCESO_STRUCT IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructAssignment(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ACCESO_STRUCT ::= ACCESO_STRUCT PUNTO ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ACCESO_STRUCT ::= ID PUNTO ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a); RESULT.add(b);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESO_STRUCT",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASTEO ::= PAR_IZQ TIPO PAR_DER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new TypeCasting(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INCREMENTO_DECREMENTO ::= ID MAS MAS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Incremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INCREMENTO_DECREMENTO ::= ID MENOS MENOS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Decremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AGREGAR_VALOR_LISTA ::= ID PUNTO KW_APPEND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Append(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGREGAR_VALOR_LISTA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // QUITAR_VALOR_LISTA ::= ID PUNTO KW_REMOVE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Remove(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUITAR_VALOR_LISTA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PRINTLN ::= KW_PRINTLN PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Print(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ROUND ::= KW_ROUND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROUND",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LENGTH ::= KW_LENGTH PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Length(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LENGTH",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TO_STRING ::= KW_TO_STRING PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TO_STRING",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FIND ::= ID PUNTO KW_FIND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Find(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CASOS_MATCH ::= CASOS_MATCH CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> a = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch b = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CASOS_MATCH ::= CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CASO_MATCH ::= EXPRESION IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CaseMatch(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_MATCH",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DEFAULT_MATCH ::= GUION_BAJO IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_MATCH",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_WHILE ::= KW_WHILE PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_FOR ::= KW_FOR PAR_IZQ ASIGNACION PUNTO_COMA EXPRESION PUNTO_COMA ACTUALIZA_FOR PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACTUALIZA_FOR ::= ASIGNACION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ACTUALIZA_FOR ::= INCREMENTO_DECREMENTO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_DO_WHILE ::= KW_DO LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_WHILE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_BREAK ::= KW_BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_CONTINUE ::= KW_CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONTINUE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_RETURN ::= KW_RETURN EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Return(b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_RETURN ::= KW_RETURN 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Return(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // METODO ::= TIPO ID PAR_IZQ PARAMETROS PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Method(b, p, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // METODO ::= TIPO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Method(b, new LinkedList<HashMap>(), c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARAMETROS ::= PARAMETROS COMA TIPO ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = a;
                                                    var hm2= new HashMap<String, Object>();
                                                    hm2.put("id", c);
                                                    hm2.put("tipo", b);
                                                    RESULT.add(hm2);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARAMETROS ::= TIPO ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = new LinkedList<HashMap>(); 
                                                    var hm = new HashMap<String, Object>();
                                                    hm.put("id",b);
                                                    hm.put("tipo", a);
                                                    RESULT.add(hm);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // START_WITH ::= KW_START_WITH ID PAR_IZQ PARAMETROS_LLAMADA PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START_WITH",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // START_WITH ::= KW_START_WITH ID PAR_IZQ PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruction>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START_WITH",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LLAMADA ::= ID PAR_IZQ PARAMETROS_LLAMADA PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT= new MethodCall(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LLAMADA ::= ID PAR_IZQ PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new MethodCall(a, new LinkedList<Instruction>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PARAMETROS_LLAMADA ::= PARAMETROS_LLAMADA COMA EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                    RESULT = a;
                                                                    RESULT.add(e);
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PARAMETROS_LLAMADA ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                    RESULT = new LinkedList<Instruction>(); 
                                                                    RESULT.add(a);
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
