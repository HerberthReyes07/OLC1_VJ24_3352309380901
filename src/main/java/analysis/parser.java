
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruction;
import symbol.Type;
import symbol.DataType;
import symbol.Operators;
import symbol.MutabilityType;
import instructions.Print;
import instructions.Declaration;
import instructions.VariableAssignment;
import instructions.If;
import instructions.Match;
import instructions.CaseMatch;
import instructions.While;
import instructions.For;
import instructions.DoWhile;
import instructions.Break;
import instructions.Continue;
import instructions.VectorDeclaration;
import instructions.VectorAssignment;
import instructions.DynamicListDeclaration;
import instructions.Append;
import expressions.Native;
import expressions.Arithmetic;
import expressions.Relational;
import expressions.Logical;
import expressions.VariableAccess;
import expressions.TypeCasting;
import expressions.Round;
import expressions.VectorAccess;
import expressions.Length;
import expressions.Remove;
import expressions.Find;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\003\000\002\014\004\000\002\014\006\000\002" +
    "\014\003\000\002\014\006\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\006\000\002\014\005\000" +
    "\002\014\006\000\002\014\005\000\002\014\006\000\002" +
    "\014\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\006\000\002\014\011\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\003\000\002\016\006\000\002\016\010\000\002" +
    "\032\014\000\002\034\016\000\002\036\014\000\002\005" +
    "\005\000\002\005\003\000\002\007\007\000\002\007\005" +
    "\000\002\017\005\000\002\033\010\000\002\035\013\000" +
    "\002\022\006\000\002\023\005\000\002\023\005\000\002" +
    "\037\010\000\002\040\010\000\002\015\006\000\002\041" +
    "\006\000\002\042\006\000\002\043\010\000\002\020\011" +
    "\000\002\020\015\000\002\020\013\000\002\021\010\000" +
    "\002\021\007\000\002\021\007\000\002\006\004\000\002" +
    "\006\003\000\002\010\010\000\002\004\010\000\002\024" +
    "\011\000\002\026\015\000\002\027\003\000\002\027\003" +
    "\000\002\025\012\000\002\030\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\034\003\035\010\024\020\013\021\040\027" +
    "\014\031\021\032\032\033\034\034\015\035\004\036\030" +
    "\037\010\045\045\001\002\000\004\074\uff9f\001\002\000" +
    "\004\074\377\001\002\000\040\002\ufffe\003\ufffe\010\ufffe" +
    "\020\ufffe\021\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\045\ufffe\070\ufffe\001\002" +
    "\000\004\074\376\001\002\000\004\065\373\001\002\000" +
    "\004\074\372\001\002\000\040\002\ufff0\003\ufff0\010\ufff0" +
    "\020\ufff0\021\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\045\ufff0\070\ufff0\001\002" +
    "\000\004\010\uffc5\001\002\000\004\065\357\001\002\000" +
    "\004\067\350\001\002\000\004\074\347\001\002\000\036" +
    "\002\000\003\035\010\024\020\013\021\040\027\014\031" +
    "\021\032\032\033\034\034\015\035\004\036\030\037\010" +
    "\045\045\001\002\000\004\074\346\001\002\000\032\004" +
    "\113\005\122\006\127\007\115\010\121\040\114\041\111" +
    "\042\130\043\112\052\110\064\116\065\125\001\002\000" +
    "\040\002\ufff2\003\ufff2\010\ufff2\020\ufff2\021\ufff2\027\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\045\ufff2\070\ufff2\001\002\000\040\002\ufff3\003\ufff3" +
    "\010\ufff3\020\ufff3\021\ufff3\027\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\045\ufff3\070\ufff3" +
    "\001\002\000\014\051\261\052\263\056\262\071\302\073" +
    "\301\001\002\000\004\074\300\001\002\000\004\074\277" +
    "\001\002\000\004\074\276\001\002\000\004\074\uff9e\001" +
    "\002\000\004\074\275\001\002\000\004\065\267\001\002" +
    "\000\040\002\ufff1\003\ufff1\010\ufff1\020\ufff1\021\ufff1\027" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\045\ufff1\070\ufff1\001\002\000\004\065\242\001" +
    "\002\000\042\002\uffeb\003\uffeb\010\uffeb\020\uffeb\021\uffeb" +
    "\027\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\045\uffeb\070\uffeb\074\241\001\002\000\004" +
    "\074\240\001\002\000\004\010\070\001\002\000\004\010" +
    "\uffc4\001\002\000\004\074\067\001\002\000\004\074\066" +
    "\001\002\000\004\074\065\001\002\000\004\002\064\001" +
    "\002\000\004\057\046\001\002\000\014\022\052\023\047" +
    "\024\050\025\051\026\054\001\002\000\014\056\uffc9\060" +
    "\uffc9\066\uffc9\071\uffc9\074\uffc9\001\002\000\014\056\uffc8" +
    "\060\uffc8\066\uffc8\071\uffc8\074\uffc8\001\002\000\014\056" +
    "\uffc7\060\uffc7\066\uffc7\071\uffc7\074\uffc7\001\002\000\014" +
    "\056\uffca\060\uffca\066\uffca\071\uffca\074\uffca\001\002\000" +
    "\004\060\055\001\002\000\014\056\uffc6\060\uffc6\066\uffc6" +
    "\071\uffc6\074\uffc6\001\002\000\004\010\056\001\002\000" +
    "\004\056\057\001\002\000\004\046\060\001\002\000\004" +
    "\045\061\001\002\000\004\065\062\001\002\000\004\066" +
    "\063\001\002\000\004\074\uffbf\001\002\000\004\002\001" +
    "\001\002\000\040\002\ufff7\003\ufff7\010\ufff7\020\ufff7\021" +
    "\ufff7\027\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\045\ufff7\070\ufff7\001\002\000\040\002" +
    "\ufff5\003\ufff5\010\ufff5\020\ufff5\021\ufff5\027\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\045" +
    "\ufff5\070\ufff5\001\002\000\040\002\ufffa\003\ufffa\010\ufffa" +
    "\020\ufffa\021\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\045\ufffa\070\ufffa\001\002" +
    "\000\004\075\071\001\002\000\014\022\052\023\047\024" +
    "\050\025\051\026\054\001\002\000\010\056\073\071\074" +
    "\074\uffc3\001\002\000\032\004\113\005\122\006\127\007" +
    "\115\010\121\040\114\041\111\042\130\043\112\052\110" +
    "\064\116\065\125\001\002\000\004\072\075\001\002\000" +
    "\006\056\076\071\077\001\002\000\004\071\234\001\002" +
    "\000\004\072\100\001\002\000\004\056\101\001\002\000" +
    "\004\071\102\001\002\000\004\071\103\001\002\000\032" +
    "\004\113\005\122\006\127\007\115\010\121\040\114\041" +
    "\111\042\130\043\112\052\110\064\116\065\125\001\002" +
    "\000\006\072\106\077\105\001\002\000\004\071\107\001" +
    "\002\000\004\074\uffc0\001\002\000\032\004\113\005\122" +
    "\006\127\007\115\010\121\040\114\041\111\042\130\043" +
    "\112\052\110\064\116\065\125\001\002\000\032\004\113" +
    "\005\122\006\127\007\115\010\121\040\114\041\111\042" +
    "\130\043\112\052\110\064\116\065\125\001\002\000\044" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\066\uffd2" +
    "\067\uffd2\072\uffd2\074\uffd2\077\uffd2\001\002\000\004\065" +
    "\226\001\002\000\044\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\066\uffd5\067\uffd5\072\uffd5\074\uffd5\077\uffd5" +
    "\001\002\000\044\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\066\uffd3\067\uffd3\072\uffd3\074\uffd3\077\uffd3\001" +
    "\002\000\044\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\066\uffd6\067\uffd6\072\uffd6\074\uffd6\077\uffd6\001\002" +
    "\000\032\004\113\005\122\006\127\007\115\010\121\040" +
    "\114\041\111\042\130\043\112\052\110\064\116\065\125" +
    "\001\002\000\044\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\066\uffe8\067\uffe8\072\uffe8\074\uffe8\077\uffe8\001" +
    "\002\000\044\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064" +
    "\uffce\066\uffce\067\uffce\072\uffce\074\uffce\077\uffce\001\002" +
    "\000\050\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\066\uffd1\067\uffd1\071\207\072\uffd1\073\206\074\uffd1\077" +
    "\uffd1\001\002\000\044\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\066\uffd4\067\uffd4\072\uffd4\074\uffd4\077\uffd4" +
    "\001\002\000\044\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd" +
    "\064\uffcd\066\uffcd\067\uffcd\072\uffcd\074\uffcd\077\uffcd\001" +
    "\002\000\006\072\204\077\203\001\002\000\044\004\113" +
    "\005\122\006\127\007\115\010\121\022\052\023\047\024" +
    "\050\025\051\026\054\040\114\041\111\042\130\043\112" +
    "\052\110\064\116\065\125\001\002\000\044\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc\067\uffcc\072" +
    "\uffcc\074\uffcc\077\uffcc\001\002\000\044\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\064\uffd7\066\uffd7\067\uffd7\072\uffd7" +
    "\074\uffd7\077\uffd7\001\002\000\004\065\173\001\002\000" +
    "\044\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\066" +
    "\uffcb\067\uffcb\072\uffcb\074\uffcb\077\uffcb\001\002\000\036" +
    "\051\141\052\135\053\140\054\143\055\137\056\144\057" +
    "\142\060\136\061\146\062\133\063\134\064\145\072\uffbd" +
    "\077\uffbd\001\002\000\032\004\113\005\122\006\127\007" +
    "\115\010\121\040\114\041\111\042\130\043\112\052\110" +
    "\064\116\065\125\001\002\000\032\004\113\005\122\006" +
    "\127\007\115\010\121\040\114\041\111\042\130\043\112" +
    "\052\110\064\116\065\125\001\002\000\032\004\113\005" +
    "\122\006\127\007\115\010\121\040\114\041\111\042\130" +
    "\043\112\052\110\064\116\065\125\001\002\000\034\004" +
    "\113\005\122\006\127\007\115\010\121\040\114\041\111" +
    "\042\130\043\112\052\110\056\165\064\116\065\125\001" +
    "\002\000\032\004\113\005\122\006\127\007\115\010\121" +
    "\040\114\041\111\042\130\043\112\052\110\064\116\065" +
    "\125\001\002\000\034\004\113\005\122\006\127\007\115" +
    "\010\121\040\114\041\111\042\130\043\112\052\110\053" +
    "\161\064\116\065\125\001\002\000\032\004\113\005\122" +
    "\006\127\007\115\010\121\040\114\041\111\042\130\043" +
    "\112\052\110\064\116\065\125\001\002\000\034\004\113" +
    "\005\122\006\127\007\115\010\121\040\114\041\111\042" +
    "\130\043\112\052\110\056\155\064\116\065\125\001\002" +
    "\000\032\004\113\005\122\006\127\007\115\010\121\040" +
    "\114\041\111\042\130\043\112\052\110\064\116\065\125" +
    "\001\002\000\004\056\152\001\002\000\004\056\150\001" +
    "\002\000\032\004\113\005\122\006\127\007\115\010\121" +
    "\040\114\041\111\042\130\043\112\052\110\064\116\065" +
    "\125\001\002\000\044\051\141\052\135\053\140\054\143" +
    "\055\137\056\uffd8\057\142\060\136\061\uffd8\062\133\063" +
    "\134\064\145\066\uffd8\067\uffd8\072\uffd8\074\uffd8\077\uffd8" +
    "\001\002\000\032\004\113\005\122\006\127\007\115\010" +
    "\121\040\114\041\111\042\130\043\112\052\110\064\116" +
    "\065\125\001\002\000\044\051\141\052\135\053\140\054" +
    "\143\055\137\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\066\uffe0\067\uffe0\072\uffe0\074\uffe0\077" +
    "\uffe0\001\002\000\032\004\113\005\122\006\127\007\115" +
    "\010\121\040\114\041\111\042\130\043\112\052\110\064" +
    "\116\065\125\001\002\000\044\051\141\052\135\053\140" +
    "\054\143\055\137\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\066\uffe9\067\uffe9\072\uffe9\074\uffe9" +
    "\077\uffe9\001\002\000\044\051\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\066\uffe5\067\uffe5\072\uffe5\074\uffe5\077" +
    "\uffe5\001\002\000\032\004\113\005\122\006\127\007\115" +
    "\010\121\040\114\041\111\042\130\043\112\052\110\064" +
    "\116\065\125\001\002\000\044\051\141\052\135\053\140" +
    "\054\143\055\137\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\066\uffdf\067\uffdf\072\uffdf\074\uffdf" +
    "\077\uffdf\001\002\000\044\051\141\052\135\053\140\054" +
    "\143\055\137\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\066\uffde\067\uffde\072\uffde\074\uffde\077" +
    "\uffde\001\002\000\044\051\uffe3\052\uffe3\053\140\054\143" +
    "\055\137\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\066\uffe3\067\uffe3\072\uffe3\074\uffe3\077\uffe3" +
    "\001\002\000\032\004\113\005\122\006\127\007\115\010" +
    "\121\040\114\041\111\042\130\043\112\052\110\064\116" +
    "\065\125\001\002\000\044\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\066\uffe6\067\uffe6\072\uffe6\074\uffe6\077" +
    "\uffe6\001\002\000\044\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\064\uffe7\066\uffe7\067\uffe7\072\uffe7\074\uffe7\077\uffe7" +
    "\001\002\000\044\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\066\uffe4\067\uffe4\072\uffe4\074\uffe4\077\uffe4\001" +
    "\002\000\032\004\113\005\122\006\127\007\115\010\121" +
    "\040\114\041\111\042\130\043\112\052\110\064\116\065" +
    "\125\001\002\000\044\051\141\052\135\053\140\054\143" +
    "\055\137\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\066\uffdd\067\uffdd\072\uffdd\074\uffdd\077\uffdd" +
    "\001\002\000\044\051\141\052\135\053\140\054\143\055" +
    "\137\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\066\uffdc\067\uffdc\072\uffdc\074\uffdc\077\uffdc\001" +
    "\002\000\044\051\uffe2\052\uffe2\053\140\054\143\055\137" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\066\uffe2\067\uffe2\072\uffe2\074\uffe2\077\uffe2\001\002" +
    "\000\044\051\141\052\135\053\140\054\143\055\137\056" +
    "\uffda\057\142\060\136\061\uffda\062\uffda\063\uffda\064\145" +
    "\066\uffda\067\uffda\072\uffda\074\uffda\077\uffda\001\002\000" +
    "\044\051\141\052\135\053\140\054\143\055\137\056\uffd9" +
    "\057\142\060\136\061\uffd9\062\uffd9\063\134\064\145\066" +
    "\uffd9\067\uffd9\072\uffd9\074\uffd9\077\uffd9\001\002\000\032" +
    "\004\113\005\122\006\127\007\115\010\121\040\114\041" +
    "\111\042\130\043\112\052\110\064\116\065\125\001\002" +
    "\000\034\051\141\052\135\053\140\054\143\055\137\056" +
    "\144\057\142\060\136\061\146\062\133\063\134\064\145" +
    "\066\175\001\002\000\044\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\066\uffb1\067\uffb1\072\uffb1\074\uffb1\077" +
    "\uffb1\001\002\000\004\066\201\001\002\000\034\051\141" +
    "\052\135\053\140\054\143\055\137\056\144\057\142\060" +
    "\136\061\146\062\133\063\134\064\145\066\200\001\002" +
    "\000\044\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056" +
    "\uffe1\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1" +
    "\066\uffe1\067\uffe1\072\uffe1\074\uffe1\077\uffe1\001\002\000" +
    "\032\004\113\005\122\006\127\007\115\010\121\040\114" +
    "\041\111\042\130\043\112\052\110\064\116\065\125\001" +
    "\002\000\044\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\066\uffb7\067\uffb7\072\uffb7\074\uffb7\077\uffb7\001\002" +
    "\000\032\004\113\005\122\006\127\007\115\010\121\040" +
    "\114\041\111\042\130\043\112\052\110\064\116\065\125" +
    "\001\002\000\006\072\uffbc\077\uffbc\001\002\000\036\051" +
    "\141\052\135\053\140\054\143\055\137\056\144\057\142" +
    "\060\136\061\146\062\133\063\134\064\145\072\uffbe\077" +
    "\uffbe\001\002\000\006\044\216\050\215\001\002\000\032" +
    "\004\113\005\122\006\127\007\115\010\121\040\114\041" +
    "\111\042\130\043\112\052\110\064\116\065\125\001\002" +
    "\000\034\051\141\052\135\053\140\054\143\055\137\056" +
    "\144\057\142\060\136\061\146\062\133\063\134\064\145" +
    "\072\211\001\002\000\046\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\064\uffd0\066\uffd0\067\uffd0\071\212\072\uffd0\074" +
    "\uffd0\077\uffd0\001\002\000\032\004\113\005\122\006\127" +
    "\007\115\010\121\040\114\041\111\042\130\043\112\052" +
    "\110\064\116\065\125\001\002\000\034\051\141\052\135" +
    "\053\140\054\143\055\137\056\144\057\142\060\136\061" +
    "\146\062\133\063\134\064\145\072\214\001\002\000\044" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf" +
    "\067\uffcf\072\uffcf\074\uffcf\077\uffcf\001\002\000\004\065" +
    "\222\001\002\000\004\065\217\001\002\000\032\004\113" +
    "\005\122\006\127\007\115\010\121\040\114\041\111\042" +
    "\130\043\112\052\110\064\116\065\125\001\002\000\034" +
    "\051\141\052\135\053\140\054\143\055\137\056\144\057" +
    "\142\060\136\061\146\062\133\063\134\064\145\066\221" +
    "\001\002\000\044\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf" +
    "\064\uffaf\066\uffaf\067\uffaf\072\uffaf\074\uffaf\077\uffaf\001" +
    "\002\000\032\004\113\005\122\006\127\007\115\010\121" +
    "\040\114\041\111\042\130\043\112\052\110\064\116\065" +
    "\125\001\002\000\034\051\141\052\135\053\140\054\143" +
    "\055\137\056\144\057\142\060\136\061\146\062\133\063" +
    "\134\064\145\066\224\001\002\000\044\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\066\uffb3\067\uffb3\072\uffb3" +
    "\074\uffb3\077\uffb3\001\002\000\044\051\141\052\135\053" +
    "\140\054\143\055\137\056\uffdb\057\142\060\136\061\uffdb" +
    "\062\uffdb\063\uffdb\064\145\066\uffdb\067\uffdb\072\uffdb\074" +
    "\uffdb\077\uffdb\001\002\000\032\004\113\005\122\006\127" +
    "\007\115\010\121\040\114\041\111\042\130\043\112\052" +
    "\110\064\116\065\125\001\002\000\034\051\141\052\135" +
    "\053\140\054\143\055\137\056\144\057\142\060\136\061" +
    "\146\062\133\063\134\064\145\066\230\001\002\000\044" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\066\uffb0" +
    "\067\uffb0\072\uffb0\074\uffb0\077\uffb0\001\002\000\044\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\066\uffea\067" +
    "\uffea\072\uffea\074\uffea\077\uffea\001\002\000\006\072\233" +
    "\077\203\001\002\000\006\072\uffbb\077\uffbb\001\002\000" +
    "\032\004\113\005\122\006\127\007\115\010\121\040\114" +
    "\041\111\042\130\043\112\052\110\064\116\065\125\001" +
    "\002\000\006\072\236\077\203\001\002\000\004\074\uffc1" +
    "\001\002\000\034\051\141\052\135\053\140\054\143\055" +
    "\137\056\144\057\142\060\136\061\146\062\133\063\134" +
    "\064\145\074\uffc2\001\002\000\040\002\ufff9\003\ufff9\010" +
    "\ufff9\020\ufff9\021\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\045\ufff9\070\ufff9\001" +
    "\002\000\040\002\uffec\003\uffec\010\uffec\020\uffec\021\uffec" +
    "\027\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\045\uffec\070\uffec\001\002\000\004\010\243" +
    "\001\002\000\004\056\262\001\002\000\004\074\245\001" +
    "\002\000\032\004\113\005\122\006\127\007\115\010\121" +
    "\040\114\041\111\042\130\043\112\052\110\064\116\065" +
    "\125\001\002\000\034\051\141\052\135\053\140\054\143" +
    "\055\137\056\144\057\142\060\136\061\146\062\133\063" +
    "\134\064\145\074\247\001\002\000\004\010\250\001\002" +
    "\000\010\051\261\052\263\056\262\001\002\000\004\066" +
    "\uffa2\001\002\000\004\066\254\001\002\000\004\066\uffa1" +
    "\001\002\000\004\067\255\001\002\000\034\003\035\010" +
    "\024\020\013\021\040\027\014\031\021\032\032\033\034" +
    "\034\015\035\004\036\030\037\010\045\045\001\002\000" +
    "\036\003\035\010\024\020\013\021\040\027\014\031\021" +
    "\032\032\033\034\034\015\035\004\036\030\037\010\045" +
    "\045\070\260\001\002\000\040\002\uffff\003\uffff\010\uffff" +
    "\020\uffff\021\uffff\027\uffff\031\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\045\uffff\070\uffff\001\002" +
    "\000\040\002\uffa3\003\uffa3\010\uffa3\020\uffa3\021\uffa3\027" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\045\uffa3\070\uffa3\001\002\000\004\051\266\001" +
    "\002\000\032\004\113\005\122\006\127\007\115\010\121" +
    "\040\114\041\111\042\130\043\112\052\110\064\116\065" +
    "\125\001\002\000\004\052\264\001\002\000\006\066\uffb5" +
    "\074\uffb5\001\002\000\036\051\141\052\135\053\140\054" +
    "\143\055\137\056\144\057\142\060\136\061\146\062\133" +
    "\063\134\064\145\066\uffba\074\uffba\001\002\000\006\066" +
    "\uffb6\074\uffb6\001\002\000\032\004\113\005\122\006\127" +
    "\007\115\010\121\040\114\041\111\042\130\043\112\052" +
    "\110\064\116\065\125\001\002\000\034\051\141\052\135" +
    "\053\140\054\143\055\137\056\144\057\142\060\136\061" +
    "\146\062\133\063\134\064\145\066\271\001\002\000\004" +
    "\067\272\001\002\000\034\003\035\010\024\020\013\021" +
    "\040\027\014\031\021\032\032\033\034\034\015\035\004" +
    "\036\030\037\010\045\045\001\002\000\036\003\035\010" +
    "\024\020\013\021\040\027\014\031\021\032\032\033\034" +
    "\034\015\035\004\036\030\037\010\045\045\070\274\001" +
    "\002\000\040\002\uffa4\003\uffa4\010\uffa4\020\uffa4\021\uffa4" +
    "\027\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\045\uffa4\070\uffa4\001\002\000\040\002\ufffd" +
    "\003\ufffd\010\ufffd\020\ufffd\021\ufffd\027\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\045\ufffd" +
    "\070\ufffd\001\002\000\040\002\uffef\003\uffef\010\uffef\020" +
    "\uffef\021\uffef\027\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\045\uffef\070\uffef\001\002\000" +
    "\040\002\ufff8\003\ufff8\010\ufff8\020\ufff8\021\ufff8\027\ufff8" +
    "\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\045\ufff8\070\ufff8\001\002\000\040\002\ufffb\003\ufffb" +
    "\010\ufffb\020\ufffb\021\ufffb\027\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\045\ufffb\070\ufffb" +
    "\001\002\000\004\047\314\001\002\000\032\004\113\005" +
    "\122\006\127\007\115\010\121\040\114\041\111\042\130" +
    "\043\112\052\110\064\116\065\125\001\002\000\034\051" +
    "\141\052\135\053\140\054\143\055\137\056\144\057\142" +
    "\060\136\061\146\062\133\063\134\064\145\072\304\001" +
    "\002\000\006\056\305\071\306\001\002\000\032\004\113" +
    "\005\122\006\127\007\115\010\121\040\114\041\111\042" +
    "\130\043\112\052\110\064\116\065\125\001\002\000\032" +
    "\004\113\005\122\006\127\007\115\010\121\040\114\041" +
    "\111\042\130\043\112\052\110\064\116\065\125\001\002" +
    "\000\034\051\141\052\135\053\140\054\143\055\137\056" +
    "\144\057\142\060\136\061\146\062\133\063\134\064\145" +
    "\072\310\001\002\000\004\056\311\001\002\000\032\004" +
    "\113\005\122\006\127\007\115\010\121\040\114\041\111" +
    "\042\130\043\112\052\110\064\116\065\125\001\002\000" +
    "\034\051\141\052\135\053\140\054\143\055\137\056\144" +
    "\057\142\060\136\061\146\062\133\063\134\064\145\074" +
    "\uffb8\001\002\000\034\051\141\052\135\053\140\054\143" +
    "\055\137\056\144\057\142\060\136\061\146\062\133\063" +
    "\134\064\145\074\uffb9\001\002\000\004\065\315\001\002" +
    "\000\032\004\113\005\122\006\127\007\115\010\121\040" +
    "\114\041\111\042\130\043\112\052\110\064\116\065\125" +
    "\001\002\000\034\051\141\052\135\053\140\054\143\055" +
    "\137\056\144\057\142\060\136\061\146\062\133\063\134" +
    "\064\145\066\317\001\002\000\004\074\uffb4\001\002\000" +
    "\034\051\141\052\135\053\140\054\143\055\137\056\144" +
    "\057\142\060\136\061\146\062\133\063\134\064\145\067" +
    "\321\001\002\000\034\004\113\005\122\006\127\007\115" +
    "\010\121\040\114\041\111\042\130\043\112\052\110\064" +
    "\116\065\125\076\323\001\002\000\036\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\052\uffa7\064\uffa7\065\uffa7\070\uffa7\076\uffa7\001\002" +
    "\000\004\056\341\001\002\000\036\004\113\005\122\006" +
    "\127\007\115\010\121\040\114\041\111\042\130\043\112" +
    "\052\110\064\116\065\125\070\336\076\323\001\002\000" +
    "\004\070\334\001\002\000\032\051\141\052\135\053\140" +
    "\054\143\055\137\056\327\057\142\060\136\061\146\062" +
    "\133\063\134\064\145\001\002\000\006\056\152\060\330" +
    "\001\002\000\004\067\331\001\002\000\034\003\035\010" +
    "\024\020\013\021\040\027\014\031\021\032\032\033\034" +
    "\034\015\035\004\036\030\037\010\045\045\001\002\000" +
    "\036\003\035\010\024\020\013\021\040\027\014\031\021" +
    "\032\032\033\034\034\015\035\004\036\030\037\010\045" +
    "\045\070\333\001\002\000\036\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\052" +
    "\uffa6\064\uffa6\065\uffa6\070\uffa6\076\uffa6\001\002\000\040" +
    "\002\uffa9\003\uffa9\010\uffa9\020\uffa9\021\uffa9\027\uffa9\031" +
    "\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9" +
    "\045\uffa9\070\uffa9\001\002\000\036\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\052\uffa8\064\uffa8\065\uffa8\070\uffa8\076\uffa8\001\002\000" +
    "\040\002\uffaa\003\uffaa\010\uffaa\020\uffaa\021\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\045\uffaa\070\uffaa\001\002\000\004\070\340\001\002" +
    "\000\040\002\uffab\003\uffab\010\uffab\020\uffab\021\uffab\027" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\045\uffab\070\uffab\001\002\000\004\060\342\001" +
    "\002\000\004\067\343\001\002\000\034\003\035\010\024" +
    "\020\013\021\040\027\014\031\021\032\032\033\034\034" +
    "\015\035\004\036\030\037\010\045\045\001\002\000\036" +
    "\003\035\010\024\020\013\021\040\027\014\031\021\032" +
    "\032\033\034\034\015\035\004\036\030\037\010\045\045" +
    "\070\345\001\002\000\004\070\uffa5\001\002\000\040\002" +
    "\ufff6\003\ufff6\010\ufff6\020\ufff6\021\ufff6\027\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\045" +
    "\ufff6\070\ufff6\001\002\000\040\002\ufffc\003\ufffc\010\ufffc" +
    "\020\ufffc\021\ufffc\027\ufffc\031\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\045\ufffc\070\ufffc\001\002" +
    "\000\034\003\035\010\024\020\013\021\040\027\014\031" +
    "\021\032\032\033\034\034\015\035\004\036\030\037\010" +
    "\045\045\001\002\000\036\003\035\010\024\020\013\021" +
    "\040\027\014\031\021\032\032\033\034\034\015\035\004" +
    "\036\030\037\010\045\045\070\352\001\002\000\004\032" +
    "\353\001\002\000\004\065\354\001\002\000\032\004\113" +
    "\005\122\006\127\007\115\010\121\040\114\041\111\042" +
    "\130\043\112\052\110\064\116\065\125\001\002\000\034" +
    "\051\141\052\135\053\140\054\143\055\137\056\144\057" +
    "\142\060\136\061\146\062\133\063\134\064\145\066\356" +
    "\001\002\000\004\074\uffa0\001\002\000\032\004\113\005" +
    "\122\006\127\007\115\010\121\040\114\041\111\042\130" +
    "\043\112\052\110\064\116\065\125\001\002\000\034\051" +
    "\141\052\135\053\140\054\143\055\137\056\144\057\142" +
    "\060\136\061\146\062\133\063\134\064\145\066\361\001" +
    "\002\000\004\067\362\001\002\000\034\003\035\010\024" +
    "\020\013\021\040\027\014\031\021\032\032\033\034\034" +
    "\015\035\004\036\030\037\010\045\045\001\002\000\036" +
    "\003\035\010\024\020\013\021\040\027\014\031\021\032" +
    "\032\033\034\034\015\035\004\036\030\037\010\045\045" +
    "\070\364\001\002\000\042\002\uffae\003\uffae\010\uffae\020" +
    "\uffae\021\uffae\027\uffae\030\365\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\045\uffae\070\uffae\001" +
    "\002\000\006\027\014\067\367\001\002\000\040\002\uffac" +
    "\003\uffac\010\uffac\020\uffac\021\uffac\027\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\045\uffac" +
    "\070\uffac\001\002\000\034\003\035\010\024\020\013\021" +
    "\040\027\014\031\021\032\032\033\034\034\015\035\004" +
    "\036\030\037\010\045\045\001\002\000\036\003\035\010" +
    "\024\020\013\021\040\027\014\031\021\032\032\033\034" +
    "\034\015\035\004\036\030\037\010\045\045\070\371\001" +
    "\002\000\040\002\uffad\003\uffad\010\uffad\020\uffad\021\uffad" +
    "\027\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036" +
    "\uffad\037\uffad\045\uffad\070\uffad\001\002\000\040\002\uffee" +
    "\003\uffee\010\uffee\020\uffee\021\uffee\027\uffee\031\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\045\uffee" +
    "\070\uffee\001\002\000\032\004\113\005\122\006\127\007" +
    "\115\010\121\040\114\041\111\042\130\043\112\052\110" +
    "\064\116\065\125\001\002\000\034\051\141\052\135\053" +
    "\140\054\143\055\137\056\144\057\142\060\136\061\146" +
    "\062\133\063\134\064\145\066\375\001\002\000\004\074" +
    "\uffb2\001\002\000\040\002\uffed\003\uffed\010\uffed\020\uffed" +
    "\021\uffed\027\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\037\uffed\045\uffed\070\uffed\001\002\000\040" +
    "\002\ufff4\003\ufff4\010\ufff4\020\ufff4\021\ufff4\027\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\045\ufff4\070\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\054\002\043\003\016\012\036\013\005\015" +
    "\030\016\015\017\025\020\022\021\021\023\004\024\032" +
    "\025\026\026\011\030\010\031\006\032\024\033\042\034" +
    "\040\035\017\036\035\037\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\012\036\013\256\015\030\016\015\017\025" +
    "\020\022\021\021\023\004\024\032\025\026\026\011\030" +
    "\010\031\006\032\024\033\042\034\040\035\017\036\035" +
    "\037\041\001\001\000\002\001\001\000\016\014\317\022" +
    "\116\040\117\041\122\042\125\043\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\071\001\001\000\002\001\001\000\016\014" +
    "\236\022\116\040\117\041\122\042\125\043\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\103\001\001\000\020\005\231\014\131\022\116\040" +
    "\117\041\122\042\125\043\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\123\014" +
    "\131\022\116\040\117\041\122\042\125\043\130\001\001" +
    "\000\016\014\230\022\116\040\117\041\122\042\125\043" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\224\022\116\040\117\041\122\042\125\043\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\011\175\014\176\022\116\040\117\041\122\042\125\043" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\171\022\116\040\117\041\122\042\125\043\130\001\001" +
    "\000\016\014\170\022\116\040\117\041\122\042\125\043" +
    "\130\001\001\000\016\014\167\022\116\040\117\041\122" +
    "\042\125\043\130\001\001\000\016\014\165\022\116\040" +
    "\117\041\122\042\125\043\130\001\001\000\016\014\163" +
    "\022\116\040\117\041\122\042\125\043\130\001\001\000" +
    "\016\014\161\022\116\040\117\041\122\042\125\043\130" +
    "\001\001\000\016\014\157\022\116\040\117\041\122\042" +
    "\125\043\130\001\001\000\016\014\155\022\116\040\117" +
    "\041\122\042\125\043\130\001\001\000\016\014\153\022" +
    "\116\040\117\041\122\042\125\043\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\146\022\116\040" +
    "\117\041\122\042\125\043\130\001\001\000\002\001\001" +
    "\000\016\014\150\022\116\040\117\041\122\042\125\043" +
    "\130\001\001\000\002\001\001\000\016\014\152\022\116" +
    "\040\117\041\122\042\125\043\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\156\022\116\040\117" +
    "\041\122\042\125\043\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\162\022\116" +
    "\040\117\041\122\042\125\043\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\166" +
    "\022\116\040\117\041\122\042\125\043\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\173\022\116\040" +
    "\117\041\122\042\125\043\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\201\022\116\040\117\041\122" +
    "\042\125\043\130\001\001\000\002\001\001\000\016\014" +
    "\204\022\116\040\117\041\122\042\125\043\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\207\022\116\040\117\041\122\042\125\043\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\212\022\116\040\117\041\122\042\125\043\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\217\022\116\040\117\041\122" +
    "\042\125\043\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\222\022\116\040\117\041\122\042\125" +
    "\043\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\226\022\116\040\117\041\122" +
    "\042\125\043\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\005\234\014\131\022\116\040\117\041\122\042" +
    "\125\043\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\245\022\116\040\117\041\122\042\125\043" +
    "\130\001\001\000\002\001\001\000\010\017\250\023\252" +
    "\027\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\255\012\036\013\005\015\030\016\015\017\025\020" +
    "\022\021\021\023\004\024\032\025\026\026\011\030\010" +
    "\031\006\032\024\033\042\034\040\035\017\036\035\037" +
    "\041\001\001\000\050\012\036\013\256\015\030\016\015" +
    "\017\025\020\022\021\021\023\004\024\032\025\026\026" +
    "\011\030\010\031\006\032\024\033\042\034\040\035\017" +
    "\036\035\037\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\264\022\116\040\117" +
    "\041\122\042\125\043\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\267\022\116\040\117\041\122\042\125\043\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\272" +
    "\012\036\013\005\015\030\016\015\017\025\020\022\021" +
    "\021\023\004\024\032\025\026\026\011\030\010\031\006" +
    "\032\024\033\042\034\040\035\017\036\035\037\041\001" +
    "\001\000\050\012\036\013\256\015\030\016\015\017\025" +
    "\020\022\021\021\023\004\024\032\025\026\026\011\030" +
    "\010\031\006\032\024\033\042\034\040\035\017\036\035" +
    "\037\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\302\022\116\040\117\041\122\042" +
    "\125\043\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\312\022\116\040\117\041\122\042\125\043" +
    "\130\001\001\000\016\014\306\022\116\040\117\041\122" +
    "\042\125\043\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\311\022\116\040\117\041\122\042\125" +
    "\043\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\315\022\116\040\117\041\122" +
    "\042\125\043\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\324\006\323\010\321" +
    "\014\325\022\116\040\117\041\122\042\125\043\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\004\336" +
    "\010\334\014\325\022\116\040\117\041\122\042\125\043" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\331\012\036\013" +
    "\005\015\030\016\015\017\025\020\022\021\021\023\004" +
    "\024\032\025\026\026\011\030\010\031\006\032\024\033" +
    "\042\034\040\035\017\036\035\037\041\001\001\000\050" +
    "\012\036\013\256\015\030\016\015\017\025\020\022\021" +
    "\021\023\004\024\032\025\026\026\011\030\010\031\006" +
    "\032\024\033\042\034\040\035\017\036\035\037\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\343\012\036" +
    "\013\005\015\030\016\015\017\025\020\022\021\021\023" +
    "\004\024\032\025\026\026\011\030\010\031\006\032\024" +
    "\033\042\034\040\035\017\036\035\037\041\001\001\000" +
    "\050\012\036\013\256\015\030\016\015\017\025\020\022" +
    "\021\021\023\004\024\032\025\026\026\011\030\010\031" +
    "\006\032\024\033\042\034\040\035\017\036\035\037\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\003\350\012\036\013\005\015\030\016\015" +
    "\017\025\020\022\021\021\023\004\024\032\025\026\026" +
    "\011\030\010\031\006\032\024\033\042\034\040\035\017" +
    "\036\035\037\041\001\001\000\050\012\036\013\256\015" +
    "\030\016\015\017\025\020\022\021\021\023\004\024\032" +
    "\025\026\026\011\030\010\031\006\032\024\033\042\034" +
    "\040\035\017\036\035\037\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\354\022\116\040\117\041" +
    "\122\042\125\043\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\357\022\116\040\117\041\122\042" +
    "\125\043\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\362\012\036\013\005\015\030\016\015\017" +
    "\025\020\022\021\021\023\004\024\032\025\026\026\011" +
    "\030\010\031\006\032\024\033\042\034\040\035\017\036" +
    "\035\037\041\001\001\000\050\012\036\013\256\015\030" +
    "\016\015\017\025\020\022\021\021\023\004\024\032\025" +
    "\026\026\011\030\010\031\006\032\024\033\042\034\040" +
    "\035\017\036\035\037\041\001\001\000\002\001\001\000" +
    "\004\020\365\001\001\000\002\001\001\000\052\003\367" +
    "\012\036\013\005\015\030\016\015\017\025\020\022\021" +
    "\021\023\004\024\032\025\026\026\011\030\010\031\006" +
    "\032\024\033\042\034\040\035\017\036\035\037\041\001" +
    "\001\000\050\012\036\013\256\015\030\016\015\017\025" +
    "\020\022\021\021\023\004\024\032\025\026\026\011\030" +
    "\010\031\006\032\024\033\042\034\040\035\017\036\035" +
    "\037\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\373\022\116\040\117\041\122\042\125\043\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<exceptions.Error> parserErrors = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECLARACION_LISTAS_DINAMICAS PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIGNACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ASIGNACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= AGREGAR_VALOR_LISTA PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= INCREMENTO_DECREMENTO PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SENTENCIA_MATCH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= SENTENCIA_DO_WHILE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= SENTENCIA_BREAK PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= SENTENCIA_CONTINUE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= error PUNTO_COMA 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, Operators.NEGACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= CASTEO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION MULT MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.POTENCIA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MULTIPLICACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.DIVISION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MODULO, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.SUMA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.RESTA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION NOT IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.DIFERENCIACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION MENOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MAYOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, Operators.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(Integer.parseInt(a), new Type(DataType.ENTERO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(new Double(a), new Type(DataType.DECIMAL), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CADENA), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= CARACTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= KW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(true, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= KW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(false, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAccess(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= QUITAR_VALOR_LISTA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= ROUND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= LENGTH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= FIND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= KW_INT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= KW_DOUBLE 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= KW_BOOL 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= KW_CHAR 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= KW_STRING 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MUTABILIDAD ::= KW_CONST 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.CONST;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // MUTABILIDAD ::= KW_VAR 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.VAR;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, d, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION_VECTORES_1D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_1D",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION_VECTORES_2D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V2D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, true, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_2D",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION_LISTAS_DINAMICAS ::= KW_LIST MENOR_QUE TIPO MAYOR_QUE ID IGUAL KW_NEW KW_LIST PAR_IZQ PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		   RESULT = new DynamicListDeclaration(b, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTAS_DINAMICAS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_VALORES_V1D ::= LISTA_VALORES_V1D COMA EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_VALORES_V1D ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LISTA_VALORES_V2D ::= LISTA_VALORES_V2D COMA CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LISTA_VALORES_V2D ::= CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAssignment(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ASIGNACION_VECTORES_1D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_1D",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION_VECTORES_2D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_2D",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CASTEO ::= PAR_IZQ TIPO PAR_DER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new TypeCasting(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INCREMENTO_DECREMENTO ::= ID MAS MAS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Incremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INCREMENTO_DECREMENTO ::= ID MENOS MENOS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Decremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AGREGAR_VALOR_LISTA ::= ID PUNTO KW_APPEND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Append(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGREGAR_VALOR_LISTA",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // QUITAR_VALOR_LISTA ::= ID PUNTO KW_REMOVE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Remove(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUITAR_VALOR_LISTA",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRINTLN ::= KW_PRINTLN PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Print(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ROUND ::= KW_ROUND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROUND",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LENGTH ::= KW_LENGTH PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Length(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LENGTH",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FIND ::= ID PUNTO KW_FIND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Find(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASOS_MATCH ::= CASOS_MATCH CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> a = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch b = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASOS_MATCH ::= CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASO_MATCH ::= EXPRESION IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CaseMatch(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_MATCH",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DEFAULT_MATCH ::= GUION_BAJO IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_MATCH",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_WHILE ::= KW_WHILE PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_FOR ::= KW_FOR PAR_IZQ ASIGNACION PUNTO_COMA EXPRESION PUNTO_COMA ACTUALIZA_FOR PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ACTUALIZA_FOR ::= ASIGNACION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ACTUALIZA_FOR ::= INCREMENTO_DECREMENTO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_DO_WHILE ::= KW_DO LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_WHILE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_BREAK ::= KW_BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_CONTINUE ::= KW_CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONTINUE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
