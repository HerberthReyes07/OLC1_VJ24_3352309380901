
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analysis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.HashMap;
import abstracto.Instruction;
import symbol.Type;
import symbol.DataType;
import symbol.Operators;
import symbol.MutabilityType;
import instructions.Print;
import instructions.Declaration;
import instructions.VariableAssignment;
import instructions.If;
import instructions.Match;
import instructions.CaseMatch;
import instructions.While;
import instructions.For;
import instructions.DoWhile;
import instructions.Break;
import instructions.Continue;
import instructions.VectorDeclaration;
import instructions.VectorAssignment;
import instructions.DynamicListDeclaration;
import instructions.Append;
import instructions.StructDeclaration;
import instructions.StructField;
import instructions.StructInstantiation;
import instructions.StructValue;
import instructions.StructAssignment;
import instructions.Method;
import instructions.StartWith;
import expressions.Native;
import expressions.Arithmetic;
import expressions.Relational;
import expressions.Logical;
import expressions.VariableAccess;
import expressions.TypeCasting;
import expressions.Round;
import expressions.VectorAccess;
import expressions.Length;
import expressions.Remove;
import expressions.Find;
import expressions.ToString;
import expressions.StructAccess;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\017\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\003\000\002\020" +
    "\004\000\002\020\006\000\002\020\003\000\002\020\006" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\006\000\002\020\005\000\002\020\006\000\002\020" +
    "\005\000\002\020\006\000\002\020\004\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\006\000\002\020\011\000\002\020\003\000\002\020\005" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\022\006\000\002\022\010\000\002\036\014\000" +
    "\002\040\016\000\002\042\014\000\002\045\007\000\002" +
    "\046\012\000\002\005\005\000\002\005\003\000\002\007" +
    "\007\000\002\007\005\000\002\011\005\000\002\011\004" +
    "\000\002\012\005\000\002\012\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\023\005\000\002" +
    "\037\010\000\002\041\013\000\002\047\007\000\002\026" +
    "\006\000\002\027\005\000\002\027\005\000\002\043\010" +
    "\000\002\044\010\000\002\021\006\000\002\050\006\000" +
    "\002\051\006\000\002\053\006\000\002\052\010\000\002" +
    "\024\011\000\002\024\015\000\002\024\013\000\002\025" +
    "\010\000\002\025\007\000\002\025\007\000\002\006\004" +
    "\000\002\006\003\000\002\010\010\000\002\004\010\000" +
    "\002\030\011\000\002\032\015\000\002\033\003\000\002" +
    "\033\003\000\002\031\012\000\002\034\003\000\002\035" +
    "\003\000\002\054\012\000\002\054\011\000\002\055\006" +
    "\000\002\055\004\000\002\056\007\000\002\056\006\000" +
    "\002\057\005\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\054\003\041\010\037\020\022\021\060\022" +
    "\010\023\015\024\036\025\016\026\056\027\052\030\044" +
    "\032\033\033\062\034\012\035\013\036\053\037\040\040" +
    "\026\047\057\053\063\054\050\001\002\000\004\100\u0145" +
    "\001\002\000\004\100\u0144\001\002\000\060\002\uffef\003" +
    "\uffef\010\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\047\uffef\053\uffef" +
    "\054\uffef\074\uffef\001\002\000\004\010\u0134\001\002\000" +
    "\016\010\uffc3\062\uffc3\064\uffc3\072\uffc3\075\uffc3\100\uffc3" +
    "\001\002\000\060\002\ufff0\003\ufff0\010\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\047\ufff0\053\ufff0\054\ufff0\074\ufff0\001\002" +
    "\000\004\071\u0126\001\002\000\004\073\u011f\001\002\000" +
    "\060\002\uffe9\003\uffe9\010\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\047\uffe9\053\uffe9\054\uffe9\074\uffe9\001\002\000\016\010" +
    "\uffc2\062\uffc2\064\uffc2\072\uffc2\075\uffc2\100\uffc2\001\002" +
    "\000\016\010\uffc0\062\uffc0\064\uffc0\072\uffc0\075\uffc0\100" +
    "\uffc0\001\002\000\004\100\u011e\001\002\000\060\002\ufffe" +
    "\003\ufffe\010\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\047\ufffe\053" +
    "\ufffe\054\ufffe\074\ufffe\001\002\000\004\100\u011d\001\002" +
    "\000\004\010\uffbc\001\002\000\056\002\000\003\041\010" +
    "\037\020\022\021\060\022\010\023\015\024\036\025\016" +
    "\026\056\027\052\030\044\032\033\033\062\034\012\035" +
    "\013\036\053\037\040\040\026\047\057\053\063\054\050" +
    "\001\002\000\004\100\u011c\001\002\000\004\100\u011b\001" +
    "\002\000\004\071\u0118\001\002\000\004\100\u0117\001\002" +
    "\000\004\100\u0116\001\002\000\004\100\u0115\001\002\000" +
    "\004\010\357\001\002\000\034\004\106\005\116\006\122" +
    "\007\110\010\114\041\107\042\104\043\123\044\105\046" +
    "\102\056\103\070\111\071\117\001\002\000\004\100\330" +
    "\001\002\000\004\100\327\001\002\000\016\010\uffc1\062" +
    "\uffc1\064\uffc1\072\uffc1\075\uffc1\100\uffc1\001\002\000\014" +
    "\055\300\056\302\062\301\075\303\077\277\001\002\000" +
    "\004\100\uff8a\001\002\000\062\002\uffe6\003\uffe6\010\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\047\uffe6\053\uffe6\054\uffe6\074" +
    "\uffe6\100\276\001\002\000\060\002\uffee\003\uffee\010\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\047\uffee\053\uffee\054\uffee\074" +
    "\uffee\001\002\000\004\100\275\001\002\000\004\071\262" +
    "\001\002\000\004\100\261\001\002\000\060\002\uffed\003" +
    "\uffed\010\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\047\uffed\053\uffed" +
    "\054\uffed\074\uffed\001\002\000\004\100\260\001\002\000" +
    "\004\010\250\001\002\000\004\100\247\001\002\000\016" +
    "\010\uffbd\062\uffbd\064\uffbd\072\uffbd\075\uffbd\100\uffbd\001" +
    "\002\000\004\100\uff8b\001\002\000\004\100\246\001\002" +
    "\000\004\100\245\001\002\000\016\010\uffbf\062\uffbf\064" +
    "\uffbf\072\uffbf\075\uffbf\100\uffbf\001\002\000\004\063\234" +
    "\001\002\000\004\010\uffbb\001\002\000\004\002\233\001" +
    "\002\000\004\071\101\001\002\000\006\010\uffbe\073\064" +
    "\001\002\000\004\010\065\001\002\000\004\101\075\001" +
    "\002\000\006\010\065\074\071\001\002\000\004\100\070" +
    "\001\002\000\006\010\uffae\074\uffae\001\002\000\004\010" +
    "\074\001\002\000\004\100\073\001\002\000\006\010\uffaf" +
    "\074\uffaf\001\002\000\004\100\uffb5\001\002\000\022\010" +
    "\077\022\010\023\015\024\036\025\016\026\056\027\052" +
    "\053\076\001\002\000\016\010\uffbe\062\uffbe\064\uffbe\072" +
    "\uffbe\075\uffbe\100\uffbe\001\002\000\004\100\uffac\001\002" +
    "\000\004\100\uffad\001\002\000\034\004\106\005\116\006" +
    "\122\007\110\010\114\041\107\042\104\043\123\044\105" +
    "\046\102\056\103\070\111\071\117\001\002\000\004\071" +
    "\230\001\002\000\034\004\106\005\116\006\122\007\110" +
    "\010\114\041\107\042\104\043\123\044\105\046\102\056" +
    "\103\070\111\071\117\001\002\000\046\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\076\uffcd\100\uffcd\103\uffcd\001\002\000\004\071\224\001" +
    "\002\000\046\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070" +
    "\uffd0\072\uffd0\073\uffd0\074\uffd0\076\uffd0\100\uffd0\103\uffd0" +
    "\001\002\000\046\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\070\uffce\072\uffce\073\uffce\074\uffce\076\uffce\100\uffce\103" +
    "\uffce\001\002\000\046\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\072\uffd1\073\uffd1\074\uffd1\076\uffd1\100\uffd1" +
    "\103\uffd1\001\002\000\034\004\106\005\116\006\122\007" +
    "\110\010\114\041\107\042\104\043\123\044\105\046\102" +
    "\056\103\070\111\071\117\001\002\000\046\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\uffe3\072\uffe3\073\uffe3\074" +
    "\uffe3\076\uffe3\100\uffe3\103\uffe3\001\002\000\046\055\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\072\uffc9\073\uffc9" +
    "\074\uffc9\076\uffc9\100\uffc9\103\uffc9\001\002\000\052\055" +
    "\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\075\204\076\uffcc\077\203\100\uffcc\103\uffcc" +
    "\001\002\000\046\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\072\uffc7\073\uffc7\074\uffc7\076\uffc7\100\uffc7\103" +
    "\uffc7\001\002\000\046\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067" +
    "\uffcf\070\uffcf\072\uffcf\073\uffcf\074\uffcf\076\uffcf\100\uffcf" +
    "\103\uffcf\001\002\000\052\004\106\005\116\006\122\007" +
    "\110\010\114\022\010\023\015\024\036\025\016\026\056" +
    "\027\052\041\107\042\104\043\123\044\105\046\102\053" +
    "\076\056\103\070\111\071\117\001\002\000\046\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\072\uffc5\073\uffc5" +
    "\074\uffc5\076\uffc5\100\uffc5\103\uffc5\001\002\000\046\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\076\uffc6\100\uffc6\103\uffc6\001\002\000\046" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\072\uffd2" +
    "\073\uffd2\074\uffd2\076\uffd2\100\uffd2\103\uffd2\001\002\000" +
    "\004\071\173\001\002\000\046\055\uffc4\056\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\072\uffc4\073\uffc4\074\uffc4\076\uffc4" +
    "\100\uffc4\103\uffc4\001\002\000\034\055\135\056\130\057" +
    "\132\060\137\061\133\062\140\063\136\064\131\065\142" +
    "\066\126\067\127\070\141\072\134\001\002\000\034\004" +
    "\106\005\116\006\122\007\110\010\114\041\107\042\104" +
    "\043\123\044\105\046\102\056\103\070\111\071\117\001" +
    "\002\000\034\004\106\005\116\006\122\007\110\010\114" +
    "\041\107\042\104\043\123\044\105\046\102\056\103\070" +
    "\111\071\117\001\002\000\034\004\106\005\116\006\122" +
    "\007\110\010\114\041\107\042\104\043\123\044\105\046" +
    "\102\056\103\070\111\071\117\001\002\000\036\004\106" +
    "\005\116\006\122\007\110\010\114\041\107\042\104\043" +
    "\123\044\105\046\102\056\103\062\165\070\111\071\117" +
    "\001\002\000\036\004\106\005\116\006\122\007\110\010" +
    "\114\041\107\042\104\043\123\044\105\046\102\056\103" +
    "\057\162\070\111\071\117\001\002\000\034\004\106\005" +
    "\116\006\122\007\110\010\114\041\107\042\104\043\123" +
    "\044\105\046\102\056\103\070\111\071\117\001\002\000" +
    "\004\073\155\001\002\000\034\004\106\005\116\006\122" +
    "\007\110\010\114\041\107\042\104\043\123\044\105\046" +
    "\102\056\103\070\111\071\117\001\002\000\036\004\106" +
    "\005\116\006\122\007\110\010\114\041\107\042\104\043" +
    "\123\044\105\046\102\056\103\062\151\070\111\071\117" +
    "\001\002\000\034\004\106\005\116\006\122\007\110\010" +
    "\114\041\107\042\104\043\123\044\105\046\102\056\103" +
    "\070\111\071\117\001\002\000\004\062\146\001\002\000" +
    "\004\062\144\001\002\000\034\004\106\005\116\006\122" +
    "\007\110\010\114\041\107\042\104\043\123\044\105\046" +
    "\102\056\103\070\111\071\117\001\002\000\046\055\135" +
    "\056\130\057\132\060\137\061\133\062\uffd3\063\136\064" +
    "\131\065\uffd3\066\126\067\127\070\141\072\uffd3\073\uffd3" +
    "\074\uffd3\076\uffd3\100\uffd3\103\uffd3\001\002\000\034\004" +
    "\106\005\116\006\122\007\110\010\114\041\107\042\104" +
    "\043\123\044\105\046\102\056\103\070\111\071\117\001" +
    "\002\000\046\055\135\056\130\057\132\060\137\061\133" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\076\uffdb\100\uffdb\103\uffdb" +
    "\001\002\000\034\004\106\005\116\006\122\007\110\010" +
    "\114\041\107\042\104\043\123\044\105\046\102\056\103" +
    "\070\111\071\117\001\002\000\046\055\135\056\130\057" +
    "\132\060\137\061\133\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\072\uffe4\073\uffe4\074\uffe4\076" +
    "\uffe4\100\uffe4\103\uffe4\001\002\000\046\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\070\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\076\uffe0\100\uffe0\103\uffe0\001\002\000\034\004\106\005" +
    "\116\006\122\007\110\010\114\041\107\042\104\043\123" +
    "\044\105\046\102\056\103\070\111\071\117\001\002\000" +
    "\046\055\135\056\130\057\132\060\137\061\133\062\uffda" +
    "\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\072" +
    "\uffda\073\uffda\074\uffda\076\uffda\100\uffda\103\uffda\001\002" +
    "\000\046\055\135\056\130\057\132\060\137\061\133\062" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9" +
    "\072\uffd9\073\uffd9\074\uffd9\076\uffd9\100\uffd9\103\uffd9\001" +
    "\002\000\046\055\uffde\056\uffde\057\132\060\137\061\133" +
    "\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070" +
    "\uffde\072\uffde\073\uffde\074\uffde\076\uffde\100\uffde\103\uffde" +
    "\001\002\000\054\003\041\010\037\020\022\021\060\022" +
    "\010\023\015\024\036\025\016\026\056\027\052\030\044" +
    "\032\033\033\062\034\012\035\013\036\053\037\040\040" +
    "\026\047\057\053\063\054\050\001\002\000\056\003\041" +
    "\010\037\020\022\021\060\022\010\023\015\024\036\025" +
    "\016\026\056\027\052\030\044\032\033\033\062\034\012" +
    "\035\013\036\053\037\040\040\026\047\057\053\063\054" +
    "\050\074\160\001\002\000\060\002\uffff\003\uffff\010\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\032\uffff\033\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\040\uffff\047\uffff\053\uffff\054\uffff\074" +
    "\uffff\001\002\000\060\002\uff90\003\uff90\010\uff90\020\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\037\uff90\040\uff90\047\uff90\053\uff90\054\uff90\074\uff90\001" +
    "\002\000\046\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\072\uffdf\073\uffdf\074\uffdf\076\uffdf\100\uffdf\103\uffdf" +
    "\001\002\000\034\004\106\005\116\006\122\007\110\010" +
    "\114\041\107\042\104\043\123\044\105\046\102\056\103" +
    "\070\111\071\117\001\002\000\046\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\072\uffe1\073\uffe1\074\uffe1\076" +
    "\uffe1\100\uffe1\103\uffe1\001\002\000\046\055\uffe2\056\uffe2" +
    "\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\072\uffe2\073\uffe2\074\uffe2" +
    "\076\uffe2\100\uffe2\103\uffe2\001\002\000\034\004\106\005" +
    "\116\006\122\007\110\010\114\041\107\042\104\043\123" +
    "\044\105\046\102\056\103\070\111\071\117\001\002\000" +
    "\046\055\135\056\130\057\132\060\137\061\133\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\072" +
    "\uffd8\073\uffd8\074\uffd8\076\uffd8\100\uffd8\103\uffd8\001\002" +
    "\000\046\055\135\056\130\057\132\060\137\061\133\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\076\uffd7\100\uffd7\103\uffd7\001" +
    "\002\000\046\055\uffdd\056\uffdd\057\132\060\137\061\133" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070" +
    "\uffdd\072\uffdd\073\uffdd\074\uffdd\076\uffdd\100\uffdd\103\uffdd" +
    "\001\002\000\046\055\135\056\130\057\132\060\137\061" +
    "\133\062\uffd5\063\136\064\131\065\uffd5\066\uffd5\067\uffd5" +
    "\070\141\072\uffd5\073\uffd5\074\uffd5\076\uffd5\100\uffd5\103" +
    "\uffd5\001\002\000\046\055\135\056\130\057\132\060\137" +
    "\061\133\062\uffd4\063\136\064\131\065\uffd4\066\uffd4\067" +
    "\127\070\141\072\uffd4\073\uffd4\074\uffd4\076\uffd4\100\uffd4" +
    "\103\uffd4\001\002\000\034\004\106\005\116\006\122\007" +
    "\110\010\114\041\107\042\104\043\123\044\105\046\102" +
    "\056\103\070\111\071\117\001\002\000\034\055\135\056" +
    "\130\057\132\060\137\061\133\062\140\063\136\064\131" +
    "\065\142\066\126\067\127\070\141\072\175\001\002\000" +
    "\046\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\076\uff9e\100\uff9e\103\uff9e\001\002" +
    "\000\004\072\201\001\002\000\034\055\135\056\130\057" +
    "\132\060\137\061\133\062\140\063\136\064\131\065\142" +
    "\066\126\067\127\070\141\072\200\001\002\000\046\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\072\uffdc\073" +
    "\uffdc\074\uffdc\076\uffdc\100\uffdc\103\uffdc\001\002\000\034" +
    "\004\106\005\116\006\122\007\110\010\114\041\107\042" +
    "\104\043\123\044\105\046\102\056\103\070\111\071\117" +
    "\001\002\000\046\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061" +
    "\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\072\uffa4\073\uffa4\074\uffa4\076\uffa4\100\uffa4\103" +
    "\uffa4\001\002\000\010\010\212\045\214\052\213\001\002" +
    "\000\034\004\106\005\116\006\122\007\110\010\114\041" +
    "\107\042\104\043\123\044\105\046\102\056\103\070\111" +
    "\071\117\001\002\000\034\055\135\056\130\057\132\060" +
    "\137\061\133\062\140\063\136\064\131\065\142\066\126" +
    "\067\127\070\141\076\206\001\002\000\050\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\070\uffcb\072\uffcb\073\uffcb\074" +
    "\uffcb\075\207\076\uffcb\100\uffcb\103\uffcb\001\002\000\034" +
    "\004\106\005\116\006\122\007\110\010\114\041\107\042" +
    "\104\043\123\044\105\046\102\056\103\070\111\071\117" +
    "\001\002\000\034\055\135\056\130\057\132\060\137\061" +
    "\133\062\140\063\136\064\131\065\142\066\126\067\127" +
    "\070\141\076\211\001\002\000\046\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\067\uffca\070\uffca\072\uffca\073\uffca\074\uffca\076" +
    "\uffca\100\uffca\103\uffca\001\002\000\046\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065" +
    "\uffc8\066\uffc8\067\uffc8\070\uffc8\072\uffc8\073\uffc8\074\uffc8" +
    "\076\uffc8\100\uffc8\103\uffc8\001\002\000\004\071\220\001" +
    "\002\000\004\071\215\001\002\000\034\004\106\005\116" +
    "\006\122\007\110\010\114\041\107\042\104\043\123\044" +
    "\105\046\102\056\103\070\111\071\117\001\002\000\034" +
    "\055\135\056\130\057\132\060\137\061\133\062\140\063" +
    "\136\064\131\065\142\066\126\067\127\070\141\072\217" +
    "\001\002\000\046\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\072\uff9b\073\uff9b\074\uff9b\076\uff9b\100\uff9b\103" +
    "\uff9b\001\002\000\034\004\106\005\116\006\122\007\110" +
    "\010\114\041\107\042\104\043\123\044\105\046\102\056" +
    "\103\070\111\071\117\001\002\000\034\055\135\056\130" +
    "\057\132\060\137\061\133\062\140\063\136\064\131\065" +
    "\142\066\126\067\127\070\141\072\222\001\002\000\046" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\076\uffa0\100\uffa0\103\uffa0\001\002\000" +
    "\046\055\135\056\130\057\132\060\137\061\133\062\uffd6" +
    "\063\136\064\131\065\uffd6\066\uffd6\067\uffd6\070\141\072" +
    "\uffd6\073\uffd6\074\uffd6\076\uffd6\100\uffd6\103\uffd6\001\002" +
    "\000\034\004\106\005\116\006\122\007\110\010\114\041" +
    "\107\042\104\043\123\044\105\046\102\056\103\070\111" +
    "\071\117\001\002\000\034\055\135\056\130\057\132\060" +
    "\137\061\133\062\140\063\136\064\131\065\142\066\126" +
    "\067\127\070\141\072\226\001\002\000\046\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\070\uff9d\072\uff9d\073\uff9d\074" +
    "\uff9d\076\uff9d\100\uff9d\103\uff9d\001\002\000\046\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\076\uffe5\100\uffe5\103\uffe5\001\002\000\034\004" +
    "\106\005\116\006\122\007\110\010\114\041\107\042\104" +
    "\043\123\044\105\046\102\056\103\070\111\071\117\001" +
    "\002\000\034\055\135\056\130\057\132\060\137\061\133" +
    "\062\140\063\136\064\131\065\142\066\126\067\127\070" +
    "\141\072\232\001\002\000\046\055\uff9c\056\uff9c\057\uff9c" +
    "\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\070\uff9c\072\uff9c\073\uff9c\074\uff9c\076\uff9c" +
    "\100\uff9c\103\uff9c\001\002\000\004\002\001\001\002\000" +
    "\020\022\010\023\015\024\036\025\016\026\056\027\052" +
    "\053\076\001\002\000\004\064\236\001\002\000\004\010" +
    "\237\001\002\000\004\062\240\001\002\000\004\050\241" +
    "\001\002\000\004\047\242\001\002\000\004\071\243\001" +
    "\002\000\004\072\244\001\002\000\004\100\uffb6\001\002" +
    "\000\060\002\ufff9\003\ufff9\010\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\047\ufff9\053\ufff9\054\ufff9\074\ufff9\001\002\000\060" +
    "\002\uffe8\003\uffe8\010\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\047" +
    "\uffe8\053\uffe8\054\uffe8\074\uffe8\001\002\000\060\002\ufffc" +
    "\003\ufffc\010\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\047\ufffc\053" +
    "\ufffc\054\ufffc\074\ufffc\001\002\000\004\071\251\001\002" +
    "\000\036\004\106\005\116\006\122\007\110\010\114\041" +
    "\107\042\104\043\123\044\105\046\102\056\103\070\111" +
    "\071\117\072\253\001\002\000\006\072\256\103\255\001" +
    "\002\000\004\100\uff84\001\002\000\036\055\135\056\130" +
    "\057\132\060\137\061\133\062\140\063\136\064\131\065" +
    "\142\066\126\067\127\070\141\072\uff82\103\uff82\001\002" +
    "\000\034\004\106\005\116\006\122\007\110\010\114\041" +
    "\107\042\104\043\123\044\105\046\102\056\103\070\111" +
    "\071\117\001\002\000\004\100\uff85\001\002\000\036\055" +
    "\135\056\130\057\132\060\137\061\133\062\140\063\136" +
    "\064\131\065\142\066\126\067\127\070\141\072\uff83\103" +
    "\uff83\001\002\000\060\002\ufff5\003\ufff5\010\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\047\ufff5\053\ufff5\054\ufff5\074\ufff5\001" +
    "\002\000\060\002\ufff6\003\ufff6\010\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\047\ufff6\053\ufff6\054\ufff6\074\ufff6\001\002\000" +
    "\034\004\106\005\116\006\122\007\110\010\114\041\107" +
    "\042\104\043\123\044\105\046\102\056\103\070\111\071" +
    "\117\001\002\000\034\055\135\056\130\057\132\060\137" +
    "\061\133\062\140\063\136\064\131\065\142\066\126\067" +
    "\127\070\141\072\264\001\002\000\004\073\265\001\002" +
    "\000\054\003\041\010\037\020\022\021\060\022\010\023" +
    "\015\024\036\025\016\026\056\027\052\030\044\032\033" +
    "\033\062\034\012\035\013\036\053\037\040\040\026\047" +
    "\057\053\063\054\050\001\002\000\056\003\041\010\037" +
    "\020\022\021\060\022\010\023\015\024\036\025\016\026" +
    "\056\027\052\030\044\032\033\033\062\034\012\035\013" +
    "\036\053\037\040\040\026\047\057\053\063\054\050\074" +
    "\267\001\002\000\062\002\uff9a\003\uff9a\010\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\270\032\uff9a\033\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\047\uff9a\053\uff9a\054\uff9a\074" +
    "\uff9a\001\002\000\006\030\044\073\272\001\002\000\060" +
    "\002\uff98\003\uff98\010\uff98\020\uff98\021\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\047" +
    "\uff98\053\uff98\054\uff98\074\uff98\001\002\000\054\003\041" +
    "\010\037\020\022\021\060\022\010\023\015\024\036\025" +
    "\016\026\056\027\052\030\044\032\033\033\062\034\012" +
    "\035\013\036\053\037\040\040\026\047\057\053\063\054" +
    "\050\001\002\000\056\003\041\010\037\020\022\021\060" +
    "\022\010\023\015\024\036\025\016\026\056\027\052\030" +
    "\044\032\033\033\062\034\012\035\013\036\053\037\040" +
    "\040\026\047\057\053\063\054\050\074\274\001\002\000" +
    "\060\002\uff99\003\uff99\010\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\047\uff99\053\uff99\054\uff99\074\uff99\001\002\000\060\002" +
    "\ufffb\003\ufffb\010\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\047\ufffb" +
    "\053\ufffb\054\ufffb\074\ufffb\001\002\000\060\002\uffe7\003" +
    "\uffe7\010\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\047\uffe7\053\uffe7" +
    "\054\uffe7\074\uffe7\001\002\000\006\010\320\051\321\001" +
    "\002\000\004\055\317\001\002\000\034\004\106\005\116" +
    "\006\122\007\110\010\114\041\107\042\104\043\123\044" +
    "\105\046\102\056\103\070\111\071\117\001\002\000\004" +
    "\056\315\001\002\000\034\004\106\005\116\006\122\007" +
    "\110\010\114\041\107\042\104\043\123\044\105\046\102" +
    "\056\103\070\111\071\117\001\002\000\034\055\135\056" +
    "\130\057\132\060\137\061\133\062\140\063\136\064\131" +
    "\065\142\066\126\067\127\070\141\076\305\001\002\000" +
    "\006\062\306\075\307\001\002\000\034\004\106\005\116" +
    "\006\122\007\110\010\114\041\107\042\104\043\123\044" +
    "\105\046\102\056\103\070\111\071\117\001\002\000\034" +
    "\004\106\005\116\006\122\007\110\010\114\041\107\042" +
    "\104\043\123\044\105\046\102\056\103\070\111\071\117" +
    "\001\002\000\034\055\135\056\130\057\132\060\137\061" +
    "\133\062\140\063\136\064\131\065\142\066\126\067\127" +
    "\070\141\076\311\001\002\000\004\062\312\001\002\000" +
    "\034\004\106\005\116\006\122\007\110\010\114\041\107" +
    "\042\104\043\123\044\105\046\102\056\103\070\111\071" +
    "\117\001\002\000\034\055\135\056\130\057\132\060\137" +
    "\061\133\062\140\063\136\064\131\065\142\066\126\067" +
    "\127\070\141\100\uffa6\001\002\000\034\055\135\056\130" +
    "\057\132\060\137\061\133\062\140\063\136\064\131\065" +
    "\142\066\126\067\127\070\141\100\uffa7\001\002\000\006" +
    "\072\uffa2\100\uffa2\001\002\000\036\055\135\056\130\057" +
    "\132\060\137\061\133\062\140\063\136\064\131\065\142" +
    "\066\126\067\127\070\141\072\uffa8\100\uffa8\001\002\000" +
    "\006\072\uffa3\100\uffa3\001\002\000\004\062\325\001\002" +
    "\000\004\071\322\001\002\000\034\004\106\005\116\006" +
    "\122\007\110\010\114\041\107\042\104\043\123\044\105" +
    "\046\102\056\103\070\111\071\117\001\002\000\034\055" +
    "\135\056\130\057\132\060\137\061\133\062\140\063\136" +
    "\064\131\065\142\066\126\067\127\070\141\072\324\001" +
    "\002\000\004\100\uffa1\001\002\000\034\004\106\005\116" +
    "\006\122\007\110\010\114\041\107\042\104\043\123\044" +
    "\105\046\102\056\103\070\111\071\117\001\002\000\034" +
    "\055\135\056\130\057\132\060\137\061\133\062\140\063" +
    "\136\064\131\065\142\066\126\067\127\070\141\100\uffa5" +
    "\001\002\000\060\002\ufff3\003\ufff3\010\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\047\ufff3\053\ufff3\054\ufff3\074\ufff3\001\002" +
    "\000\060\002\uffeb\003\uffeb\010\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\047\uffeb\053\uffeb\054\uffeb\074\uffeb\001\002\000\034" +
    "\055\135\056\130\057\132\060\137\061\133\062\140\063" +
    "\136\064\131\065\142\066\126\067\127\070\141\073\332" +
    "\001\002\000\036\004\106\005\116\006\122\007\110\010" +
    "\114\041\107\042\104\043\123\044\105\046\102\056\103" +
    "\070\111\071\117\102\334\001\002\000\040\004\uff93\005" +
    "\uff93\006\uff93\007\uff93\010\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\046\uff93\056\uff93\070\uff93\071\uff93\074\uff93\102" +
    "\uff93\001\002\000\004\062\352\001\002\000\040\004\106" +
    "\005\116\006\122\007\110\010\114\041\107\042\104\043" +
    "\123\044\105\046\102\056\103\070\111\071\117\074\347" +
    "\102\334\001\002\000\004\074\345\001\002\000\032\055" +
    "\135\056\130\057\132\060\137\061\133\062\340\063\136" +
    "\064\131\065\142\066\126\067\127\070\141\001\002\000" +
    "\006\062\146\064\341\001\002\000\004\073\342\001\002" +
    "\000\054\003\041\010\037\020\022\021\060\022\010\023" +
    "\015\024\036\025\016\026\056\027\052\030\044\032\033" +
    "\033\062\034\012\035\013\036\053\037\040\040\026\047" +
    "\057\053\063\054\050\001\002\000\056\003\041\010\037" +
    "\020\022\021\060\022\010\023\015\024\036\025\016\026" +
    "\056\027\052\030\044\032\033\033\062\034\012\035\013" +
    "\036\053\037\040\040\026\047\057\053\063\054\050\074" +
    "\344\001\002\000\040\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\010\uff92\041\uff92\042\uff92\043\uff92\044\uff92\046\uff92\056" +
    "\uff92\070\uff92\071\uff92\074\uff92\102\uff92\001\002\000\060" +
    "\002\uff95\003\uff95\010\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\047" +
    "\uff95\053\uff95\054\uff95\074\uff95\001\002\000\040\004\uff94" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\046\uff94\056\uff94\070\uff94\071\uff94\074\uff94" +
    "\102\uff94\001\002\000\060\002\uff96\003\uff96\010\uff96\020" +
    "\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96" +
    "\027\uff96\030\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\047\uff96\053\uff96\054\uff96\074\uff96" +
    "\001\002\000\004\074\351\001\002\000\060\002\uff97\003" +
    "\uff97\010\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\032\uff97\033\uff97\034" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\047\uff97\053\uff97" +
    "\054\uff97\074\uff97\001\002\000\004\064\353\001\002\000" +
    "\004\073\354\001\002\000\054\003\041\010\037\020\022" +
    "\021\060\022\010\023\015\024\036\025\016\026\056\027" +
    "\052\030\044\032\033\033\062\034\012\035\013\036\053" +
    "\037\040\040\026\047\057\053\063\054\050\001\002\000" +
    "\056\003\041\010\037\020\022\021\060\022\010\023\015" +
    "\024\036\025\016\026\056\027\052\030\044\032\033\033" +
    "\062\034\012\035\013\036\053\037\040\040\026\047\057" +
    "\053\063\054\050\074\356\001\002\000\004\074\uff91\001" +
    "\002\000\004\101\360\001\002\000\022\010\361\022\010" +
    "\023\015\024\036\025\016\026\056\027\052\053\076\001" +
    "\002\000\004\062\u010b\001\002\000\010\062\363\075\364" +
    "\100\uffba\001\002\000\034\004\106\005\116\006\122\007" +
    "\110\010\114\041\107\042\104\043\123\044\105\046\102" +
    "\056\103\070\111\071\117\001\002\000\004\076\365\001" +
    "\002\000\006\062\366\075\367\001\002\000\004\075\u0107" +
    "\001\002\000\004\076\370\001\002\000\004\062\371\001" +
    "\002\000\004\075\372\001\002\000\004\075\373\001\002" +
    "\000\034\004\106\005\116\006\122\007\110\010\114\041" +
    "\107\042\104\043\123\044\105\046\102\056\103\070\111" +
    "\071\117\001\002\000\006\076\376\103\375\001\002\000" +
    "\004\075\377\001\002\000\004\100\uffb7\001\002\000\034" +
    "\004\106\005\116\006\122\007\110\010\114\041\107\042" +
    "\104\043\123\044\105\046\102\056\103\070\111\071\117" +
    "\001\002\000\006\076\u0103\103\u0102\001\002\000\036\055" +
    "\135\056\130\057\132\060\137\061\133\062\140\063\136" +
    "\064\131\065\142\066\126\067\127\070\141\076\uffb2\103" +
    "\uffb2\001\002\000\034\004\106\005\116\006\122\007\110" +
    "\010\114\041\107\042\104\043\123\044\105\046\102\056" +
    "\103\070\111\071\117\001\002\000\006\076\uffb1\103\uffb1" +
    "\001\002\000\036\055\135\056\130\057\132\060\137\061" +
    "\133\062\140\063\136\064\131\065\142\066\126\067\127" +
    "\070\141\076\uffb3\103\uffb3\001\002\000\006\076\u0106\103" +
    "\u0102\001\002\000\006\076\uffb0\103\uffb0\001\002\000\034" +
    "\004\106\005\116\006\122\007\110\010\114\041\107\042" +
    "\104\043\123\044\105\046\102\056\103\070\111\071\117" +
    "\001\002\000\006\076\u0109\103\u0102\001\002\000\004\100" +
    "\uffb8\001\002\000\034\055\135\056\130\057\132\060\137" +
    "\061\133\062\140\063\136\064\131\065\142\066\126\067" +
    "\127\070\141\100\uffb9\001\002\000\004\073\u010c\001\002" +
    "\000\004\010\u010d\001\002\000\004\101\u0113\001\002\000" +
    "\006\074\u0111\103\u0110\001\002\000\006\074\uffaa\103\uffaa" +
    "\001\002\000\004\010\u010d\001\002\000\004\100\uffb4\001" +
    "\002\000\006\074\uffab\103\uffab\001\002\000\034\004\106" +
    "\005\116\006\122\007\110\010\114\041\107\042\104\043" +
    "\123\044\105\046\102\056\103\070\111\071\117\001\002" +
    "\000\036\055\135\056\130\057\132\060\137\061\133\062" +
    "\140\063\136\064\131\065\142\066\126\067\127\070\141" +
    "\074\uffa9\103\uffa9\001\002\000\060\002\ufff2\003\ufff2\010" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\047\ufff2\053\ufff2\054\ufff2" +
    "\074\ufff2\001\002\000\060\002\uffec\003\uffec\010\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\047\uffec\053\uffec\054\uffec\074\uffec" +
    "\001\002\000\060\002\ufff4\003\ufff4\010\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037" +
    "\ufff4\040\ufff4\047\ufff4\053\ufff4\054\ufff4\074\ufff4\001\002" +
    "\000\034\004\106\005\116\006\122\007\110\010\114\041" +
    "\107\042\104\043\123\044\105\046\102\056\103\070\111" +
    "\071\117\001\002\000\034\055\135\056\130\057\132\060" +
    "\137\061\133\062\140\063\136\064\131\065\142\066\126" +
    "\067\127\070\141\072\u011a\001\002\000\004\100\uff9f\001" +
    "\002\000\060\002\ufff8\003\ufff8\010\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\047\ufff8\053\ufff8\054\ufff8\074\ufff8\001\002\000" +
    "\060\002\ufffa\003\ufffa\010\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\047\ufffa\053\ufffa\054\ufffa\074\ufffa\001\002\000\060\002" +
    "\ufffd\003\ufffd\010\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\047\ufffd" +
    "\053\ufffd\054\ufffd\074\ufffd\001\002\000\060\002\uffea\003" +
    "\uffea\010\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\047\uffea\053\uffea" +
    "\054\uffea\074\uffea\001\002\000\054\003\041\010\037\020" +
    "\022\021\060\022\010\023\015\024\036\025\016\026\056" +
    "\027\052\030\044\032\033\033\062\034\012\035\013\036" +
    "\053\037\040\040\026\047\057\053\063\054\050\001\002" +
    "\000\056\003\041\010\037\020\022\021\060\022\010\023" +
    "\015\024\036\025\016\026\056\027\052\030\044\032\033" +
    "\033\062\034\012\035\013\036\053\037\040\040\026\047" +
    "\057\053\063\054\050\074\u0121\001\002\000\004\033\u0122" +
    "\001\002\000\004\071\u0123\001\002\000\034\004\106\005" +
    "\116\006\122\007\110\010\114\041\107\042\104\043\123" +
    "\044\105\046\102\056\103\070\111\071\117\001\002\000" +
    "\034\055\135\056\130\057\132\060\137\061\133\062\140" +
    "\063\136\064\131\065\142\066\126\067\127\070\141\072" +
    "\u0125\001\002\000\004\100\uff8c\001\002\000\004\010\u0127" +
    "\001\002\000\004\062\301\001\002\000\004\100\u0129\001" +
    "\002\000\034\004\106\005\116\006\122\007\110\010\114" +
    "\041\107\042\104\043\123\044\105\046\102\056\103\070" +
    "\111\071\117\001\002\000\034\055\135\056\130\057\132" +
    "\060\137\061\133\062\140\063\136\064\131\065\142\066" +
    "\126\067\127\070\141\100\u012b\001\002\000\004\010\u012c" +
    "\001\002\000\010\055\300\056\302\062\301\001\002\000" +
    "\004\072\uff8e\001\002\000\004\072\u0130\001\002\000\004" +
    "\072\uff8d\001\002\000\004\073\u0131\001\002\000\054\003" +
    "\041\010\037\020\022\021\060\022\010\023\015\024\036" +
    "\025\016\026\056\027\052\030\044\032\033\033\062\034" +
    "\012\035\013\036\053\037\040\040\026\047\057\053\063" +
    "\054\050\001\002\000\056\003\041\010\037\020\022\021" +
    "\060\022\010\023\015\024\036\025\016\026\056\027\052" +
    "\030\044\032\033\033\062\034\012\035\013\036\053\037" +
    "\040\040\026\047\057\053\063\054\050\074\u0133\001\002" +
    "\000\060\002\uff8f\003\uff8f\010\uff8f\020\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\047\uff8f\053\uff8f\054\uff8f\074\uff8f\001\002\000\004" +
    "\071\u0135\001\002\000\022\022\010\023\015\024\036\025" +
    "\016\026\056\027\052\053\076\072\u0136\001\002\000\004" +
    "\073\u0141\001\002\000\004\010\u0140\001\002\000\006\072" +
    "\u013a\103\u0139\001\002\000\020\022\010\023\015\024\036" +
    "\025\016\026\056\027\052\053\076\001\002\000\004\073" +
    "\u013b\001\002\000\054\003\041\010\037\020\022\021\060" +
    "\022\010\023\015\024\036\025\016\026\056\027\052\030" +
    "\044\032\033\033\062\034\012\035\013\036\053\037\040" +
    "\040\026\047\057\053\063\054\050\001\002\000\056\003" +
    "\041\010\037\020\022\021\060\022\010\023\015\024\036" +
    "\025\016\026\056\027\052\030\044\032\033\033\062\034" +
    "\012\035\013\036\053\037\040\040\026\047\057\053\063" +
    "\054\050\074\u013d\001\002\000\060\002\uff89\003\uff89\010" +
    "\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\032\uff89\033\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\047\uff89\053\uff89\054\uff89" +
    "\074\uff89\001\002\000\004\010\u013f\001\002\000\006\072" +
    "\uff87\103\uff87\001\002\000\006\072\uff86\103\uff86\001\002" +
    "\000\054\003\041\010\037\020\022\021\060\022\010\023" +
    "\015\024\036\025\016\026\056\027\052\030\044\032\033" +
    "\033\062\034\012\035\013\036\053\037\040\040\026\047" +
    "\057\053\063\054\050\001\002\000\056\003\041\010\037" +
    "\020\022\021\060\022\010\023\015\024\036\025\016\026" +
    "\056\027\052\030\044\032\033\033\062\034\012\035\013" +
    "\036\053\037\040\040\026\047\057\053\063\054\050\074" +
    "\u0143\001\002\000\060\002\uff88\003\uff88\010\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88" +
    "\037\uff88\040\uff88\047\uff88\053\uff88\054\uff88\074\uff88\001" +
    "\002\000\060\002\ufff1\003\ufff1\010\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\047\ufff1\053\ufff1\054\ufff1\074\ufff1\001\002\000" +
    "\060\002\ufff7\003\ufff7\010\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\047\ufff7\053\ufff7\054\ufff7\074\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\070\002\060\003\022\015\006\016\031\017" +
    "\017\021\020\022\050\023\044\024\010\025\005\027\004" +
    "\030\041\031\027\032\045\034\033\035\016\036\042\037" +
    "\046\040\023\041\026\042\054\043\030\045\024\046\003" +
    "\047\034\054\013\056\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\015\006\016\031\017\156\021\020" +
    "\022\050\023\044\024\010\025\005\027\004\030\041\031" +
    "\027\032\045\034\033\035\016\036\042\037\046\040\023" +
    "\041\026\042\054\043\030\045\024\046\003\047\034\054" +
    "\013\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\330\026\111" +
    "\044\112\050\114\051\117\052\123\053\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\065\012\066\001\001\000" +
    "\002\001\001\000\004\012\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\124\026\111\044\112\050\114\051\117\052\123" +
    "\053\120\001\001\000\002\001\001\000\020\020\226\026" +
    "\111\044\112\050\114\051\117\052\123\053\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\222\026\111" +
    "\044\112\050\114\051\117\052\123\053\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\175\020\176\026" +
    "\111\044\112\050\114\051\117\052\123\053\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\171\026\111\044\112\050\114\051\117\052\123\053" +
    "\120\001\001\000\020\020\170\026\111\044\112\050\114" +
    "\051\117\052\123\053\120\001\001\000\020\020\167\026" +
    "\111\044\112\050\114\051\117\052\123\053\120\001\001" +
    "\000\020\020\165\026\111\044\112\050\114\051\117\052" +
    "\123\053\120\001\001\000\020\020\162\026\111\044\112" +
    "\050\114\051\117\052\123\053\120\001\001\000\020\020" +
    "\160\026\111\044\112\050\114\051\117\052\123\053\120" +
    "\001\001\000\002\001\001\000\020\020\153\026\111\044" +
    "\112\050\114\051\117\052\123\053\120\001\001\000\020" +
    "\020\151\026\111\044\112\050\114\051\117\052\123\053" +
    "\120\001\001\000\020\020\147\026\111\044\112\050\114" +
    "\051\117\052\123\053\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\142\026\111\044\112\050\114" +
    "\051\117\052\123\053\120\001\001\000\002\001\001\000" +
    "\020\020\144\026\111\044\112\050\114\051\117\052\123" +
    "\053\120\001\001\000\002\001\001\000\020\020\146\026" +
    "\111\044\112\050\114\051\117\052\123\053\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\152\026" +
    "\111\044\112\050\114\051\117\052\123\053\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\003\155\015\006\016\031\017\017\021\020\022\050" +
    "\023\044\024\010\025\005\027\004\030\041\031\027\032" +
    "\045\034\033\035\016\036\042\037\046\040\023\041\026" +
    "\042\054\043\030\045\024\046\003\047\034\054\013\056" +
    "\053\001\001\000\064\015\006\016\031\017\156\021\020" +
    "\022\050\023\044\024\010\025\005\027\004\030\041\031" +
    "\027\032\045\034\033\035\016\036\042\037\046\040\023" +
    "\041\026\042\054\043\030\045\024\046\003\047\034\054" +
    "\013\056\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\163\026\111\044\112\050" +
    "\114\051\117\052\123\053\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\166\026\111\044\112\050" +
    "\114\051\117\052\123\053\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\173\026\111\044\112\050\114" +
    "\051\117\052\123\053\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\201\026\111\044\112\050\114\051" +
    "\117\052\123\053\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\204\026\111\044\112\050\114\051" +
    "\117\052\123\053\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\207\026\111\044\112\050\114\051" +
    "\117\052\123\053\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\215\026\111\044\112\050\114\051\117" +
    "\052\123\053\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\020\220\026\111\044\112\050\114\051\117" +
    "\052\123\053\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\224\026\111\044\112" +
    "\050\114\051\117\052\123\053\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\230" +
    "\026\111\044\112\050\114\051\117\052\123\053\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\020\253\026\111\044\112\050\114\051" +
    "\117\052\123\053\120\057\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\256\026" +
    "\111\044\112\050\114\051\117\052\123\053\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\262\026\111\044\112\050\114" +
    "\051\117\052\123\053\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\003\265\015\006\016\031\017\017" +
    "\021\020\022\050\023\044\024\010\025\005\027\004\030" +
    "\041\031\027\032\045\034\033\035\016\036\042\037\046" +
    "\040\023\041\026\042\054\043\030\045\024\046\003\047" +
    "\034\054\013\056\053\001\001\000\064\015\006\016\031" +
    "\017\156\021\020\022\050\023\044\024\010\025\005\027" +
    "\004\030\041\031\027\032\045\034\033\035\016\036\042" +
    "\037\046\040\023\041\026\042\054\043\030\045\024\046" +
    "\003\047\034\054\013\056\053\001\001\000\002\001\001" +
    "\000\004\024\270\001\001\000\002\001\001\000\066\003" +
    "\272\015\006\016\031\017\017\021\020\022\050\023\044" +
    "\024\010\025\005\027\004\030\041\031\027\032\045\034" +
    "\033\035\016\036\042\037\046\040\023\041\026\042\054" +
    "\043\030\045\024\046\003\047\034\054\013\056\053\001" +
    "\001\000\064\015\006\016\031\017\156\021\020\022\050" +
    "\023\044\024\010\025\005\027\004\030\041\031\027\032" +
    "\045\034\033\035\016\036\042\037\046\040\023\041\026" +
    "\042\054\043\030\045\024\046\003\047\034\054\013\056" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\315\026\111\044\112\050\114\051\117\052\123\053\120" +
    "\001\001\000\002\001\001\000\020\020\303\026\111\044" +
    "\112\050\114\051\117\052\123\053\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\313\026\111\044" +
    "\112\050\114\051\117\052\123\053\120\001\001\000\020" +
    "\020\307\026\111\044\112\050\114\051\117\052\123\053" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\020\312\026\111\044\112\050\114\051\117\052\123\053" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\322\026\111\044\112" +
    "\050\114\051\117\052\123\053\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\325\026\111\044\112" +
    "\050\114\051\117\052\123\053\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\335\006\334\010\332\020\336\026\111\044" +
    "\112\050\114\051\117\052\123\053\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\347\010\345\020" +
    "\336\026\111\044\112\050\114\051\117\052\123\053\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\066\003\342\015\006\016\031" +
    "\017\017\021\020\022\050\023\044\024\010\025\005\027" +
    "\004\030\041\031\027\032\045\034\033\035\016\036\042" +
    "\037\046\040\023\041\026\042\054\043\030\045\024\046" +
    "\003\047\034\054\013\056\053\001\001\000\064\015\006" +
    "\016\031\017\156\021\020\022\050\023\044\024\010\025" +
    "\005\027\004\030\041\031\027\032\045\034\033\035\016" +
    "\036\042\037\046\040\023\041\026\042\054\043\030\045" +
    "\024\046\003\047\034\054\013\056\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\354\015\006\016\031\017" +
    "\017\021\020\022\050\023\044\024\010\025\005\027\004" +
    "\030\041\031\027\032\045\034\033\035\016\036\042\037" +
    "\046\040\023\041\026\042\054\043\030\045\024\046\003" +
    "\047\034\054\013\056\053\001\001\000\064\015\006\016" +
    "\031\017\156\021\020\022\050\023\044\024\010\025\005" +
    "\027\004\030\041\031\027\032\045\034\033\035\016\036" +
    "\042\037\046\040\023\041\026\042\054\043\030\045\024" +
    "\046\003\047\034\054\013\056\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\361\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\020\u0109\026\111\044" +
    "\112\050\114\051\117\052\123\053\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\373" +
    "\001\001\000\022\005\u0104\020\u0100\026\111\044\112\050" +
    "\114\051\117\052\123\053\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\377\020" +
    "\u0100\026\111\044\112\050\114\051\117\052\123\053\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\u0103\026\111\044\112\050\114\051\117\052\123\053\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\u0107\020\u0100\026\111" +
    "\044\112\050\114\051\117\052\123\053\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\u010d\014\u010e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\u0113\026\111\044\112\050\114\051\117\052\123\053\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\u0118\026\111\044\112" +
    "\050\114\051\117\052\123\053\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\u011f\015" +
    "\006\016\031\017\017\021\020\022\050\023\044\024\010" +
    "\025\005\027\004\030\041\031\027\032\045\034\033\035" +
    "\016\036\042\037\046\040\023\041\026\042\054\043\030" +
    "\045\024\046\003\047\034\054\013\056\053\001\001\000" +
    "\064\015\006\016\031\017\156\021\020\022\050\023\044" +
    "\024\010\025\005\027\004\030\041\031\027\032\045\034" +
    "\033\035\016\036\042\037\046\040\023\041\026\042\054" +
    "\043\030\045\024\046\003\047\034\054\013\056\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\020\u0123" +
    "\026\111\044\112\050\114\051\117\052\123\053\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u0127" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\020" +
    "\u0129\026\111\044\112\050\114\051\117\052\123\053\120" +
    "\001\001\000\002\001\001\000\010\023\u012c\027\u012e\033" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\066\003" +
    "\u0131\015\006\016\031\017\017\021\020\022\050\023\044" +
    "\024\010\025\005\027\004\030\041\031\027\032\045\034" +
    "\033\035\016\036\042\037\046\040\023\041\026\042\054" +
    "\043\030\045\024\046\003\047\034\054\013\056\053\001" +
    "\001\000\064\015\006\016\031\017\156\021\020\022\050" +
    "\023\044\024\010\025\005\027\004\030\041\031\027\032" +
    "\045\034\033\035\016\036\042\037\046\040\023\041\026" +
    "\042\054\043\030\045\024\046\003\047\034\054\013\056" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0136\055\u0137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u013d\001\001\000\002" +
    "\001\001\000\066\003\u013b\015\006\016\031\017\017\021" +
    "\020\022\050\023\044\024\010\025\005\027\004\030\041" +
    "\031\027\032\045\034\033\035\016\036\042\037\046\040" +
    "\023\041\026\042\054\043\030\045\024\046\003\047\034" +
    "\054\013\056\053\001\001\000\064\015\006\016\031\017" +
    "\156\021\020\022\050\023\044\024\010\025\005\027\004" +
    "\030\041\031\027\032\045\034\033\035\016\036\042\037" +
    "\046\040\023\041\026\042\054\043\030\045\024\046\003" +
    "\047\034\054\013\056\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\003\u0141\015\006\016\031\017\017\021\020\022\050\023" +
    "\044\024\010\025\005\027\004\030\041\031\027\032\045" +
    "\034\033\035\016\036\042\037\046\040\023\041\026\042" +
    "\054\043\030\045\024\046\003\047\034\054\013\056\053" +
    "\001\001\000\064\015\006\016\031\017\156\021\020\022" +
    "\050\023\044\024\010\025\005\027\004\030\041\031\027" +
    "\032\045\034\033\035\016\036\042\037\046\040\023\041" +
    "\026\042\054\043\030\045\024\046\003\047\034\054\013" +
    "\056\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<exceptions.Error> parserErrors = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        parserErrors.add(new exceptions.Error("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> start_val = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= PRINTLN PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECLARACION_LISTAS_DINAMICAS PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DECLARACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INSTANCIACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACION PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= ASIGNACION_VECTORES_1D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= ASIGNACION_VECTORES_2D PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= ASIGNACION_STRUCT PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= AGREGAR_VALOR_LISTA PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= INCREMENTO_DECREMENTO PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= SENTENCIA_MATCH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= SENTENCIA_DO_WHILE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= SENTENCIA_BREAK PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= SENTENCIA_CONTINUE PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= METODO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= START_WITH PUNTO_COMA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= error PUNTO_COMA 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= error 
            {
              Instruction RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, Operators.NEGACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION IGUAL IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.IGUALACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= CASTEO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION MULT MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.POTENCIA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION MULT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MULTIPLICACION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION DIV EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.DIVISION, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MOD EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.MODULO, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.SUMA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Arithmetic(a, b, Operators.RESTA, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION NOT IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.DIFERENCIACION, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MENOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MENOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MENOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MAYOR_QUE EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_QUE, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION MAYOR_QUE IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Relational(a, b, Operators.MAYOR_IGUAL, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= NOT EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, Operators.NOT, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.XOR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.AND, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Logical(a, b, Operators.OR, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= ENTERO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(Integer.parseInt(a), new Type(DataType.ENTERO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= DECIMAL 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(new Double(a), new Type(DataType.DECIMAL), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= CADENA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CADENA), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= CARACTER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(a, new Type(DataType.CARACTER), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= KW_TRUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(true, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= KW_FALSE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Native(false, new Type(DataType.BOOLEANO), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAccess(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorAccess(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= QUITAR_VALOR_LISTA 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= ID PUNTO ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructAccess(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= ROUND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= TO_STRING 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= LENGTH 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= FIND 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPO ::= KW_INT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.ENTERO);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO ::= KW_DOUBLE 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.DECIMAL);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO ::= KW_BOOL 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO ::= KW_CHAR 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO ::= KW_STRING 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.CADENA);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO ::= KW_STRUCT 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.STRUCT);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= KW_VOID 
            {
              Type RESULT =null;
		   RESULT = new Type(DataType.VOID);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MUTABILIDAD ::= KW_CONST 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.CONST;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MUTABILIDAD ::= KW_VAR 
            {
              MutabilityType RESULT =null;
		   RESULT = MutabilityType.VAR;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= MUTABILIDAD ID DOS_PUNTOS TIPO IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Declaration(a, b, d, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_VECTORES_1D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_1D",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_VECTORES_2D ::= MUTABILIDAD ID DOS_PUNTOS TIPO CORCHETE_IZQ CORCHETE_DER CORCHETE_IZQ CORCHETE_DER IGUAL CORCHETE_IZQ LISTA_VALORES_V2D CORCHETE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LinkedList<Instruction>> d = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new VectorDeclaration(a, b, c, d, true, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES_2D",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_LISTAS_DINAMICAS ::= KW_LIST MENOR_QUE TIPO MAYOR_QUE ID IGUAL KW_NEW KW_LIST PAR_IZQ PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		   RESULT = new DynamicListDeclaration(b, a, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTAS_DINAMICAS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_STRUCT ::= KW_STRUCT LLAVE_IZQ LISTA_STRUCT LLAVE_DER ID 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructDeclaration(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTANCIACION_STRUCT ::= MUTABILIDAD ID DOS_PUNTOS ID IGUAL LLAVE_IZQ LISTA_VALORES_STRUCT LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		MutabilityType a = (MutabilityType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<StructValue> d = (LinkedList<StructValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new StructInstantiation(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTANCIACION_STRUCT",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_VALORES_V1D ::= LISTA_VALORES_V1D COMA EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_VALORES_V1D ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V1D",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_VALORES_V2D ::= LISTA_VALORES_V2D COMA CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<LinkedList<Instruction>> a = (LinkedList<LinkedList<Instruction>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_VALORES_V2D ::= CORCHETE_IZQ LISTA_VALORES_V1D CORCHETE_DER 
            {
              LinkedList<LinkedList<Instruction>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_V2D",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_STRUCT ::= LISTA_STRUCT CAMPO_STRUCT PUNTO_COMA 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructField> a = (LinkedList<StructField>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StructField b = (StructField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_STRUCT ::= CAMPO_STRUCT PUNTO_COMA 
            {
              LinkedList<StructField> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StructField a = (StructField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_STRUCT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CAMPO_STRUCT ::= ID DOS_PUNTOS TIPO 
            {
              StructField RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructField(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CAMPO_STRUCT ::= ID DOS_PUNTOS ID 
            {
              StructField RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructField(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAMPO_STRUCT",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_VALORES_STRUCT ::= LISTA_VALORES_STRUCT COMA VALOR_STRUCT 
            {
              LinkedList<StructValue> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StructValue> a = (LinkedList<StructValue>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructValue b = (StructValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_STRUCT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_VALORES_STRUCT ::= VALOR_STRUCT 
            {
              LinkedList<StructValue> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructValue a = (StructValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_STRUCT",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALOR_STRUCT ::= ID DOS_PUNTOS EXPRESION 
            {
              StructValue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructValue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR_STRUCT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VariableAssignment(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNACION_VECTORES_1D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_1D",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNACION_VECTORES_2D ::= ID CORCHETE_IZQ EXPRESION CORCHETE_DER CORCHETE_IZQ EXPRESION CORCHETE_DER IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction d = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new VectorAssignment(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VECTORES_2D",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNACION_STRUCT ::= ID PUNTO ID IGUAL EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new StructAssignment(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_STRUCT",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASTEO ::= PAR_IZQ TIPO PAR_DER EXPRESION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new TypeCasting(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASTEO",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // INCREMENTO_DECREMENTO ::= ID MAS MAS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Incremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // INCREMENTO_DECREMENTO ::= ID MENOS MENOS 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new VariableAssignment(a, "Decremento", aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO_DECREMENTO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AGREGAR_VALOR_LISTA ::= ID PUNTO KW_APPEND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Append(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGREGAR_VALOR_LISTA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // QUITAR_VALOR_LISTA ::= ID PUNTO KW_REMOVE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Remove(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUITAR_VALOR_LISTA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PRINTLN ::= KW_PRINTLN PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Print(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINTLN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ROUND ::= KW_ROUND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Round(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROUND",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LENGTH ::= KW_LENGTH PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Length(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LENGTH",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TO_STRING ::= KW_TO_STRING PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TO_STRING",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FIND ::= ID PUNTO KW_FIND PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Find(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIND",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_IF ::= KW_IF PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_ELSE SENTENCIA_IF 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new If(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ CASOS_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> b = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_MATCH ::= KW_MATCH EXPRESION LLAVE_IZQ DEFAULT_MATCH LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, true, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_MATCH",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASOS_MATCH ::= CASOS_MATCH CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CaseMatch> a = (LinkedList<CaseMatch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch b = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASOS_MATCH ::= CASO_MATCH 
            {
              LinkedList<CaseMatch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CaseMatch a = (CaseMatch)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new LinkedList<>(); RESULT.add(a);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_MATCH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASO_MATCH ::= EXPRESION IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              CaseMatch RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CaseMatch(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_MATCH",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DEFAULT_MATCH ::= GUION_BAJO IGUAL MAYOR_QUE LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_MATCH",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_WHILE ::= KW_WHILE PAR_IZQ EXPRESION PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_FOR ::= KW_FOR PAR_IZQ ASIGNACION PUNTO_COMA EXPRESION PUNTO_COMA ACTUALIZA_FOR PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruction c = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> d = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ACTUALIZA_FOR ::= ASIGNACION 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACTUALIZA_FOR ::= INCREMENTO_DECREMENTO 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_DO_WHILE ::= KW_DO LLAVE_IZQ INSTRUCCIONES LLAVE_DER KW_WHILE PAR_IZQ EXPRESION PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_BREAK ::= KW_BREAK 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Break(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BREAK",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_CONTINUE ::= KW_CONTINUE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Continue(aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONTINUE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // METODO ::= TIPO ID PAR_IZQ PARAMETROS PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Method(b, p, c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // METODO ::= TIPO ID PAR_IZQ PAR_DER LLAVE_IZQ INSTRUCCIONES LLAVE_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> c = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Method(b, new LinkedList<HashMap>(), c, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAMETROS ::= PARAMETROS COMA TIPO ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = a;
                                                    var hm2= new HashMap<String, Object>();
                                                    hm2.put("id", c);
                                                    hm2.put("tipo", b);
                                                    RESULT.add(hm2);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAMETROS ::= TIPO ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                    RESULT = new LinkedList<HashMap>(); 
                                                    var hm = new HashMap<String, Object>();
                                                    hm.put("id",b);
                                                    hm.put("tipo", a);
                                                    RESULT.add(hm);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // START_WITH ::= KW_START_WITH ID PAR_IZQ PARAMETROS_LLAMADA PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruction> b = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new StartWith(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START_WITH",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // START_WITH ::= KW_START_WITH ID PAR_IZQ PAR_DER 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new StartWith(a, new LinkedList<Instruction>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START_WITH",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAMETROS_LLAMADA ::= PARAMETROS_LLAMADA COMA EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruction> a = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction e = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                    RESULT = a;
                                                                    RESULT.add(e);
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAMETROS_LLAMADA ::= EXPRESION 
            {
              LinkedList<Instruction> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                    RESULT = new LinkedList<Instruction>(); 
                                                                    RESULT.add(a);
                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
